<Activity mc:Ignorable="sap sap2010 sads" x:Class="SCI.TAR.Workflows.BudgetApprovalWorkflow.Workflow" sap2010:ExpressionActivityEditor.ExpressionActivityEditor="C#" sap2010:WorkflowViewState.IdRef="SCI.TAR.Workflows.BudgetApprovalWorkflow.Workflow_1"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.Design"
 xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities"
 xmlns:p1="wf://workflow.windows.net/$Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
      <x:String>Microsoft.Activities</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Workflow.Runtime</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.Client.ServerRuntime</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>SCI.TAR.Workflows</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Main Sequence" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="emailTemplateId" />
      <Variable x:TypeArguments="p:DynamicValue" Name="dynamicValue" />
      <Variable x:TypeArguments="x:String" Name="emailSubject" />
      <Variable x:TypeArguments="x:String" Name="emailContent" />
      <Variable x:TypeArguments="x:String" Name="myUser" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="toRecipients" />
      <Variable x:TypeArguments="x:String" Name="tokenValue" />
      <Variable x:TypeArguments="p:DynamicValue" Name="tarDetails" />
      <Variable x:TypeArguments="x:Int32" Name="tokenValueInt" />
      <Variable x:TypeArguments="x:String" Name="webUrl" />
      <Variable x:TypeArguments="x:String" Name="travellerLoginName" />
      <Variable x:TypeArguments="x:String" Name="budgetApproverLoginName" />
      <Variable x:TypeArguments="x:String" Name="requesterLoginName" />
      <Variable x:TypeArguments="x:String" Name="emailAddress">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="x:String">string.Empty</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:Int32" Name="taskBudgetApprovalOutcome" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="ccRecipients" />
      <Variable x:TypeArguments="x:Int32" Name="taskBudgetApprovalId" />
      <Variable x:TypeArguments="x:String" Name="rejectedEmailSubject" />
      <Variable x:TypeArguments="x:String" Name="rejectedEmailContent" />
      <Variable x:TypeArguments="x:Int32" Name="taskGSSApprovalId" />
      <Variable x:TypeArguments="x:Int32" Name="taskGSSApprovalOutcome" />
      <Variable x:TypeArguments="x:Boolean" Name="requiresGssApproval" />
      <Variable x:TypeArguments="x:String" Name="taskDescription" />
      <Variable x:TypeArguments="s:Guid" Name="tasksListGuid" />
      <Variable x:TypeArguments="x:String" Name="budgetApproverName" />
      <Variable x:TypeArguments="x:String" Name="approvedEmailSubject" />
      <Variable x:TypeArguments="x:String" Name="approvedEmailContent" />
      <Variable x:TypeArguments="s:DateTime" Name="tokenValueDateTime" />
      <Variable x:TypeArguments="x:String" Name="gssEmailSubject" />
      <Variable x:TypeArguments="x:String" Name="gssEmailContent" />
      <Variable x:TypeArguments="x:String" Name="tarId" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="tokenPlaceholders" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="tokenValues" />
      <Variable x:TypeArguments="x:String" Name="travelCoordinatorLoginName" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="countryDirectorsLoginNames" />
      <Variable x:TypeArguments="x:String" Name="additionalStaffMemberLoginName" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="securityDirectorsLoginNames" />
      <Variable x:TypeArguments="x:String" Name="diversityLoginName" />
    </Sequence.Variables>
    <p1:WebUri DisplayName="Get WebUri" sap2010:WorkflowViewState.IdRef="WebUri_1">
      <p1:WebUri.Result>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String">webUrl</mca:CSharpReference>
        </OutArgument>
      </p1:WebUri.Result>
    </p1:WebUri>
    <Sequence DisplayName="Initialization" sap2010:WorkflowViewState.IdRef="Sequence_9">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:Boolean" Name="dynamicValueIsEmpty" />
        <Variable x:TypeArguments="x:String" Name="destinations" />
        <Variable x:TypeArguments="x:Int32" Name="collectionSize" />
        <Variable x:TypeArguments="x:String" Name="appRelativeUrl" />
        <Variable x:TypeArguments="sco:Collection(x:String)" Name="restrictedTravelCountries" />
        <Variable x:TypeArguments="x:Boolean" Name="tarFromEif" />
      </Sequence.Variables>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize tokenPlaceholders" sap2010:WorkflowViewState.IdRef="BuildCollection`1_11">
        <p:BuildCollection.Collection>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">tokenPlaceholders</mca:CSharpValue>
          </InArgument>
        </p:BuildCollection.Collection>
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">tokenPlaceholders</mca:CSharpReference>
          </OutArgument>
        </p:BuildCollection.Result>
      </p:BuildCollection>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize tokenValues" sap2010:WorkflowViewState.IdRef="BuildCollection`1_12">
        <p:BuildCollection.Collection>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">tokenValues</mca:CSharpValue>
          </InArgument>
        </p:BuildCollection.Collection>
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">tokenValues</mca:CSharpReference>
          </OutArgument>
        </p:BuildCollection.Result>
      </p:BuildCollection>
      <Sequence DisplayName="Get Submitted Email Template" sap2010:WorkflowViewState.IdRef="Sequence_2">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_1" PropertyName="LinkTitle" PropertyValue="TAR_Submitted">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found" sap2010:WorkflowViewState.IdRef="If_4">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">emailTemplateId &lt; 1</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_11">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_16" Message="Cannot find submitted email template." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_4" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template " sap2010:WorkflowViewState.IdRef="LookupSPListItem_1">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details" sap2010:WorkflowViewState.IdRef="GetODataProperties_5">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <mca:CSharpReference x:TypeArguments="x:String">emailSubject</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <mca:CSharpReference x:TypeArguments="x:String">emailContent</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content to the email" sap2010:WorkflowViewState.IdRef="If_1">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(emailSubject) || string.IsNullOrEmpty(emailContent)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_12" Message="Invalid submitted email template details." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_1" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get GSS Approval Email Template" sap2010:WorkflowViewState.IdRef="Sequence_44">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_4" PropertyName="LinkTitle" PropertyValue="TAR_GSSApproval">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found" sap2010:WorkflowViewState.IdRef="If_19">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">emailTemplateId &lt; 1</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_42">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_37" Message="Cannot find gss approval email template." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_17" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template " sap2010:WorkflowViewState.IdRef="LookupSPListItem_7">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details" sap2010:WorkflowViewState.IdRef="GetODataProperties_12">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <mca:CSharpReference x:TypeArguments="x:String">gssEmailSubject</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <mca:CSharpReference x:TypeArguments="x:String">gssEmailContent</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content to the email" sap2010:WorkflowViewState.IdRef="If_20">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(gssEmailSubject) || string.IsNullOrEmpty(gssEmailContent)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_43">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_38" Message="Invalid gss approval email template details." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_18" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Rejected Email Template" sap2010:WorkflowViewState.IdRef="Sequence_29">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_2" PropertyName="LinkTitle" PropertyValue="TAR_Rejected">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found" sap2010:WorkflowViewState.IdRef="If_13">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">emailTemplateId &lt; 1</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_28">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_33" Message="Cannot find rejected email template." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_11" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template " sap2010:WorkflowViewState.IdRef="LookupSPListItem_3">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details" sap2010:WorkflowViewState.IdRef="GetODataProperties_7">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailSubject</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content in the email" sap2010:WorkflowViewState.IdRef="If_14">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(rejectedEmailSubject) || string.IsNullOrEmpty(rejectedEmailContent)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_30">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_34" Message="Invalid rejected email template details." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_12" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Approved Email Template" sap2010:WorkflowViewState.IdRef="Sequence_38">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_3" PropertyName="LinkTitle" PropertyValue="TAR_Approved">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found" sap2010:WorkflowViewState.IdRef="If_17">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">emailTemplateId &lt; 1</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_39">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_35" Message="Cannot find approved email template." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_15" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template " sap2010:WorkflowViewState.IdRef="LookupSPListItem_6">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details" sap2010:WorkflowViewState.IdRef="GetODataProperties_11">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <mca:CSharpReference x:TypeArguments="x:String">approvedEmailSubject</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <mca:CSharpReference x:TypeArguments="x:String">approvedEmailContent</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content in the email" sap2010:WorkflowViewState.IdRef="If_18">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(approvedEmailSubject) || string.IsNullOrEmpty(approvedEmailContent)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_40">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_36" Message="Invalid approved email template details." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_16" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR WF Settings" sap2010:WorkflowViewState.IdRef="Sequence_50">
        <p1:LookupSPListItemId DisplayName="Lookup TARSettings App relative path" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_5" PropertyValue="AppRelativeUrl">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.PropertyName>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">"LinkTitle"</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.PropertyName>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If setting exists" sap2010:WorkflowViewState.IdRef="If_32">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_68">
              <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup TAR Setting" sap2010:WorkflowViewState.IdRef="LookupSPListItem_8">
                <p1:LookupSPListItem.ItemId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItem.ItemId>
                <p1:LookupSPListItem.ListId>
                  <InArgument x:TypeArguments="s:Guid">
                    <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItem.ListId>
                <p1:LookupSPListItem.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                  </OutArgument>
                </p1:LookupSPListItem.Result>
              </p1:LookupSPListItem>
              <p:GetODataProperties DisplayName="Get App relative URL" sap2010:WorkflowViewState.IdRef="GetODataProperties_13">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="TAR_SettingValue">
                    <mca:CSharpReference x:TypeArguments="x:String">appRelativeUrl</mca:CSharpReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_39" Message="AppRelativeUrl does not exist in TAR Settings list." />
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Diversity User" sap2010:WorkflowViewState.IdRef="Sequence_67">
        <p1:LookupSPListItemId DisplayName="Lookup TARSettings Diversity Inbox" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_7" PropertyValue="Diversity_Inbox">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.PropertyName>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">"LinkTitle"</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPListItemId.PropertyName>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If Diversity User exists" sap2010:WorkflowViewState.IdRef="If_33">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_69">
              <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup TAR Setting" sap2010:WorkflowViewState.IdRef="LookupSPListItem_11">
                <p1:LookupSPListItem.ItemId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItem.ItemId>
                <p1:LookupSPListItem.ListId>
                  <InArgument x:TypeArguments="s:Guid">
                    <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItem.ListId>
                <p1:LookupSPListItem.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                  </OutArgument>
                </p1:LookupSPListItem.Result>
              </p1:LookupSPListItem>
              <p:GetODataProperties DisplayName="Get Diversity User" sap2010:WorkflowViewState.IdRef="GetODataProperties_20">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="TAR_SettingValue">
                    <mca:CSharpReference x:TypeArguments="x:String">diversityLoginName</mca:CSharpReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_40" Message="Diversity_Inbox does not exist in TAR Settings list." />
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Request item" sap2010:WorkflowViewState.IdRef="Sequence_17">
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Current TAR item" sap2010:WorkflowViewState.IdRef="LookupSPListItem_2">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                <p1:GetCurrentItemId />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                <p1:GetCurrentListId />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:IsEmptyDynamicValue DisplayName="Check if empty tarDetails" sap2010:WorkflowViewState.IdRef="IsEmptyDynamicValue_1">
          <p:IsEmptyDynamicValue.Input>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:IsEmptyDynamicValue.Input>
          <p:IsEmptyDynamicValue.Result>
            <OutArgument x:TypeArguments="x:Boolean">
              <mca:CSharpReference x:TypeArguments="x:Boolean">dynamicValueIsEmpty</mca:CSharpReference>
            </OutArgument>
          </p:IsEmptyDynamicValue.Result>
        </p:IsEmptyDynamicValue>
        <If DisplayName="If tarDetails is empty" sap2010:WorkflowViewState.IdRef="If_6">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">dynamicValueIsEmpty</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_16">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_18" Message="No TAR Request found." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_6" Reason="No TAR Request found." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Requester" sap2010:WorkflowViewState.IdRef="Sequence_23">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Requester Id" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_9" PropertyName="d/results/(0)/TAR_RequesterId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <p1:LookupSPUser DisplayName="Lookup Requester" sap2010:WorkflowViewState.IdRef="LookupSPUser_4">
          <p1:LookupSPUser.PrincipalId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPUser.PrincipalId>
          <p1:LookupSPUser.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPUser.Result>
        </p1:LookupSPUser>
        <p:GetODataProperties DisplayName="Get Requester properties" sap2010:WorkflowViewState.IdRef="GetODataProperties_6">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
              <mca:CSharpReference x:TypeArguments="x:String">requesterLoginName</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Email">
              <mca:CSharpReference x:TypeArguments="x:String">emailAddress</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Title">
              <mca:CSharpReference x:TypeArguments="x:String">tokenValue</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If Email is empty" sap2010:WorkflowViewState.IdRef="If_9">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(emailAddress)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_24">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_28">
                <p1:WriteToHistory.Message>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address", requesterLoginName);</mca:CSharpValue>
                  </InArgument>
                </p1:WriteToHistory.Message>
              </p1:WriteToHistory>
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_8">
                <TerminateWorkflow.Reason>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address", requesterLoginName);</mca:CSharpValue>
                  </InArgument>
                </TerminateWorkflow.Reason>
              </TerminateWorkflow>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_77">
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {REQUESTER} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_50" Item="{}{REQUESTER}">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {REQUESTER} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_51" Item="&amp;#123;REQUESTER&amp;#125;">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add requester to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_52">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add requester to tokenValues for encoding" sap2010:WorkflowViewState.IdRef="AddToCollection`1_53">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR FromEif" sap2010:WorkflowViewState.IdRef="Sequence_70">
        <p:GetDynamicValueProperty x:TypeArguments="x:Boolean" DisplayName="Get FromEif " sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_20" PropertyName="d/results/(0)/TAR_FromEif">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Boolean">
              <mca:CSharpReference x:TypeArguments="x:Boolean">tarFromEif</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
      </Sequence>
      <If DisplayName="If TAR is from EIF" sap2010:WorkflowViewState.IdRef="If_38">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">tarFromEif</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence DisplayName="Get TAR Guest Traveller as Traveller" sap2010:WorkflowViewState.IdRef="Sequence_72">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="tarGuestTraveller" />
            </Sequence.Variables>
            <Sequence DisplayName="Get TAR Traveller LoginName for email" sap2010:WorkflowViewState.IdRef="Sequence_71">
              <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Traveller Id" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_21" PropertyName="d/results/(0)/TAR_TravellerId">
                <p:GetDynamicValueProperty.Result>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
                  </OutArgument>
                </p:GetDynamicValueProperty.Result>
                <p:GetDynamicValueProperty.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.Source>
              </p:GetDynamicValueProperty>
              <p1:LookupSPUser DisplayName="Lookup Traveller" sap2010:WorkflowViewState.IdRef="LookupSPUser_9">
                <p1:LookupSPUser.PrincipalId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPUser.PrincipalId>
                <p1:LookupSPUser.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                  </OutArgument>
                </p1:LookupSPUser.Result>
              </p1:LookupSPUser>
              <p:GetODataProperties DisplayName="Get Traveller Login Name" sap2010:WorkflowViewState.IdRef="GetODataProperties_21">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                    <mca:CSharpReference x:TypeArguments="x:String">travellerLoginName</mca:CSharpReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
            <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Guest Traveller name" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_22" PropertyName="d/results/(0)/TAR_GuestTraveller">
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">tarGuestTraveller</mca:CSharpReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_42" Item="{}{TRAVELLER}">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_43" Item="&amp;#123;TRAVELLER&amp;#125;">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_44">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">tarGuestTraveller</mca:CSharpValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues for encoding" sap2010:WorkflowViewState.IdRef="AddToCollection`1_45">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">tarGuestTraveller</mca:CSharpValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Get TAR Traveller as Traveller " sap2010:WorkflowViewState.IdRef="Sequence_76">
            <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Traveller Id" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_23" PropertyName="d/results/(0)/TAR_TravellerId">
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <p1:LookupSPUser DisplayName="Lookup Traveller" sap2010:WorkflowViewState.IdRef="LookupSPUser_10">
              <p1:LookupSPUser.PrincipalId>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                </InArgument>
              </p1:LookupSPUser.PrincipalId>
              <p1:LookupSPUser.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                </OutArgument>
              </p1:LookupSPUser.Result>
            </p1:LookupSPUser>
            <p:GetODataProperties DisplayName="Get Traveller Name" sap2010:WorkflowViewState.IdRef="GetODataProperties_22">
              <p:GetODataProperties.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                </InArgument>
              </p:GetODataProperties.Source>
              <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                <OutArgument x:TypeArguments="x:String" x:Key="Title">
                  <mca:CSharpReference x:TypeArguments="x:String">tokenValue</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                  <mca:CSharpReference x:TypeArguments="x:String">travellerLoginName</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="Email">
                  <mca:CSharpReference x:TypeArguments="x:String">emailAddress</mca:CSharpReference>
                </OutArgument>
              </scg:Dictionary>
            </p:GetODataProperties>
            <If DisplayName="If Email is empty" sap2010:WorkflowViewState.IdRef="If_36">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(emailAddress)</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_73">
                  <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_41">
                    <p1:WriteToHistory.Message>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address", travellerLoginName);</mca:CSharpValue>
                      </InArgument>
                    </p1:WriteToHistory.Message>
                  </p1:WriteToHistory>
                  <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_19">
                    <TerminateWorkflow.Reason>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address", travellerLoginName);</mca:CSharpValue>
                      </InArgument>
                    </TerminateWorkflow.Reason>
                  </TerminateWorkflow>
                </Sequence>
              </If.Then>
            </If>
            <If DisplayName="If Traveller Name is empty" sap2010:WorkflowViewState.IdRef="If_37">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(tokenValue)</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_74">
                  <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_42" Message="Invalid traveller name." />
                  <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_20" Reason="Invalid input data." />
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_75">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Name="dict" />
                  </Sequence.Variables>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_46" Item="{}{TRAVELLER}">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_47" Item="&amp;#123;TRAVELLER&amp;#125;">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_48">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues for encoding" sap2010:WorkflowViewState.IdRef="AddToCollection`1_49">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </If.Else>
      </If>
      <Sequence DisplayName="Get TAR Budget Approver " sap2010:WorkflowViewState.IdRef="Sequence_4">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Budget Approver Id" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_2" PropertyName="d/results/(0)/TAR_BudgetApproverId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <p1:LookupSPUser DisplayName="Lookup Budget Approver" sap2010:WorkflowViewState.IdRef="LookupSPUser_3">
          <p1:LookupSPUser.PrincipalId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
            </InArgument>
          </p1:LookupSPUser.PrincipalId>
          <p1:LookupSPUser.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPUser.Result>
        </p1:LookupSPUser>
        <p:GetODataProperties DisplayName="Get Budget Approver Name" sap2010:WorkflowViewState.IdRef="GetODataProperties_4">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="Title">
              <mca:CSharpReference x:TypeArguments="x:String">budgetApproverName</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
              <mca:CSharpReference x:TypeArguments="x:String">budgetApproverLoginName</mca:CSharpReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Email">
              <mca:CSharpReference x:TypeArguments="x:String">emailAddress</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If Email is empty" sap2010:WorkflowViewState.IdRef="If_11">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(emailAddress)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_26">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_30">
                <p1:WriteToHistory.Message>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address", budgetApproverLoginName);</mca:CSharpValue>
                  </InArgument>
                </p1:WriteToHistory.Message>
              </p1:WriteToHistory>
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_10">
                <TerminateWorkflow.Reason>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address", budgetApproverLoginName);</mca:CSharpValue>
                  </InArgument>
                </TerminateWorkflow.Reason>
              </TerminateWorkflow>
            </Sequence>
          </If.Then>
        </If>
        <If DisplayName="If Budget Approver Name is empty" sap2010:WorkflowViewState.IdRef="If_3">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(budgetApproverName)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_10">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_14" Message="Invalid budget approver name." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_3" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_31">
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {BUDGET_APPROVER} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_5" Item="{}{BUDGET_APPROVER}">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {BUDGET_APPROVER} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_6" Item="&amp;#123;BUDGET_APPROVER&amp;#125;">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add budget approver to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_7">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">budgetApproverName</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add budget approver to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_8">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">budgetApproverName</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Travel Coordinator" sap2010:WorkflowViewState.IdRef="Sequence_51">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Travel Coordinator Id" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_16" PropertyName="d/results/(0)/TAR_TravelCoordinatorId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <If DisplayName="If travel coordinator has been selected" sap2010:WorkflowViewState.IdRef="If_21">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_52">
              <p1:LookupSPUser sap2010:WorkflowViewState.IdRef="LookupSPUser_5">
                <p1:LookupSPUser.PrincipalId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPUser.PrincipalId>
                <p1:LookupSPUser.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                  </OutArgument>
                </p1:LookupSPUser.Result>
              </p1:LookupSPUser>
              <p:GetODataProperties DisplayName="Get Travel Coordinator login name" sap2010:WorkflowViewState.IdRef="GetODataProperties_14">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                    <mca:CSharpReference x:TypeArguments="x:String">travelCoordinatorLoginName</mca:CSharpReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <Assign DisplayName="Set Travel Coordinator to empty string" sap2010:WorkflowViewState.IdRef="Assign_47">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">travelCoordinatorLoginName</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Empty;</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Additional Staff Member" sap2010:WorkflowViewState.IdRef="Sequence_55">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Additional Staff Member Id" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_18" PropertyName="d/results/(0)/TAR_AdditionalStaffMemberId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <If DisplayName="If there is a Staff Member added" sap2010:WorkflowViewState.IdRef="If_23">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_54">
              <p1:LookupSPUser DisplayName="Lookup Additional Staff Member" sap2010:WorkflowViewState.IdRef="LookupSPUser_7">
                <p1:LookupSPUser.PrincipalId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPUser.PrincipalId>
                <p1:LookupSPUser.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                  </OutArgument>
                </p1:LookupSPUser.Result>
              </p1:LookupSPUser>
              <p:GetODataProperties DisplayName="Get Additional Staff Member Login Name" sap2010:WorkflowViewState.IdRef="GetODataProperties_16">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                    <mca:CSharpReference x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <Assign DisplayName="Set staff member login name to empty" sap2010:WorkflowViewState.IdRef="Assign_49">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Empty</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR ID" sap2010:WorkflowViewState.IdRef="Sequence_5">
        <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get TAR ID" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_3" PropertyName="d/results/(0)/Title">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:String">
              <mca:CSharpReference x:TypeArguments="x:String">tokenValue</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <Assign DisplayName="Store TAR ID" sap2010:WorkflowViewState.IdRef="Assign_34">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">
              <mca:CSharpReference x:TypeArguments="x:String">tarId</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <If DisplayName="If TAR ID is empty" sap2010:WorkflowViewState.IdRef="If_5">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(tokenValue)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_12">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_17" Message="Invalid TAR ID." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_5" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_20">
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TAR_ID} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_9" Item="{}{TAR_ID}">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TAR_ID} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_10" Item="&amp;#123;TAR_ID&amp;#125;">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_LINK encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_13" Item="http&amp;#58;//tar_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_LINK to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_38" Item="http://tar_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_APPROVAL_LINK encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_14" Item="http&amp;#58;//tar_approval_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_APPROVAL_LINK to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_39" Item="http://tar_approval_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR ID to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_11">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">tarId</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR ID for encoded to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_12">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">tarId</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR LINK for encoded to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_15">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}{1}#/details/tar-details/{2}", webUrl, appRelativeUrl, tokenValue);</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR LINK to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_40">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}{1}#/details/tar-details/{2}", webUrl, appRelativeUrl, tokenValue);</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR APPROVAL LINK for encoded to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_16">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}{1}#/approval/tar/{2}", webUrl, appRelativeUrl, tokenValue);</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR APPROVAL LINK to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_41">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}{1}#/approval/tar/{2}", webUrl, appRelativeUrl, tokenValue);</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Destinations" sap2010:WorkflowViewState.IdRef="Sequence_6">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:Int32" Name="destinationsCount" />
          <Variable x:TypeArguments="x:Int32" Name="index" />
        </Sequence.Variables>
        <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Destinations JSON" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_5" PropertyName="d/results/(0)/TAR_Destinations">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:String">
              <mca:CSharpReference x:TypeArguments="x:String">tokenValue</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <p:ParseDynamicValue DisplayName="Parse Destinations JSON" sap2010:WorkflowViewState.IdRef="ParseDynamicValue_1">
          <p:ParseDynamicValue.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
            </OutArgument>
          </p:ParseDynamicValue.Result>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
          </InArgument>
        </p:ParseDynamicValue>
        <p:CountDynamicValueItems DisplayName="Count Destinations DynamicValueItems" sap2010:WorkflowViewState.IdRef="CountDynamicValueItems_1">
          <p:CountDynamicValueItems.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">destinationsCount</mca:CSharpReference>
            </OutArgument>
          </p:CountDynamicValueItems.Result>
          <InArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
          </InArgument>
        </p:CountDynamicValueItems>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build countryDirectorsLoginNames collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_13">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">countryDirectorsLoginNames</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">countryDirectorsLoginNames</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build restrictedTravelCountries" sap2010:WorkflowViewState.IdRef="BuildCollection`1_16">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">restrictedTravelCountries</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">restrictedTravelCountries</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <If DisplayName="If destinationsCount == 0" sap2010:WorkflowViewState.IdRef="If_8">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">destinationsCount == 0</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_19">
              <p1:WriteToHistory DisplayName="Log error" sap2010:WorkflowViewState.IdRef="WriteToHistory_21" Message="No destinations introduced." />
              <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_7" Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <Assign DisplayName="Initialize index" sap2010:WorkflowViewState.IdRef="Assign_4">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">0</InArgument>
          </Assign.Value>
        </Assign>
        <While DisplayName="Iterate over destinations dynamicValue " sap2010:WorkflowViewState.IdRef="While_1">
          <While.Variables>
            <Variable x:TypeArguments="x:String" Name="destinationsQuery" />
            <Variable x:TypeArguments="x:String" Name="directorQuery" />
            <Variable x:TypeArguments="x:String" Name="travelRestrictionsQuery" />
          </While.Variables>
          <While.Condition>
            <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; destinationsCount</mca:CSharpValue>
          </While.Condition>
          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_18">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="currentCountry" />
            </Sequence.Variables>
            <Assign DisplayName="Create query statement for country name" sap2010:WorkflowViewState.IdRef="Assign_5">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">destinationsQuery</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/country/title", index);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Create query statement for country director" sap2010:WorkflowViewState.IdRef="Assign_48">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">directorQuery</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/country/director/Id", index);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Create query statement for country travel restrictions" sap2010:WorkflowViewState.IdRef="Assign_51">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">travelRestrictionsQuery</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/country/travelRestrictions", index);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get destination from JSON" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_8">
              <p:GetDynamicValueProperty.PropertyName>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">destinationsQuery</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.PropertyName>
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">currentCountry</mca:CSharpReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <If DisplayName="If destinations is empty" sap2010:WorkflowViewState.IdRef="If_7">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(destinations)</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_8">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">destinations</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">currentCountry</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <Assign DisplayName="Add new destination" sap2010:WorkflowViewState.IdRef="Assign_6">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">destinations</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}, {1}", destinations, currentCountry);</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Else>
            </If>
            <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Country Director Id from JSON" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_17">
              <p:GetDynamicValueProperty.PropertyName>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">directorQuery</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.PropertyName>
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <If DisplayName="If there is a valid country director" sap2010:WorkflowViewState.IdRef="If_22">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence DisplayName="Lookup and Add CD" sap2010:WorkflowViewState.IdRef="Sequence_53">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="p:DynamicValue" Name="userDetails" />
                    <Variable x:TypeArguments="x:String" Name="userLoginName" />
                  </Sequence.Variables>
                  <p1:LookupSPUser DisplayName="Lookup Country Director" sap2010:WorkflowViewState.IdRef="LookupSPUser_6">
                    <p1:LookupSPUser.PrincipalId>
                      <InArgument x:TypeArguments="x:Int32">
                        <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                      </InArgument>
                    </p1:LookupSPUser.PrincipalId>
                    <p1:LookupSPUser.Result>
                      <OutArgument x:TypeArguments="p:DynamicValue">
                        <mca:CSharpReference x:TypeArguments="p:DynamicValue">userDetails</mca:CSharpReference>
                      </OutArgument>
                    </p1:LookupSPUser.Result>
                  </p1:LookupSPUser>
                  <p:GetODataProperties DisplayName="Get Country Director Login Name" sap2010:WorkflowViewState.IdRef="GetODataProperties_15">
                    <p:GetODataProperties.Source>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <mca:CSharpValue x:TypeArguments="p:DynamicValue">userDetails</mca:CSharpValue>
                      </InArgument>
                    </p:GetODataProperties.Source>
                    <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                      <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                        <mca:CSharpReference x:TypeArguments="x:String">userLoginName</mca:CSharpReference>
                      </OutArgument>
                    </scg:Dictionary>
                  </p:GetODataProperties>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add CD Login Name to collection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_27">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">userLoginName</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">countryDirectorsLoginNames</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                </Sequence>
              </If.Then>
            </If>
            <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get destination from JSON" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_19">
              <p:GetDynamicValueProperty.PropertyName>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">travelRestrictionsQuery</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.PropertyName>
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">tokenValue</mca:CSharpReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <If DisplayName="If the destination is a restricted travel country" sap2010:WorkflowViewState.IdRef="If_28">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValue.Equals("true")</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add destination to restricted travel countries" sap2010:WorkflowViewState.IdRef="AddToCollection`1_33">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">currentCountry</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">restrictedTravelCountries</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </If.Then>
            </If>
            <Assign DisplayName="Increase index" sap2010:WorkflowViewState.IdRef="Assign_7">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">index + 1</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </While>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DESTINATIONS} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_17" Item="{}{DESTINATIONS}">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DESTINATIONS} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_18" Item="&amp;#123;DESTINATIONS&amp;#125;">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add destinations to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_19">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">destinations</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add destinations to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_20">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">destinations</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
      </Sequence>
      <Sequence DisplayName="Get TAR Relevant Security Directors" sap2010:WorkflowViewState.IdRef="Sequence_63">
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build securityDirectorsLoginNames" sap2010:WorkflowViewState.IdRef="BuildCollection`1_17">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">securityDirectorsLoginNames</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">securityDirectorsLoginNames</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <ForEach x:TypeArguments="x:String" DisplayName="ForEach restricted travel country" sap2010:WorkflowViewState.IdRef="ForEach`1_2">
          <ForEach.Values>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">restrictedTravelCountries</mca:CSharpValue>
            </InArgument>
          </ForEach.Values>
          <ActivityAction x:TypeArguments="x:String">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="x:String" Name="country" />
            </ActivityAction.Argument>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_62">
              <p1:LookupSPListItemId DisplayName="Lookup country ID" sap2010:WorkflowViewState.IdRef="LookupSPListItemId_6">
                <p1:LookupSPListItemId.ListId>
                  <InArgument x:TypeArguments="s:Guid">
                    <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/Countries;}")</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItemId.ListId>
                <p1:LookupSPListItemId.PropertyName>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">"Title"</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItemId.PropertyName>
                <p1:LookupSPListItemId.PropertyValue>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">country</mca:CSharpValue>
                  </InArgument>
                </p1:LookupSPListItemId.PropertyValue>
                <p1:LookupSPListItemId.Result>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
                  </OutArgument>
                </p1:LookupSPListItemId.Result>
              </p1:LookupSPListItemId>
              <If DisplayName="If country exists" sap2010:WorkflowViewState.IdRef="If_29">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_61">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Int32" Name="countryRegion" />
                      <Variable x:TypeArguments="x:Int32" Name="securityDirector" />
                      <Variable x:TypeArguments="x:String" Name="securityDirectorLoginName" />
                    </Sequence.Variables>
                    <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Country " sap2010:WorkflowViewState.IdRef="LookupSPListItem_9">
                      <p1:LookupSPListItem.ItemId>
                        <InArgument x:TypeArguments="x:Int32">
                          <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                        </InArgument>
                      </p1:LookupSPListItem.ItemId>
                      <p1:LookupSPListItem.ListId>
                        <InArgument x:TypeArguments="s:Guid">
                          <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/Countries;}")</mca:CSharpValue>
                        </InArgument>
                      </p1:LookupSPListItem.ListId>
                      <p1:LookupSPListItem.Result>
                        <OutArgument x:TypeArguments="p:DynamicValue">
                          <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                        </OutArgument>
                      </p1:LookupSPListItem.Result>
                    </p1:LookupSPListItem>
                    <p:GetODataProperties DisplayName="Get Country Region" sap2010:WorkflowViewState.IdRef="GetODataProperties_17">
                      <p:GetODataProperties.Source>
                        <InArgument x:TypeArguments="p:DynamicValue">
                          <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                        </InArgument>
                      </p:GetODataProperties.Source>
                      <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                        <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_RegionLookupId">
                          <mca:CSharpReference x:TypeArguments="x:Int32">countryRegion</mca:CSharpReference>
                        </OutArgument>
                      </scg:Dictionary>
                    </p:GetODataProperties>
                    <If DisplayName="If Country has a Region associated" sap2010:WorkflowViewState.IdRef="If_31">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">countryRegion &gt; 0</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Get Security Director Account" sap2010:WorkflowViewState.IdRef="Sequence_66">
                          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Country Region" sap2010:WorkflowViewState.IdRef="LookupSPListItem_10">
                            <p1:LookupSPListItem.ItemId>
                              <InArgument x:TypeArguments="x:Int32">
                                <mca:CSharpValue x:TypeArguments="x:Int32">countryRegion</mca:CSharpValue>
                              </InArgument>
                            </p1:LookupSPListItem.ItemId>
                            <p1:LookupSPListItem.ListId>
                              <InArgument x:TypeArguments="s:Guid">
                                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/Regions;}")</mca:CSharpValue>
                              </InArgument>
                            </p1:LookupSPListItem.ListId>
                            <p1:LookupSPListItem.Result>
                              <OutArgument x:TypeArguments="p:DynamicValue">
                                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                              </OutArgument>
                            </p1:LookupSPListItem.Result>
                          </p1:LookupSPListItem>
                          <p:GetODataProperties DisplayName="Get Region Security Director ID" sap2010:WorkflowViewState.IdRef="GetODataProperties_18">
                            <p:GetODataProperties.Source>
                              <InArgument x:TypeArguments="p:DynamicValue">
                                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                              </InArgument>
                            </p:GetODataProperties.Source>
                            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                              <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_SecurityDirectorAccountId">
                                <mca:CSharpReference x:TypeArguments="x:Int32">securityDirector</mca:CSharpReference>
                              </OutArgument>
                            </scg:Dictionary>
                          </p:GetODataProperties>
                          <If DisplayName="If Region has Security Director" sap2010:WorkflowViewState.IdRef="If_30">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">securityDirector &gt; 0</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_65">
                                <p1:LookupSPUser DisplayName="Lookup Security Director" sap2010:WorkflowViewState.IdRef="LookupSPUser_8">
                                  <p1:LookupSPUser.PrincipalId>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpValue x:TypeArguments="x:Int32">securityDirector</mca:CSharpValue>
                                    </InArgument>
                                  </p1:LookupSPUser.PrincipalId>
                                  <p1:LookupSPUser.Result>
                                    <OutArgument x:TypeArguments="p:DynamicValue">
                                      <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                                    </OutArgument>
                                  </p1:LookupSPUser.Result>
                                </p1:LookupSPUser>
                                <p:GetODataProperties DisplayName="Get Security director login name" sap2010:WorkflowViewState.IdRef="GetODataProperties_19">
                                  <p:GetODataProperties.Source>
                                    <InArgument x:TypeArguments="p:DynamicValue">
                                      <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                                    </InArgument>
                                  </p:GetODataProperties.Source>
                                  <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                    <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                                      <mca:CSharpReference x:TypeArguments="x:String">securityDirectorLoginName</mca:CSharpReference>
                                    </OutArgument>
                                  </scg:Dictionary>
                                </p:GetODataProperties>
                                <AddToCollection x:TypeArguments="x:String" DisplayName="Add security director to securityDirectorsLoginNames" sap2010:WorkflowViewState.IdRef="AddToCollection`1_34">
                                  <AddToCollection.Item>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">securityDirectorLoginName</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection.Item>
                                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">securityDirectorsLoginNames</mca:CSharpValue>
                                  </InArgument>
                                </AddToCollection>
                              </Sequence>
                            </If.Then>
                          </If>
                        </Sequence>
                      </If.Then>
                    </If>
                  </Sequence>
                </If.Then>
              </If>
            </Sequence>
          </ActivityAction>
        </ForEach>
      </Sequence>
      <Sequence DisplayName="Get TAR Departure Date" sap2010:WorkflowViewState.IdRef="Sequence_41">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:String" Name="departureDateString" />
        </Sequence.Variables>
        <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Departure Date" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_24" PropertyName="d/results/(0)/TAR_DepartureDateString">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:String">
              <mca:CSharpReference x:TypeArguments="x:String">departureDateString</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DEPARTURE_DATE} to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_21" Item="{}{DEPARTURE_DATE}">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DEPARTURE_DATE} encoded to tokenPlaceholders" sap2010:WorkflowViewState.IdRef="AddToCollection`1_22" Item="&amp;#123;DEPARTURE_DATE&amp;#125;">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add departure date to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_23">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">departureDateString</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add departure date to tokenValues" sap2010:WorkflowViewState.IdRef="AddToCollection`1_24">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">departureDateString</mca:CSharpValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
          </InArgument>
        </AddToCollection>
      </Sequence>
      <Sequence DisplayName="Get TAR Requires GSS Approval" sap2010:WorkflowViewState.IdRef="Sequence_34">
        <p:GetDynamicValueProperty x:TypeArguments="x:Boolean" DisplayName="Get Requires GSS Approval" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_10" PropertyName="d/results/(0)/TAR_RequiresGssApproval">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Boolean">
              <mca:CSharpReference x:TypeArguments="x:Boolean">requiresGssApproval</mca:CSharpReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
      </Sequence>
      <p1:GetTaskListId DisplayName="Get TAR Task List Id" sap2010:WorkflowViewState.IdRef="GetTaskListId_1">
        <p1:GetTaskListId.Result>
          <OutArgument x:TypeArguments="s:Guid">
            <mca:CSharpReference x:TypeArguments="s:Guid">tasksListGuid</mca:CSharpReference>
          </OutArgument>
        </p1:GetTaskListId.Result>
      </p1:GetTaskListId>
      <p:CountCollection x:TypeArguments="x:String" DisplayName="Count tokenPlaceholders" sap2010:WorkflowViewState.IdRef="CountCollection`1_1">
        <p:CountCollection.Collection>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
          </InArgument>
        </p:CountCollection.Collection>
        <p:CountCollection.Result>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">collectionSize</mca:CSharpReference>
          </OutArgument>
        </p:CountCollection.Result>
      </p:CountCollection>
      <While DisplayName="Iterate over tokenPlaceholders" sap2010:WorkflowViewState.IdRef="While_2">
        <While.Variables>
          <Variable x:TypeArguments="x:Int32" Default="0" Name="index" />
          <Variable x:TypeArguments="x:String" Name="placeholder" />
          <Variable x:TypeArguments="x:String" Name="placeholderReplacement" />
        </While.Variables>
        <While.Condition>
          <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; collectionSize</mca:CSharpValue>
        </While.Condition>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_46">
          <p:GetItemFromCollection x:TypeArguments="x:String" DisplayName="Get Item From tokenPlaceholders" sap2010:WorkflowViewState.IdRef="GetItemFromCollection`1_1">
            <p:GetItemFromCollection.Index>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">index</mca:CSharpValue>
              </InArgument>
            </p:GetItemFromCollection.Index>
            <p:GetItemFromCollection.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">placeholder</mca:CSharpReference>
              </OutArgument>
            </p:GetItemFromCollection.Result>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </p:GetItemFromCollection>
          <p:GetItemFromCollection x:TypeArguments="x:String" DisplayName="Get Item From tokenValues" sap2010:WorkflowViewState.IdRef="GetItemFromCollection`1_2">
            <p:GetItemFromCollection.Index>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">index</mca:CSharpValue>
              </InArgument>
            </p:GetItemFromCollection.Index>
            <p:GetItemFromCollection.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">placeholderReplacement</mca:CSharpReference>
              </OutArgument>
            </p:GetItemFromCollection.Result>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
            </InArgument>
          </p:GetItemFromCollection>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_35">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">emailContent</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">emailContent.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_40">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">emailSubject</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">emailSubject.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_37">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_41">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailSubject</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailSubject.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_38">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">gssEmailContent</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">gssEmailContent.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_42">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">gssEmailSubject</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">gssEmailSubject.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_39">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">approvedEmailContent</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">approvedEmailContent.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_43">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">approvedEmailSubject</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">approvedEmailSubject.Replace(placeholder, placeholderReplacement);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Increase index" sap2010:WorkflowViewState.IdRef="Assign_36">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">index + 1</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
    </Sequence>
    <Sequence DisplayName="Send Budget Approval Email" sap2010:WorkflowViewState.IdRef="Sequence_14">
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_2">
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpReference>
          </OutArgument>
        </p:BuildCollection.Result>
        <p:BuildCollection.Values>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">budgetApproverLoginName</mca:CSharpValue>
          </InArgument>
        </p:BuildCollection.Values>
      </p:BuildCollection>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email Cc Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_3">
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpReference>
          </OutArgument>
        </p:BuildCollection.Result>
        <p:BuildCollection.Values>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">travellerLoginName</mca:CSharpValue>
          </InArgument>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">requesterLoginName</mca:CSharpValue>
          </InArgument>
        </p:BuildCollection.Values>
      </p:BuildCollection>
      <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Submitted Email" sap2010:WorkflowViewState.IdRef="Email_1">
        <p1:Email.Body>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">emailContent</mca:CSharpValue>
          </InArgument>
        </p1:Email.Body>
        <p1:Email.CC>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpValue>
          </InArgument>
        </p1:Email.CC>
        <p1:Email.Subject>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">emailSubject</mca:CSharpValue>
          </InArgument>
        </p1:Email.Subject>
        <p1:Email.To>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpValue>
          </InArgument>
        </p1:Email.To>
      </p1:Email>
    </Sequence>
    <Sequence DisplayName="Provision Budget Task" sap2010:WorkflowViewState.IdRef="Sequence_13">
      <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update Budget Approval Status" sap2010:WorkflowViewState.IdRef="UpdateListItem_5">
        <p1:UpdateListItem.ItemId>
          <InArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerValue x:TypeArguments="x:Int32">
              <p1:GetCurrentItemId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:UpdateListItem.ItemId>
        <p1:UpdateListItem.ListId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentListId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:UpdateListItem.ListId>
        <p1:UpdateListItem.ListItemPropertiesDynamicValue>
          <InArgument x:TypeArguments="p:DynamicValue">
            <p:SetDynamicValueProperties>
              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalStatus">Pending</InArgument>
              </scg:Dictionary>
            </p:SetDynamicValueProperties>
          </InArgument>
        </p1:UpdateListItem.ListItemPropertiesDynamicValue>
      </p1:UpdateListItem>
      <p1:SingleTask Body="{x:Null}" DueDate="{x:Null}" TaskId="{x:Null}" AssignmentEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have a new task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" AssignmentEmailSubject="Task Assigned" CancelationEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;One of your tasks was canceled and deleted. You do not need to take any further action on that task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" CancelationEmailSubject="Task Canceled" CompletedStatus="Completed" ContentTypeId="0x0108003365C4474CAE8C42BCE396314E88E51F" DefaultTaskOutcome="1" DisplayName="Create Budget Approval Task" sap2010:WorkflowViewState.IdRef="SingleTask_1" OutcomeFieldName="TaskOutcome" OverdueEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have an &lt;/span&gt;&lt;span style='font-size:13.5pt;color:#ff3b3b;'&gt;overdue&lt;/span&gt;&lt;span style='font-size:13.5pt'&gt; task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" OverdueEmailSubject="Task Overdue" OverdueReminderRepeat="0" OverdueRepeatTimes="1" SendReminderEmail="False" WaitForTaskCompletion="True">
        <p1:SingleTask.AssignedTo>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">budgetApproverLoginName</mca:CSharpValue>
          </InArgument>
        </p1:SingleTask.AssignedTo>
        <p1:SingleTask.Outcome>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">taskBudgetApprovalOutcome</mca:CSharpReference>
          </OutArgument>
        </p1:SingleTask.Outcome>
        <p1:SingleTask.RelatedContentLinkListId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentListId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.RelatedContentLinkListId>
        <p1:SingleTask.RelatedContentLinkListItemId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentItemGuid />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.RelatedContentLinkListItemId>
        <p1:SingleTask.RelatedContentLinkListItemIntegerId>
          <InArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerValue x:TypeArguments="x:Int32">
              <p1:GetCurrentItemId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.RelatedContentLinkListItemIntegerId>
        <p1:SingleTask.TaskItemId>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">taskBudgetApprovalId</mca:CSharpReference>
          </OutArgument>
        </p1:SingleTask.TaskItemId>
        <p1:SingleTask.Title>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">string.Format("Budget Approval Workflow task - {0}", tarId);</mca:CSharpValue>
          </InArgument>
        </p1:SingleTask.Title>
      </p1:SingleTask>
    </Sequence>
    <Sequence DisplayName="Approve/Reject Budget" sap2010:WorkflowViewState.IdRef="Sequence_15">
      <If DisplayName="If Budget Approval Task has been rejected" sap2010:WorkflowViewState.IdRef="If_12">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">taskBudgetApprovalOutcome != 0</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_27">
            <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Get Approval Task" sap2010:WorkflowViewState.IdRef="LookupSPListItem_4">
              <p1:LookupSPListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">taskBudgetApprovalId</mca:CSharpValue>
                </InArgument>
              </p1:LookupSPListItem.ItemId>
              <p1:LookupSPListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <mca:CSharpValue x:TypeArguments="s:Guid">tasksListGuid</mca:CSharpValue>
                </InArgument>
              </p1:LookupSPListItem.ListId>
              <p1:LookupSPListItem.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                </OutArgument>
              </p1:LookupSPListItem.Result>
            </p1:LookupSPListItem>
            <p:GetODataProperties DisplayName="Get Task Description" sap2010:WorkflowViewState.IdRef="GetODataProperties_8">
              <p:GetODataProperties.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                </InArgument>
              </p:GetODataProperties.Source>
              <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                <OutArgument x:TypeArguments="x:String" x:Key="Body">
                  <mca:CSharpReference x:TypeArguments="x:String">taskDescription</mca:CSharpReference>
                </OutArgument>
              </scg:Dictionary>
            </p:GetODataProperties>
            <Assign DisplayName="Replace {REJECTOR}  in Rejected Email" sap2010:WorkflowViewState.IdRef="Assign_50">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent.Replace("&amp;#123;REJECTOR&amp;#125;", budgetApproverName).Replace("{REJECTOR}", budgetApproverName);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Replace {REJECTOR_COMMENTS} in Rejected Email Template" sap2010:WorkflowViewState.IdRef="Assign_22">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent.Replace("&amp;#123;REJECTOR_COMMENTS&amp;#125;", taskDescription).Replace("{REJECTOR_COMMENTS}", taskDescription);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_2">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">toRecipients</mca:CSharpValue>
              </InArgument>
            </ClearCollection>
            <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_4">
              <p:BuildCollection.Result>
                <OutArgument x:TypeArguments="sco:Collection(x:String)">
                  <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpReference>
                </OutArgument>
              </p:BuildCollection.Result>
              <p:BuildCollection.Values>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">travellerLoginName</mca:CSharpValue>
                </InArgument>
              </p:BuildCollection.Values>
            </p:BuildCollection>
            <Sequence DisplayName="Build Email Cc Collection" sap2010:WorkflowViewState.IdRef="Sequence_59">
              <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_3">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                </InArgument>
              </ClearCollection>
              <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize Email Cc Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_15">
                <p:BuildCollection.Collection>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">ccRecipients</mca:CSharpValue>
                  </InArgument>
                </p:BuildCollection.Collection>
                <p:BuildCollection.Result>
                  <OutArgument x:TypeArguments="sco:Collection(x:String)">
                    <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpReference>
                  </OutArgument>
                </p:BuildCollection.Result>
                <p:BuildCollection.Values>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">requesterLoginName</mca:CSharpValue>
                  </InArgument>
                </p:BuildCollection.Values>
              </p:BuildCollection>
              <If DisplayName="If travelCoordinatorLoginName is not empty" sap2010:WorkflowViewState.IdRef="If_26">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(travelCoordinatorLoginName)</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add travel coordinator login name to toCollection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_31">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">travelCoordinatorLoginName</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                </If.Then>
              </If>
              <If DisplayName="If additionalStaffMemberLoginName is not empty" sap2010:WorkflowViewState.IdRef="If_27">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(additionalStaffMemberLoginName)</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_32">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                </If.Then>
              </If>
            </Sequence>
            <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Rejected Email" sap2010:WorkflowViewState.IdRef="Email_2">
              <p1:Email.Body>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpValue>
                </InArgument>
              </p1:Email.Body>
              <p1:Email.CC>
                <InArgument x:TypeArguments="sco:Collection(x:String)">
                  <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpValue>
                </InArgument>
              </p1:Email.CC>
              <p1:Email.Subject>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailSubject</mca:CSharpValue>
                </InArgument>
              </p1:Email.Subject>
              <p1:Email.To>
                <InArgument x:TypeArguments="sco:Collection(x:String)">
                  <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpValue>
                </InArgument>
              </p1:Email.To>
            </p1:Email>
            <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update current TAR with Budget Approval Status &amp; Timestamp" sap2010:WorkflowViewState.IdRef="UpdateListItem_1">
              <p1:UpdateListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ItemId>
              <p1:UpdateListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ListId>
              <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:SetDynamicValueProperties>
                    <scg:Dictionary x:TypeArguments="x:String, InArgument">
                      <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalStatus">Rejected</InArgument>
                      <InArgument x:TypeArguments="s:DateTime" x:Key="TAR_BudgetApprovalTimestamp">
                        <mca:CSharpValue x:TypeArguments="s:DateTime">DateTime.UtcNow</mca:CSharpValue>
                      </InArgument>
                    </scg:Dictionary>
                  </p:SetDynamicValueProperties>
                </InArgument>
              </p1:UpdateListItem.ListItemPropertiesDynamicValue>
            </p1:UpdateListItem>
            <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_13" Reason="Budget Approver has rejected the TAR." />
          </Sequence>
        </If.Then>
      </If>
    </Sequence>
    <If DisplayName="If TAR requires GSS approval" sap2010:WorkflowViewState.IdRef="If_15">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">requiresGssApproval</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence DisplayName="Requires GSS Approval Sequence" sap2010:WorkflowViewState.IdRef="Sequence_35">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="gssApprovalGroupId" />
          </Sequence.Variables>
          <Sequence DisplayName="Build Email To Collection" sap2010:WorkflowViewState.IdRef="Sequence_47">
            <Sequence.Variables>
              <Variable x:TypeArguments="p:DynamicValue" Name="properties" />
              <Variable x:TypeArguments="x:Int32" Name="membersCount" />
              <Variable x:TypeArguments="x:Int32" Name="index" />
            </Sequence.Variables>
            <p1:LookupSPPrincipalId AddToUserInfoList="{x:Null}" DisplayName="Get GSS Approvers Group Id" sap2010:WorkflowViewState.IdRef="LookupSPPrincipalId_2" UserName="GSS Approvers">
              <p1:LookupSPPrincipalId.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">gssApprovalGroupId</mca:CSharpReference>
                </OutArgument>
              </p1:LookupSPPrincipalId.Result>
            </p1:LookupSPPrincipalId>
            <p1:LookupSPGroupMembers DisplayName="Lookup GSS Approvers members" sap2010:WorkflowViewState.IdRef="LookupSPGroupMembers_1">
              <p1:LookupSPGroupMembers.GroupPrincipalId>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">gssApprovalGroupId</mca:CSharpValue>
                </InArgument>
              </p1:LookupSPGroupMembers.GroupPrincipalId>
              <p1:LookupSPGroupMembers.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                </OutArgument>
              </p1:LookupSPGroupMembers.Result>
            </p1:LookupSPGroupMembers>
            <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get GSS Members" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_12" PropertyName="d/results">
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpReference x:TypeArguments="p:DynamicValue">properties</mca:CSharpReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <p:CountDynamicValueItems DisplayName="Count GSS Members" sap2010:WorkflowViewState.IdRef="CountDynamicValueItems_2">
              <p:CountDynamicValueItems.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">membersCount</mca:CSharpReference>
                </OutArgument>
              </p:CountDynamicValueItems.Result>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">properties</mca:CSharpValue>
              </InArgument>
            </p:CountDynamicValueItems>
            <Assign DisplayName="Initialize index" sap2010:WorkflowViewState.IdRef="Assign_44">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">0;</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_4">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">toRecipients</mca:CSharpValue>
              </InArgument>
            </ClearCollection>
            <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_5">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
              </InArgument>
            </ClearCollection>
            <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_10">
              <p:BuildCollection.Result>
                <OutArgument x:TypeArguments="sco:Collection(x:String)">
                  <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpReference>
                </OutArgument>
              </p:BuildCollection.Result>
            </p:BuildCollection>
            <While DisplayName="Iterate over GSS group members" sap2010:WorkflowViewState.IdRef="While_3">
              <While.Condition>
                <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; membersCount</mca:CSharpValue>
              </While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_49">
                <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Member LoginName" sap2010:WorkflowViewState.IdRef="GetDynamicValueProperty`1_14">
                  <p:GetDynamicValueProperty.PropertyName>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("d/results({0})/LoginName", index);</mca:CSharpValue>
                    </InArgument>
                  </p:GetDynamicValueProperty.PropertyName>
                  <p:GetDynamicValueProperty.Result>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">tokenValue</mca:CSharpReference>
                    </OutArgument>
                  </p:GetDynamicValueProperty.Result>
                  <p:GetDynamicValueProperty.Source>
                    <InArgument x:TypeArguments="p:DynamicValue">
                      <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                    </InArgument>
                  </p:GetDynamicValueProperty.Source>
                </p:GetDynamicValueProperty>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add member login name to ccRecipients" sap2010:WorkflowViewState.IdRef="AddToCollection`1_26">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">tokenValue</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">toRecipients</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <Assign DisplayName="Increment index" sap2010:WorkflowViewState.IdRef="Assign_46">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">
                      <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">index + 1;</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </While>
          </Sequence>
          <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}" DisplayName="Send GSS Approval Email" sap2010:WorkflowViewState.IdRef="Email_5">
            <p1:Email.Body>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">gssEmailContent</mca:CSharpValue>
              </InArgument>
            </p1:Email.Body>
            <p1:Email.Subject>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">gssEmailSubject</mca:CSharpValue>
              </InArgument>
            </p1:Email.Subject>
            <p1:Email.To>
              <InArgument x:TypeArguments="sco:Collection(x:String)">
                <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpValue>
              </InArgument>
            </p1:Email.To>
          </p1:Email>
          <Sequence DisplayName="Provision GSS Task" sap2010:WorkflowViewState.IdRef="Sequence_32">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="outcome_0" />
              <Variable x:TypeArguments="x:String" Name="gssApproversLoginName" />
            </Sequence.Variables>
            <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update GSS Approval Status" sap2010:WorkflowViewState.IdRef="UpdateListItem_6">
              <p1:UpdateListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ItemId>
              <p1:UpdateListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ListId>
              <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:SetDynamicValueProperties>
                    <scg:Dictionary x:TypeArguments="x:String, InArgument">
                      <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalStatus">Pending</InArgument>
                    </scg:Dictionary>
                  </p:SetDynamicValueProperties>
                </InArgument>
              </p1:UpdateListItem.ListItemPropertiesDynamicValue>
            </p1:UpdateListItem>
            <p1:SingleTask Body="{x:Null}" DueDate="{x:Null}" TaskId="{x:Null}" AssignmentEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have a new task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" AssignmentEmailSubject="Task Assigned" CancelationEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;One of your tasks was canceled and deleted. You do not need to take any further action on that task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" CancelationEmailSubject="Task Canceled" CompletedStatus="Completed" ContentTypeId="0x0108003365C4474CAE8C42BCE396314E88E51F" DefaultTaskOutcome="1" DisplayName="Create GSS Approval Task" sap2010:WorkflowViewState.IdRef="SingleTask_2" OutcomeFieldName="TaskOutcome" OverdueEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have an &lt;/span&gt;&lt;span style='font-size:13.5pt;color:#ff3b3b;'&gt;overdue&lt;/span&gt;&lt;span style='font-size:13.5pt'&gt; task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" OverdueEmailSubject="Task Overdue" OverdueReminderRepeat="0" OverdueRepeatTimes="1" SendReminderEmail="False" WaitForTaskCompletion="True">
              <p1:SingleTask.AssignedTo>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">gssApprovalGroupId.ToString()</mca:CSharpValue>
                </InArgument>
              </p1:SingleTask.AssignedTo>
              <p1:SingleTask.Outcome>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">taskGSSApprovalOutcome</mca:CSharpReference>
                </OutArgument>
              </p1:SingleTask.Outcome>
              <p1:SingleTask.RelatedContentLinkListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.RelatedContentLinkListId>
              <p1:SingleTask.RelatedContentLinkListItemId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentItemGuid />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.RelatedContentLinkListItemId>
              <p1:SingleTask.RelatedContentLinkListItemIntegerId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.RelatedContentLinkListItemIntegerId>
              <p1:SingleTask.TaskItemId>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">taskGSSApprovalId</mca:CSharpReference>
                </OutArgument>
              </p1:SingleTask.TaskItemId>
              <p1:SingleTask.Title>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Format("GSS Approval Workflow Task - {0}", tarId);</mca:CSharpValue>
                </InArgument>
              </p1:SingleTask.Title>
            </p1:SingleTask>
          </Sequence>
          <Sequence DisplayName="Approve/Reject GSS" sap2010:WorkflowViewState.IdRef="Sequence_33">
            <If DisplayName="If GSS Approval Task has been rejected" sap2010:WorkflowViewState.IdRef="If_16">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">taskGSSApprovalOutcome != 0</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_36">
                  <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Get Approval Task" sap2010:WorkflowViewState.IdRef="LookupSPListItem_5">
                    <p1:LookupSPListItem.ItemId>
                      <InArgument x:TypeArguments="x:Int32">
                        <mca:CSharpValue x:TypeArguments="x:Int32">taskGSSApprovalId</mca:CSharpValue>
                      </InArgument>
                    </p1:LookupSPListItem.ItemId>
                    <p1:LookupSPListItem.ListId>
                      <InArgument x:TypeArguments="s:Guid">
                        <mca:CSharpValue x:TypeArguments="s:Guid">tasksListGuid</mca:CSharpValue>
                      </InArgument>
                    </p1:LookupSPListItem.ListId>
                    <p1:LookupSPListItem.Result>
                      <OutArgument x:TypeArguments="p:DynamicValue">
                        <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                      </OutArgument>
                    </p1:LookupSPListItem.Result>
                  </p1:LookupSPListItem>
                  <p:GetODataProperties DisplayName="Get Task Description" sap2010:WorkflowViewState.IdRef="GetODataProperties_10">
                    <p:GetODataProperties.Source>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                      </InArgument>
                    </p:GetODataProperties.Source>
                    <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                      <OutArgument x:TypeArguments="x:String" x:Key="Body">
                        <mca:CSharpReference x:TypeArguments="x:String">taskDescription</mca:CSharpReference>
                      </OutArgument>
                    </scg:Dictionary>
                  </p:GetODataProperties>
                  <Assign DisplayName="Replace {REJECTOR} in Rejected Email" sap2010:WorkflowViewState.IdRef="Assign_24">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent.Replace("&amp;#123;REJECTOR&amp;#125;", "Global Safety and Security").Replace("{REJECTOR}", "Global Safety and Security");</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Replace {REJECTOR_COMMENTS} in Email" sap2010:WorkflowViewState.IdRef="Assign_23">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent.Replace("&amp;#123;REJECTOR_COMMENTS&amp;#125;", taskDescription).Replace("{REJECTOR_COMMENTS}", taskDescription);</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_8">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">toRecipients</mca:CSharpValue>
                    </InArgument>
                  </ClearCollection>
                  <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_9">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                    </InArgument>
                  </ClearCollection>
                  <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_6">
                    <p:BuildCollection.Result>
                      <OutArgument x:TypeArguments="sco:Collection(x:String)">
                        <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpReference>
                      </OutArgument>
                    </p:BuildCollection.Result>
                    <p:BuildCollection.Values>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">travellerLoginName</mca:CSharpValue>
                      </InArgument>
                    </p:BuildCollection.Values>
                  </p:BuildCollection>
                  <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email Cc Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_7">
                    <p:BuildCollection.Result>
                      <OutArgument x:TypeArguments="sco:Collection(x:String)">
                        <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpReference>
                      </OutArgument>
                    </p:BuildCollection.Result>
                    <p:BuildCollection.Values>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">requesterLoginName</mca:CSharpValue>
                      </InArgument>
                    </p:BuildCollection.Values>
                  </p:BuildCollection>
                  <If DisplayName="If travelCoordinatorLoginName is not empty" sap2010:WorkflowViewState.IdRef="If_34">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(travelCoordinatorLoginName)</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <AddToCollection x:TypeArguments="x:String" DisplayName="Add travel coordinator login name to toCollection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_36">
                        <AddToCollection.Item>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">travelCoordinatorLoginName</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection.Item>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                        </InArgument>
                      </AddToCollection>
                    </If.Then>
                  </If>
                  <If DisplayName="If additionalStaffMemberLoginName is not empty" sap2010:WorkflowViewState.IdRef="If_35">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(additionalStaffMemberLoginName)</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_37">
                        <AddToCollection.Item>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection.Item>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                        </InArgument>
                      </AddToCollection>
                    </If.Then>
                  </If>
                  <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Rejected Email" sap2010:WorkflowViewState.IdRef="Email_3">
                    <p1:Email.Body>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailContent</mca:CSharpValue>
                      </InArgument>
                    </p1:Email.Body>
                    <p1:Email.CC>
                      <InArgument x:TypeArguments="sco:Collection(x:String)">
                        <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpValue>
                      </InArgument>
                    </p1:Email.CC>
                    <p1:Email.Subject>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">rejectedEmailSubject</mca:CSharpValue>
                      </InArgument>
                    </p1:Email.Subject>
                    <p1:Email.To>
                      <InArgument x:TypeArguments="sco:Collection(x:String)">
                        <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpValue>
                      </InArgument>
                    </p1:Email.To>
                  </p1:Email>
                  <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update current TAR with GSS Approval Status &amp; Timestamp" sap2010:WorkflowViewState.IdRef="UpdateListItem_3">
                    <p1:UpdateListItem.ItemId>
                      <InArgument x:TypeArguments="x:Int32">
                        <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                          <p1:GetCurrentItemId />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:UpdateListItem.ItemId>
                    <p1:UpdateListItem.ListId>
                      <InArgument x:TypeArguments="s:Guid">
                        <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                          <p1:GetCurrentListId />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:UpdateListItem.ListId>
                    <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <p:SetDynamicValueProperties>
                          <scg:Dictionary x:TypeArguments="x:String, InArgument">
                            <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalStatus">Rejected</InArgument>
                            <InArgument x:TypeArguments="s:DateTime" x:Key="TAR_GSSApprovalTimestamp">
                              <mca:CSharpValue x:TypeArguments="s:DateTime">DateTime.UtcNow</mca:CSharpValue>
                            </InArgument>
                          </scg:Dictionary>
                        </p:SetDynamicValueProperties>
                      </InArgument>
                    </p1:UpdateListItem.ListItemPropertiesDynamicValue>
                  </p1:UpdateListItem>
                  <TerminateWorkflow sap2010:WorkflowViewState.IdRef="TerminateWorkflow_14" Reason="GSS Approvers has rejected the TAR." />
                </Sequence>
              </If.Then>
            </If>
          </Sequence>
        </Sequence>
      </If.Then>
    </If>
    <Sequence DisplayName="Send TAR Approved Email" sap2010:WorkflowViewState.IdRef="Sequence_37">
      <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_6">
        <InArgument x:TypeArguments="scg:ICollection(x:String)">
          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">toRecipients</mca:CSharpValue>
        </InArgument>
      </ClearCollection>
      <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection" sap2010:WorkflowViewState.IdRef="ClearCollection`1_7">
        <InArgument x:TypeArguments="scg:ICollection(x:String)">
          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
        </InArgument>
      </ClearCollection>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_8">
        <p:BuildCollection.Collection>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">toRecipients</mca:CSharpValue>
          </InArgument>
        </p:BuildCollection.Collection>
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpReference>
          </OutArgument>
        </p:BuildCollection.Result>
        <p:BuildCollection.Values>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">travellerLoginName</mca:CSharpValue>
          </InArgument>
        </p:BuildCollection.Values>
      </p:BuildCollection>
      <Sequence DisplayName="Build Email Cc Collection" sap2010:WorkflowViewState.IdRef="Sequence_56">
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize Email Cc Collection" sap2010:WorkflowViewState.IdRef="BuildCollection`1_9">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">ccRecipients</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
          <p:BuildCollection.Values>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">requesterLoginName</mca:CSharpValue>
            </InArgument>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">diversityLoginName</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Values>
        </p:BuildCollection>
        <If DisplayName="If travelCoordinatorLoginName is not empty" sap2010:WorkflowViewState.IdRef="If_25">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(travelCoordinatorLoginName)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add travel coordinator login name to toCollection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_29">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">travelCoordinatorLoginName</mca:CSharpValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
          </If.Then>
        </If>
        <If DisplayName="If additionalStaffMemberLoginName is not empty" sap2010:WorkflowViewState.IdRef="If_24">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(additionalStaffMemberLoginName)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection" sap2010:WorkflowViewState.IdRef="AddToCollection`1_28">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
          </If.Then>
        </If>
        <Sequence DisplayName="Add Country Directors to Cc" sap2010:WorkflowViewState.IdRef="Sequence_57">
          <ForEach x:TypeArguments="x:String" DisplayName="For each country director login name" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
            <ForEach.Values>
              <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">countryDirectorsLoginNames</mca:CSharpValue>
              </InArgument>
            </ForEach.Values>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" Name="cdLoginName" />
              </ActivityAction.Argument>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add Country Director Login Name to Cc" sap2010:WorkflowViewState.IdRef="AddToCollection`1_30">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">cdLoginName</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </ActivityAction>
          </ForEach>
        </Sequence>
        <Sequence DisplayName="Add Security Directors to Cc" sap2010:WorkflowViewState.IdRef="Sequence_64">
          <ForEach x:TypeArguments="x:String" DisplayName="For each security director login name" sap2010:WorkflowViewState.IdRef="ForEach`1_3">
            <ForEach.Values>
              <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">securityDirectorsLoginNames</mca:CSharpValue>
              </InArgument>
            </ForEach.Values>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" Name="sdLoginName" />
              </ActivityAction.Argument>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add Security Director Login Name to Cc" sap2010:WorkflowViewState.IdRef="AddToCollection`1_35">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">sdLoginName</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccRecipients</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </ActivityAction>
          </ForEach>
        </Sequence>
      </Sequence>
      <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Approved Email" sap2010:WorkflowViewState.IdRef="Email_4">
        <p1:Email.Body>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">approvedEmailContent</mca:CSharpValue>
          </InArgument>
        </p1:Email.Body>
        <p1:Email.CC>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">ccRecipients</mca:CSharpValue>
          </InArgument>
        </p1:Email.CC>
        <p1:Email.Subject>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">approvedEmailSubject</mca:CSharpValue>
          </InArgument>
        </p1:Email.Subject>
        <p1:Email.To>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">toRecipients</mca:CSharpValue>
          </InArgument>
        </p1:Email.To>
      </p1:Email>
    </Sequence>
    <sads:DebugSymbol.Symbol></sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="WebUri_1" sap:VirtualizedContainerService.HintSize="486,68" />
      <sap2010:ViewStateData Id="BuildCollection`1_11" sap:VirtualizedContainerService.HintSize="222,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_12" sap:VirtualizedContainerService.HintSize="222,22" />
      <sap2010:ViewStateData Id="LookupSPListItemId_1" sap:VirtualizedContainerService.HintSize="247,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_16" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_4" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_11" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_1" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_5" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TAREmailTemplates</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_12" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItemId_4" sap:VirtualizedContainerService.HintSize="464,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_37" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_17" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_42" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_19" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_7" sap:VirtualizedContainerService.HintSize="464,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_12" sap:VirtualizedContainerService.HintSize="464,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TAREmailTemplates</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_38" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_18" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_43" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_20" sap:VirtualizedContainerService.HintSize="464,404">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_44" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItemId_2" sap:VirtualizedContainerService.HintSize="247,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_33" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_11" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_28" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_13" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_3" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_7" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TAREmailTemplates</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_34" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_12" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_30" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_14" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_29" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItemId_3" sap:VirtualizedContainerService.HintSize="247,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_35" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_15" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_39" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_17" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_6" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Email Templates" Value="Lists/TAREmailTemplates" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_11" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TAREmailTemplates</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_36" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_16" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_40" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_18" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_38" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItemId_5" sap:VirtualizedContainerService.HintSize="200,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Settings" Value="Lists/TARSettings" />
              <msdad:ViewStateNameValue x:Key="PropertyName" DisplayName="Title" Value="LinkTitle" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_8" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Settings" Value="Lists/TARSettings" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_13" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TARSettings</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_68" sap:VirtualizedContainerService.HintSize="269,345">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_39" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="If_32" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_50" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItemId_7" sap:VirtualizedContainerService.HintSize="200,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Settings" Value="Lists/TARSettings" />
              <msdad:ViewStateNameValue x:Key="PropertyName" DisplayName="Title" Value="LinkTitle" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_11" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="TAR Settings" Value="Lists/TARSettings" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_20" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TARSettings</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_69" sap:VirtualizedContainerService.HintSize="269,345">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_40" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="If_33" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_67" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_2" sap:VirtualizedContainerService.HintSize="200,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ItemId" DisplayName="(current item)" Value="$CurrentItemId" />
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="(current list)" Value="$CurrentListId" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="IsEmptyDynamicValue_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="WriteToHistory_18" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_6" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_16" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_6" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_17" sap:VirtualizedContainerService.HintSize="222,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_9" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="LookupSPUser_4" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_6" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_28" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_8" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_24" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_50" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_51" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_52" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_53" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_77" sap:VirtualizedContainerService.HintSize="222,332">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_9" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_23" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_20" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_70" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_21" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="LookupSPUser_9" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_21" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_71" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_22" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_42" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_43" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_44" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_45" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_72" sap:VirtualizedContainerService.HintSize="222,485">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_23" sap:VirtualizedContainerService.HintSize="469,22" />
      <sap2010:ViewStateData Id="LookupSPUser_10" sap:VirtualizedContainerService.HintSize="469,89" />
      <sap2010:ViewStateData Id="GetODataProperties_22" sap:VirtualizedContainerService.HintSize="469,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_41" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_19" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_73" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_36" sap:VirtualizedContainerService.HintSize="469,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_42" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_20" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_74" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_46" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_47" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_48" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_49" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_75" sap:VirtualizedContainerService.HintSize="222,332">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_37" sap:VirtualizedContainerService.HintSize="469,482">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_76" sap:VirtualizedContainerService.HintSize="491,1020">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_38" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_2" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="LookupSPUser_3" sap:VirtualizedContainerService.HintSize="464,89" />
      <sap2010:ViewStateData Id="GetODataProperties_4" sap:VirtualizedContainerService.HintSize="464,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_30" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_10" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_26" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_11" sap:VirtualizedContainerService.HintSize="464,404">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteToHistory_14" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_3" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_10" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_5" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_6" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_7" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_8" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_31" sap:VirtualizedContainerService.HintSize="222,332">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_16" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="LookupSPUser_5" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_14" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_52" sap:VirtualizedContainerService.HintSize="269,345">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_47" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_21" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_51" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_18" sap:VirtualizedContainerService.HintSize="536,22" />
      <sap2010:ViewStateData Id="LookupSPUser_7" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_16" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_54" sap:VirtualizedContainerService.HintSize="269,345">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_49" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_23" sap:VirtualizedContainerService.HintSize="536,495">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_55" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_3" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="Assign_34" sap:VirtualizedContainerService.HintSize="464,62" />
      <sap2010:ViewStateData Id="WriteToHistory_17" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_5" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_9" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_10" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_13" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_38" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_14" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_39" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_11" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_12" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_15" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_40" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_16" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_41" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_20" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_5" sap:VirtualizedContainerService.HintSize="464,404">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_5" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="ParseDynamicValue_1" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="CountDynamicValueItems_1" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_13" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_16" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="WriteToHistory_21" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="TerminateWorkflow_7" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_19" sap:VirtualizedContainerService.HintSize="222,254">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_8" sap:VirtualizedContainerService.HintSize="512,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="512,62" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_48" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_51" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_8" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_7" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_17" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="LookupSPUser_6" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_15" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_27" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="Sequence_53" sap:VirtualizedContainerService.HintSize="269,407">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_22" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_19" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_33" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_28" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Sequence_18" sap:VirtualizedContainerService.HintSize="264,951">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="512,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_17" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_18" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_19" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_20" sap:VirtualizedContainerService.HintSize="512,22" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="BuildCollection`1_17" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="LookupSPListItemId_6" sap:VirtualizedContainerService.HintSize="200,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="Countries" Value="Lists/Countries" />
              <msdad:ViewStateNameValue x:Key="PropertyName" DisplayName="Title" Value="Title" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_9" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="Countries" Value="Lists/Countries" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_17" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/Countries</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_10" sap:VirtualizedContainerService.HintSize="247,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="Regions" Value="Lists/Regions" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetODataProperties_18" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/Regions</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPUser_8" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_19" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">SharePoint_User</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_34" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="Sequence_65" sap:VirtualizedContainerService.HintSize="269,407">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_30" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_66" sap:VirtualizedContainerService.HintSize="269,436">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_31" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_61" sap:VirtualizedContainerService.HintSize="269,436">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_29" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_62" sap:VirtualizedContainerService.HintSize="222,283">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_2" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_63" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_24" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_21" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_22" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_23" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_24" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_41" sap:VirtualizedContainerService.HintSize="222,394">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_10" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_34" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetTaskListId_1" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="CountCollection`1_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="GetItemFromCollection`1_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="GetItemFromCollection`1_2" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_35" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_40" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_37" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_41" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_38" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_42" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_39" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_43" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_36" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Sequence_46" sap:VirtualizedContainerService.HintSize="264,1126">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_2" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="486,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="BuildCollection`1_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_3" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Email_1" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="Sequence_14" sap:VirtualizedContainerService.HintSize="486,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="UpdateListItem_5" sap:VirtualizedContainerService.HintSize="200,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ItemId" DisplayName="(current item)" Value="$CurrentItemId" />
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="(current list)" Value="$CurrentListId" />
            </scg:Dictionary>
            <x:String x:Key="ListItemPropertiesDynamicValue.SelectedEntityType"></x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SingleTask_1" sap:VirtualizedContainerService.HintSize="200,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="OverdueReminderRepeat" DisplayName="None" Value="0" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_13" sap:VirtualizedContainerService.HintSize="486,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_4" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_8" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">WorkflowTasks</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_50" sap:VirtualizedContainerService.HintSize="247,62" />
      <sap2010:ViewStateData Id="Assign_22" sap:VirtualizedContainerService.HintSize="247,62" />
      <sap2010:ViewStateData Id="ClearCollection`1_2" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_4" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="ClearCollection`1_3" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_15" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_31" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_26" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_32" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_27" sap:VirtualizedContainerService.HintSize="464,210">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_59" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Email_2" sap:VirtualizedContainerService.HintSize="247,68" />
      <sap2010:ViewStateData Id="UpdateListItem_1" sap:VirtualizedContainerService.HintSize="247,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ItemId" DisplayName="(current item)" Value="$CurrentItemId" />
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="(current list)" Value="$CurrentListId" />
            </scg:Dictionary>
            <x:String x:Key="ListItemPropertiesDynamicValue.SelectedEntityType"></x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TerminateWorkflow_13" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="Sequence_27" sap:VirtualizedContainerService.HintSize="269,1042">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_12" sap:VirtualizedContainerService.HintSize="464,1192">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_15" sap:VirtualizedContainerService.HintSize="486,1316">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPPrincipalId_2" sap:VirtualizedContainerService.HintSize="242,68" />
      <sap2010:ViewStateData Id="LookupSPGroupMembers_1" sap:VirtualizedContainerService.HintSize="242,68" />
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_12" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="CountDynamicValueItems_2" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_44" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="ClearCollection`1_4" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="ClearCollection`1_5" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_10" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="GetDynamicValueProperty`1_14" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_26" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_46" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Sequence_49" sap:VirtualizedContainerService.HintSize="264,310">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_3" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_47" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Email_5" sap:VirtualizedContainerService.HintSize="200,68" />
      <sap2010:ViewStateData Id="UpdateListItem_6" sap:VirtualizedContainerService.HintSize="200,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ItemId" DisplayName="(current item)" Value="$CurrentItemId" />
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="(current list)" Value="$CurrentListId" />
            </scg:Dictionary>
            <x:String x:Key="ListItemPropertiesDynamicValue.SelectedEntityType"></x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SingleTask_2" sap:VirtualizedContainerService.HintSize="200,89">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="DefaultTaskOutcome" DisplayName="Rejected" Value="1" />
              <msdad:ViewStateNameValue x:Key="OverdueReminderRepeat" DisplayName="None" Value="0" />
            </scg:Dictionary>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_32" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LookupSPListItem_5" sap:VirtualizedContainerService.HintSize="247,89" />
      <sap2010:ViewStateData Id="GetODataProperties_10" sap:VirtualizedContainerService.HintSize="247,92">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="Properties.SelectedEntityType">Lists/TARWorkflowTasks</x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_24" sap:VirtualizedContainerService.HintSize="247,62" />
      <sap2010:ViewStateData Id="Assign_23" sap:VirtualizedContainerService.HintSize="247,62" />
      <sap2010:ViewStateData Id="ClearCollection`1_8" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="ClearCollection`1_9" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_6" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_7" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_36" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_34" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_37" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_35" sap:VirtualizedContainerService.HintSize="247,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Email_3" sap:VirtualizedContainerService.HintSize="247,68" />
      <sap2010:ViewStateData Id="UpdateListItem_3" sap:VirtualizedContainerService.HintSize="247,68">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <scg:Dictionary x:TypeArguments="x:String, msdad:ViewStateNameValue" x:Key="SPLocalizedDisplayNames">
              <msdad:ViewStateNameValue x:Key="ItemId" DisplayName="(current item)" Value="$CurrentItemId" />
              <msdad:ViewStateNameValue x:Key="ListId" DisplayName="(current list)" Value="$CurrentListId" />
            </scg:Dictionary>
            <x:String x:Key="ListItemPropertiesDynamicValue.SelectedEntityType"></x:String>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TerminateWorkflow_14" sap:VirtualizedContainerService.HintSize="247,22" />
      <sap2010:ViewStateData Id="Sequence_36" sap:VirtualizedContainerService.HintSize="269,1257">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_16" sap:VirtualizedContainerService.HintSize="464,1407">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_33" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_35" sap:VirtualizedContainerService.HintSize="222,465">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_15" sap:VirtualizedContainerService.HintSize="486,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ClearCollection`1_6" sap:VirtualizedContainerService.HintSize="222,22" />
      <sap2010:ViewStateData Id="ClearCollection`1_7" sap:VirtualizedContainerService.HintSize="222,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_8" sap:VirtualizedContainerService.HintSize="222,22" />
      <sap2010:ViewStateData Id="BuildCollection`1_9" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddToCollection`1_29" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_25" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_28" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_24" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_30" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="287,210" />
      <sap2010:ViewStateData Id="Sequence_57" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddToCollection`1_35" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ForEach`1_3" sap:VirtualizedContainerService.HintSize="287,210" />
      <sap2010:ViewStateData Id="Sequence_64" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_56" sap:VirtualizedContainerService.HintSize="222,510">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Email_4" sap:VirtualizedContainerService.HintSize="222,68" />
      <sap2010:ViewStateData Id="Sequence_37" sap:VirtualizedContainerService.HintSize="486,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="508,2003">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SCI.TAR.Workflows.BudgetApprovalWorkflow.Workflow_1" sap:VirtualizedContainerService.HintSize="548,2083" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>