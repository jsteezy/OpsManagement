<?xml version="1.0" encoding="utf-8"?>
<stwe:Workflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.Design" xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:p1="wf://workflow.windows.net/$Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:stwe="clr-namespace:SCI.TAR.Workflows.EIFArchivingWorkflow;assembly=SCI.TAR.Workflows" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
      <x:String>Microsoft.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Workflow.Runtime</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.Client.ServerRuntime</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>SCI.TAR.Workflows</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <stwe:Workflow.Implementation>
    <Sequence DisplayName="Main Sequence">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="webUrl" />
        <Variable x:TypeArguments="s:DateTime" Name="dateThreshold" />
        <Variable x:TypeArguments="p:DynamicValue" Name="restResponse" />
        <Variable x:TypeArguments="x:Int32" Name="itemsCount" />
        <Variable x:TypeArguments="x:Int32" Name="index" />
      </Sequence.Variables>
      <p1:WebUri DisplayName="Get Web URL">
        <p1:WebUri.Result>
          <OutArgument x:TypeArguments="x:String">
            <mca:CSharpReference x:TypeArguments="x:String">webUrl</mca:CSharpReference>
          </OutArgument>
        </p1:WebUri.Result>
      </p1:WebUri>
      <Sequence DisplayName="Initialization">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:Int32" Name="daysThreshold" />
        </Sequence.Variables>
        <Sequence DisplayName="Get Threshold Days">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="itemId" />
            <Variable x:TypeArguments="p:DynamicValue" Name="dynamicValue" />
          </Sequence.Variables>
          <p1:LookupSPListItemId DisplayName="Lookup EIF Storage Days setting" PropertyValue="EIF_StorageDays">
            <p1:LookupSPListItemId.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.ListId>
            <p1:LookupSPListItemId.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">"Title"</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.PropertyName>
            <p1:LookupSPListItemId.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">itemId</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItemId.Result>
          </p1:LookupSPListItemId>
          <If DisplayName="If setting not found">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">itemId &lt; 1</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence DisplayName="Error">
                <p1:WriteToHistory Message="Cannot find EIF_StorageDays setting." />
                <TerminateWorkflow Reason="Cannot find EIF_StorageDays setting." />
              </Sequence>
            </If.Then>
          </If>
          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup item setting">
            <p1:LookupSPListItem.ItemId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">itemId</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ItemId>
            <p1:LookupSPListItem.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ListId>
            <p1:LookupSPListItem.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItem.Result>
          </p1:LookupSPListItem>
          <p:GetODataProperties DisplayName="GetDynamicValueProperties">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_SettingValue">
                <mca:CSharpReference x:TypeArguments="x:Int32">daysThreshold</mca:CSharpReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
        </Sequence>
        <Assign DisplayName="Negate daysThreshold">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">daysThreshold</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">0 - daysThreshold;</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <Assign DisplayName="Compute date threshold">
          <Assign.To>
            <OutArgument x:TypeArguments="s:DateTime">
              <mca:CSharpReference x:TypeArguments="s:DateTime">dateThreshold</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">DateTime.UtcNow.AddDays(daysThreshold);</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
      <p:HttpSend DisplayName="Call REST to get expired EIF Requests" Method="GET">
        <p:HttpSend.RequestHeaders>
          <InArgument x:TypeArguments="p:DynamicValue">
            <p:SetDynamicValueProperties>
              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json;odata=verbose</InArgument>
              </scg:Dictionary>
            </p:SetDynamicValueProperties>
          </InArgument>
        </p:HttpSend.RequestHeaders>
        <p:HttpSend.ResponseContent>
          <OutArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpReference x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpReference>
          </OutArgument>
        </p:HttpSend.ResponseContent>
        <p:HttpSend.Uri>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}/_api/Lists/getByTitle('EIF Requests')/items?$filter=Created lt datetime'{1}'", webUrl, dateThreshold.ToString("s"));</mca:CSharpValue>
          </InArgument>
        </p:HttpSend.Uri>
      </p:HttpSend>
      <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get d/results from REST response" PropertyName="d/results">
        <p:GetDynamicValueProperty.Result>
          <OutArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpReference x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpReference>
          </OutArgument>
        </p:GetDynamicValueProperty.Result>
        <p:GetDynamicValueProperty.Source>
          <InArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpValue x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpValue>
          </InArgument>
        </p:GetDynamicValueProperty.Source>
      </p:GetDynamicValueProperty>
      <p:CountDynamicValueItems DisplayName="Count finished TAR items">
        <p:CountDynamicValueItems.Result>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">itemsCount</mca:CSharpReference>
          </OutArgument>
        </p:CountDynamicValueItems.Result>
        <InArgument x:TypeArguments="p:DynamicValue">
          <mca:CSharpValue x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpValue>
        </InArgument>
      </p:CountDynamicValueItems>
      <Assign DisplayName="Initialize index">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">0;</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <While DisplayName="Iterate over expired EIFs">
        <While.Variables>
          <Variable x:TypeArguments="x:Int32" Name="eifId" />
        </While.Variables>
        <While.Condition>
          <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; itemsCount</mca:CSharpValue>
        </While.Condition>
        <Sequence>
          <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get EIF Id">
            <p:GetDynamicValueProperty.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/Id", index);</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.PropertyName>
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">eifId</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p1:DeleteListItem ItemGuid="{x:Null}" DisplayName="Delete expired EIF">
            <p1:DeleteListItem.ItemId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">eifId</mca:CSharpValue>
              </InArgument>
            </p1:DeleteListItem.ItemId>
            <p1:DeleteListItem.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/EIFRequests;}")</mca:CSharpValue>
              </InArgument>
            </p1:DeleteListItem.ListId>
          </p1:DeleteListItem>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">index + 1;</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
      <sads:DebugSymbol.Symbol>d2lEOlxQcm9qZWN0c1xTQ0kuVEFSXHRhclxTaGFyZVBvaW50XFNDSS5UQVIuV29ya2Zsb3dzXFNDSS5UQVIuV29ya2Zsb3dzXEVJRkFyY2hpdmluZ1dvcmtmbG93XFdvcmtmbG93LnhhbWw7MQOJAg4CAQE5BT8RAwHyAUAFnQEQAgF3ngEFsgESAgFnswEFvgEhAgFZvwEFyAEgAgFMyQEF1AEOAgE/1QEFhwINAgECPAs8VwMB8wFEB4QBEgMBlgGFAQeQARADAYcBkQEHnAEQAgF4oQELpQEpAgF1rwELrwHQAQIBb6oBC6oBYwIBaZ4BeZ4BfgIBaLYBC7YBYwIBYbsBC7sBWwIBW7MBuwGzAcYBAgFawgELwgFaAgFTxgEJxgFZAgFN0QEL0QFKAgFGzAELzAFVAgFA3AEHhgISAgEK2gEJ2gFdAgEDSQlZIQMB1QFaCWYOAwHGAWcJdx8DAaoBeAmDASADAZcBjQENjQFcAwGPAYgBDYgBXwMBiAGZAQ2ZAXQDAYABlAENlAFiAgF5owFFowFjAgF23QEJ7QElAgEp7gEJ+QEdAgEa+gEJhQISAgELSZMBSaQBAwHxAUwPTHwDAegBVg9WWgMB3wFRD1FUAwHWAV0PXVsDAccBYQ1kGAMB0AFvD298AwG9AXQPdGcDAbQBag9qUgMBqwF7D3tfAwGhAYABD4ABYQMBmAHlAQ/lAVkCATjqAQ/qAV8CATHgAQ/gAW4CASr2AQ/2AXwCASLxAQ/xAVECARuCAg+CAlYCARP9AQ/9AVkCAQxiD2KGAQMB0wFjD2OIAQMB0QFiXWKDAQMB1AFjX2OFAQMB0gE=</sads:DebugSymbol.Symbol>
    </Sequence>
  </stwe:Workflow.Implementation>
</stwe:Workflow>