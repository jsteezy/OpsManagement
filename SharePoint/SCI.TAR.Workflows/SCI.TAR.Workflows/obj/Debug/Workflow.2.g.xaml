<?xml version="1.0" encoding="utf-8"?>
<stwt:Workflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.Design" xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:p1="wf://workflow.windows.net/$Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sn="clr-namespace:System.Net;assembly=System" xmlns:stwt="clr-namespace:SCI.TAR.Workflows.TARArchivingWorkflow;assembly=SCI.TAR.Workflows" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Activities</x:String>
      <x:String>Microsoft.Activities</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Net</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Workflow.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Workflow.Runtime</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.Client.ServerRuntime</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>SCI.TAR.Workflows</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <stwt:Workflow.Implementation>
    <Sequence DisplayName="Main Sequence">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="webUrl" />
        <Variable x:TypeArguments="p:DynamicValue" Name="restResponse" />
        <Variable x:TypeArguments="x:Int32" Name="itemsCount" />
        <Variable x:TypeArguments="x:Int32" Name="index" />
        <Variable x:TypeArguments="s:DateTime" Name="dateThreshold" />
      </Sequence.Variables>
      <p1:WebUri DisplayName="Get Web URL">
        <p1:WebUri.Result>
          <OutArgument x:TypeArguments="x:String">
            <mca:CSharpReference x:TypeArguments="x:String">webUrl</mca:CSharpReference>
          </OutArgument>
        </p1:WebUri.Result>
      </p1:WebUri>
      <Sequence DisplayName="Initialization">
        <Sequence DisplayName="Get Storage Threshold Months">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="settingItemId" />
            <Variable x:TypeArguments="p:DynamicValue" Name="settingDynamicValue" />
            <Variable x:TypeArguments="x:Int32" Name="monthsThreshold" />
          </Sequence.Variables>
          <p1:LookupSPListItemId DisplayName="Lookup TAR Setting Id" PropertyValue="TAR_StorageMonths">
            <p1:LookupSPListItemId.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.ListId>
            <p1:LookupSPListItemId.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">"Title"</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.PropertyName>
            <p1:LookupSPListItemId.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">settingItemId</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItemId.Result>
          </p1:LookupSPListItemId>
          <If DisplayName="If there is no storage threshold setting">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">settingItemId &lt; 1</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory Message="Item with title TAR_StorageMonths was not found in TAR Settings list" />
                <TerminateWorkflow Reason="Item with title TAR_StorageMonths was not found in TAR Settings list" />
              </Sequence>
            </If.Then>
          </If>
          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup TAR Setting">
            <p1:LookupSPListItem.ItemId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">settingItemId</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ItemId>
            <p1:LookupSPListItem.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ListId>
            <p1:LookupSPListItem.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">settingDynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItem.Result>
          </p1:LookupSPListItem>
          <p:GetODataProperties DisplayName="Get Storage Threshold Months">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">settingDynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_SettingValue">
                <mca:CSharpReference x:TypeArguments="x:Int32">monthsThreshold</mca:CSharpReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
          <Assign DisplayName="Negate months threshold">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">monthsThreshold</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">0 - monthsThreshold;</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Compute date threshold">
            <Assign.To>
              <OutArgument x:TypeArguments="s:DateTime">
                <mca:CSharpReference x:TypeArguments="s:DateTime">dateThreshold</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="s:DateTime">
                <mca:CSharpValue x:TypeArguments="s:DateTime">DateTime.UtcNow.AddMonths(monthsThreshold);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </Sequence>
      <p:HttpSend DisplayName="Call REST to get finished TARs" Method="GET">
        <p:HttpSend.RequestHeaders>
          <InArgument x:TypeArguments="p:DynamicValue">
            <p:SetDynamicValueProperties>
              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json;odata=verbose</InArgument>
              </scg:Dictionary>
            </p:SetDynamicValueProperties>
          </InArgument>
        </p:HttpSend.RequestHeaders>
        <p:HttpSend.ResponseContent>
          <OutArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpReference x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpReference>
          </OutArgument>
        </p:HttpSend.ResponseContent>
        <p:HttpSend.Uri>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}/_api/Lists/getByTitle('TAR Requests')/items?$filter=(Created lt datetime'{1}') and ((TAR_BudgetApprovalStatus eq 'Rejected') or ((TAR_RequiresGssApproval eq 1 and (TAR_GSSApprovalStatus eq 'Approved' or TAR_GSSApprovalStatus eq 'Rejected')) or (TAR_RequiresGssApproval eq 0 and TAR_BudgetApprovalStatus eq 'Approved')))", webUrl, dateThreshold.ToString("s"));</mca:CSharpValue>
          </InArgument>
        </p:HttpSend.Uri>
      </p:HttpSend>
      <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get d/results from REST response" PropertyName="d/results">
        <p:GetDynamicValueProperty.Result>
          <OutArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpReference x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpReference>
          </OutArgument>
        </p:GetDynamicValueProperty.Result>
        <p:GetDynamicValueProperty.Source>
          <InArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpValue x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpValue>
          </InArgument>
        </p:GetDynamicValueProperty.Source>
      </p:GetDynamicValueProperty>
      <p:CountDynamicValueItems DisplayName="Count finished TAR items">
        <p:CountDynamicValueItems.Result>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">itemsCount</mca:CSharpReference>
          </OutArgument>
        </p:CountDynamicValueItems.Result>
        <InArgument x:TypeArguments="p:DynamicValue">
          <mca:CSharpValue x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpValue>
        </InArgument>
      </p:CountDynamicValueItems>
      <Assign DisplayName="Initialize index">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">0;</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <While DisplayName="Iterate over TARs">
        <While.Variables>
          <Variable x:TypeArguments="x:String" Name="tarQuery" />
          <Variable x:TypeArguments="x:Int32" Name="tarId" />
          <Variable x:TypeArguments="x:String" Name="tarTitle" />
        </While.Variables>
        <While.Condition>
          <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; itemsCount</mca:CSharpValue>
        </While.Condition>
        <Sequence>
          <Sequence.Variables>
            <Variable x:TypeArguments="p:DynamicValue" Name="tarDetails" />
            <Variable x:TypeArguments="s:DateTime" Name="tarCreationDate" />
            <Variable x:TypeArguments="x:String" Name="archiveListName" />
            <Variable x:TypeArguments="x:String" Name="postResponse" />
            <Variable x:TypeArguments="x:String" Name="archiveListItemName" />
            <Variable x:TypeArguments="p:DynamicValue" Name="tarRequestBody" />
            <Variable x:TypeArguments="p:DynamicValue" Name="newTarDetails" />
            <Variable x:TypeArguments="p:DynamicValue" Name="renewDigestResponse" />
            <Variable x:TypeArguments="x:String" Name="formDigest" />
            <Variable x:TypeArguments="sn:HttpStatusCode" Name="postResponseStatusCode" />
          </Sequence.Variables>
          <p:HttpSend Method="POST">
            <p:HttpSend.RequestHeaders>
              <InArgument x:TypeArguments="p:DynamicValue">
                <p:SetDynamicValueProperties>
                  <scg:Dictionary x:TypeArguments="x:String, InArgument">
                    <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json; odata=verbose</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Content-Type">application/json; odata=verbose</InArgument>
                  </scg:Dictionary>
                </p:SetDynamicValueProperties>
              </InArgument>
            </p:HttpSend.RequestHeaders>
            <p:HttpSend.ResponseContent>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">renewDigestResponse</mca:CSharpReference>
              </OutArgument>
            </p:HttpSend.ResponseContent>
            <p:HttpSend.Uri>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}/_api/contextinfo", webUrl);</mca:CSharpValue>
              </InArgument>
            </p:HttpSend.Uri>
          </p:HttpSend>
          <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Form Digest Value" PropertyName="d/GetContextWebInformation/FormDigestValue">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">formDigest</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">renewDigestResponse</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">tarQuery</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})", index);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get current TAR ">
            <p:GetDynamicValueProperty.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">tarQuery</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.PropertyName>
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">restResponse</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p:GetDynamicValueProperty x:TypeArguments="s:DateTime" DisplayName="Get TAR Created Date" PropertyName="Created">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="s:DateTime">
                <mca:CSharpReference x:TypeArguments="s:DateTime">tarCreationDate</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get TAR Id" PropertyName="Id">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">tarId</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <Assign DisplayName="Assign Archive list name">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">archiveListName</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">string.Format("TAR Requests Archive {0}", tarCreationDate.Year);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign Archive list item name (for metadata)">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">archiveListItemName</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">archiveListName.Replace(" ", string.Empty);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Sequence DisplayName="Build new TAR">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="tarRequesterId" />
              <Variable x:TypeArguments="x:Int32" Name="tarTravellerId" />
              <Variable x:TypeArguments="x:Int32" Name="tarLineManagerId" />
              <Variable x:TypeArguments="x:String" Name="tarEmergencyContacts" />
              <Variable x:TypeArguments="x:String" Name="tarTypeOfTravel" />
              <Variable x:TypeArguments="x:String" Name="tarVisaRequired" />
              <Variable x:TypeArguments="x:String" Name="tarVisaNumber" />
              <Variable x:TypeArguments="x:String" Name="tarPhotoId" />
              <Variable x:TypeArguments="x:String" Name="tarMedicalEmergencyCard" />
              <Variable x:TypeArguments="x:String" Name="tarMedicalProviderName" />
              <Variable x:TypeArguments="x:String" Name="tarPolicyNumber" />
              <Variable x:TypeArguments="x:String" Name="tarReadPDI" />
              <Variable x:TypeArguments="x:String" Name="tarUsaidFunds" />
              <Variable x:TypeArguments="x:String" Name="tarVaccination" />
              <Variable x:TypeArguments="x:String" Name="tarTravelAdvances" />
              <Variable x:TypeArguments="x:String" Name="tarGssTraining" />
              <Variable x:TypeArguments="x:String" Name="tarGssTrainingDateString" />
              <Variable x:TypeArguments="x:String" Name="tarPurposeOfTravel" />
              <Variable x:TypeArguments="x:String" Name="tarApprovedByDirector" />
              <Variable x:TypeArguments="x:String" Name="tarHasAppropriateEmergency" />
              <Variable x:TypeArguments="x:String" Name="tarDestinations" />
              <Variable x:TypeArguments="x:String" Name="tarBudgetSession" />
              <Variable x:TypeArguments="x:String" Name="tarOtherEstimatedCosts" />
              <Variable x:TypeArguments="x:String" Name="tarBudgetCodes" />
              <Variable x:TypeArguments="x:String" Name="tarAdditionalInfo" />
              <Variable x:TypeArguments="x:Int32" Name="tarTravelCoordinatorId" />
              <Variable x:TypeArguments="x:Int32" Name="tarBudgetApproverId" />
              <Variable x:TypeArguments="x:String" Name="tarInformationRead" />
              <Variable x:TypeArguments="x:String" Name="tarLocatedInLondon" />
              <Variable x:TypeArguments="x:Boolean" Name="tarRequiresGssApproval" />
              <Variable x:TypeArguments="s:DateTime" Name="tarDepartureDate" />
              <Variable x:TypeArguments="x:String" Name="tarReturnDate" />
              <Variable x:TypeArguments="x:String" Name="tarBudgetApprovalStatus" />
              <Variable x:TypeArguments="x:String" Name="tarBudgetApprovalTimestampString" />
              <Variable x:TypeArguments="x:String" Name="tarGssApprovalStatus" />
              <Variable x:TypeArguments="x:String" Name="tarGssApprovalTimestampString" />
              <Variable x:TypeArguments="x:Int32" Name="tarAdditionalStaffMemberId" />
              <Variable x:TypeArguments="x:String" Name="tarReturnDateString" />
              <Variable x:TypeArguments="s:DateTime" Name="tarCreated" />
            </Sequence.Variables>
            <p:GetODataProperties DisplayName="Get TAR details">
              <p:GetODataProperties.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">tarDetails</mca:CSharpValue>
                </InArgument>
              </p:GetODataProperties.Source>
              <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                <OutArgument x:TypeArguments="x:String" x:Key="Title">
                  <mca:CSharpReference x:TypeArguments="x:String">tarTitle</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_RequesterId">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tarRequesterId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_TravellerId">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tarTravellerId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_LineManagerId">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tarLineManagerId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_SelectedEmergencyContacts">
                  <mca:CSharpReference x:TypeArguments="x:String">tarEmergencyContacts</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_TypeOfTravel">
                  <mca:CSharpReference x:TypeArguments="x:String">tarTypeOfTravel</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_VisaRequired">
                  <mca:CSharpReference x:TypeArguments="x:String">tarVisaRequired</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_VisaNumber">
                  <mca:CSharpReference x:TypeArguments="x:String">tarVisaNumber</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_PhotoId">
                  <mca:CSharpReference x:TypeArguments="x:String">tarPhotoId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_MedicalEmergencyCard">
                  <mca:CSharpReference x:TypeArguments="x:String">tarMedicalEmergencyCard</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_MedicalProviderName">
                  <mca:CSharpReference x:TypeArguments="x:String">tarMedicalProviderName</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_PolicyNumber">
                  <mca:CSharpReference x:TypeArguments="x:String">tarPolicyNumber</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_ReadPDI">
                  <mca:CSharpReference x:TypeArguments="x:String">tarReadPDI</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_UsaidFunds">
                  <mca:CSharpReference x:TypeArguments="x:String">tarUsaidFunds</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_AppropriateVaccination">
                  <mca:CSharpReference x:TypeArguments="x:String">tarVaccination</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_TravelAdvances">
                  <mca:CSharpReference x:TypeArguments="x:String">tarTravelAdvances</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_GSSTraining">
                  <mca:CSharpReference x:TypeArguments="x:String">tarGssTraining</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_GSSTrainingDate">
                  <mca:CSharpReference x:TypeArguments="x:String">tarGssTrainingDateString</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_PurposeOfTravel">
                  <mca:CSharpReference x:TypeArguments="x:String">tarPurposeOfTravel</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_ApprovedByDirector">
                  <mca:CSharpReference x:TypeArguments="x:String">tarApprovedByDirector</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_AppropriateEmergencyContacts">
                  <mca:CSharpReference x:TypeArguments="x:String">tarHasAppropriateEmergency</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_Destinations">
                  <mca:CSharpReference x:TypeArguments="x:String">tarDestinations</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_BudgetSession">
                  <mca:CSharpReference x:TypeArguments="x:String">tarBudgetSession</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_OtherEstimatedCosts">
                  <mca:CSharpReference x:TypeArguments="x:String">tarOtherEstimatedCosts</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_BudgetCodes">
                  <mca:CSharpReference x:TypeArguments="x:String">tarBudgetCodes</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_AdditionalInformation">
                  <mca:CSharpReference x:TypeArguments="x:String">tarAdditionalInfo</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_TravelCoordinatorId">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tarTravelCoordinatorId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_BudgetApproverId">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tarBudgetApproverId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_InformationRead">
                  <mca:CSharpReference x:TypeArguments="x:String">tarInformationRead</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_LondonOfficeLocation">
                  <mca:CSharpReference x:TypeArguments="x:String">tarLocatedInLondon</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Boolean" x:Key="TAR_RequiresGssApproval">
                  <mca:CSharpReference x:TypeArguments="x:Boolean">tarRequiresGssApproval</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="s:DateTime" x:Key="TAR_DepartureDate">
                  <mca:CSharpReference x:TypeArguments="s:DateTime">tarDepartureDate</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_ReturnDate">
                  <mca:CSharpReference x:TypeArguments="x:String">tarReturnDateString</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalStatus">
                  <mca:CSharpReference x:TypeArguments="x:String">tarBudgetApprovalStatus</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalTimestamp">
                  <mca:CSharpReference x:TypeArguments="x:String">tarBudgetApprovalTimestampString</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalStatus">
                  <mca:CSharpReference x:TypeArguments="x:String">tarGssApprovalStatus</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalTimestamp">
                  <mca:CSharpReference x:TypeArguments="x:String">tarGssApprovalTimestampString</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_AdditionalStaffMemberId">
                  <mca:CSharpReference x:TypeArguments="x:Int32">tarAdditionalStaffMemberId</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="s:DateTime" x:Key="Created">
                  <mca:CSharpReference x:TypeArguments="s:DateTime">tarCreated</mca:CSharpReference>
                </OutArgument>
              </scg:Dictionary>
            </p:GetODataProperties>
            <p:BuildDynamicValue DisplayName="Build new TAR details">
              <p:BuildDynamicValue.Result>
                <InOutArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpReference x:TypeArguments="p:DynamicValue">newTarDetails</mca:CSharpReference>
                </InOutArgument>
              </p:BuildDynamicValue.Result>
              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                <InArgument x:TypeArguments="x:String" x:Key="__metadata/type">
                  <mca:CSharpValue x:TypeArguments="x:String">string.Format("SP.Data.{0}ListItem", archiveListItemName)</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="Title">
                  <mca:CSharpValue x:TypeArguments="x:String">tarTitle</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="TAR_RequesterId">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tarRequesterId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="TAR_TravellerId">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tarTravellerId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="TAR_LineManagerId">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tarLineManagerId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_SelectedEmergencyContacts">
                  <mca:CSharpValue x:TypeArguments="x:String">tarEmergencyContacts</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_TypeOfTravel">
                  <mca:CSharpValue x:TypeArguments="x:String">tarTypeOfTravel</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_VisaRequired">
                  <mca:CSharpValue x:TypeArguments="x:String">tarVisaRequired</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_VisaNumber">
                  <mca:CSharpValue x:TypeArguments="x:String">tarVisaNumber</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_PhotoId">
                  <mca:CSharpValue x:TypeArguments="x:String">tarPhotoId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_MedicalEmergencyCard">
                  <mca:CSharpValue x:TypeArguments="x:String">tarMedicalEmergencyCard</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_MedicalProviderName">
                  <mca:CSharpValue x:TypeArguments="x:String">tarMedicalProviderName</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_PolicyNumber">
                  <mca:CSharpValue x:TypeArguments="x:String">tarPolicyNumber</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_ReadPDI">
                  <mca:CSharpValue x:TypeArguments="x:String">tarReadPDI</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_UsaidFunds">
                  <mca:CSharpValue x:TypeArguments="x:String">tarUsaidFunds</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_AppropriateVaccination">
                  <mca:CSharpValue x:TypeArguments="x:String">tarVaccination</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_TravelAdvances">
                  <mca:CSharpValue x:TypeArguments="x:String">tarTravelAdvances</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSTraining">
                  <mca:CSharpValue x:TypeArguments="x:String">tarGssTraining</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSTrainingDate">
                  <mca:CSharpValue x:TypeArguments="x:String">tarGssTrainingDateString</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_PurposeOfTravel">
                  <mca:CSharpValue x:TypeArguments="x:String">tarPurposeOfTravel</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_ApprovedByDirector">
                  <mca:CSharpValue x:TypeArguments="x:String">tarApprovedByDirector</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_AppropriateEmergencyContacts">
                  <mca:CSharpValue x:TypeArguments="x:String">tarHasAppropriateEmergency</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_Destinations">
                  <mca:CSharpValue x:TypeArguments="x:String">tarDestinations</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetSession">
                  <mca:CSharpValue x:TypeArguments="x:String">tarBudgetSession</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_OtherEstimatedCosts">
                  <mca:CSharpValue x:TypeArguments="x:String">tarOtherEstimatedCosts</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetCodes">
                  <mca:CSharpValue x:TypeArguments="x:String">tarBudgetCodes</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_AdditionalInformation">
                  <mca:CSharpValue x:TypeArguments="x:String">tarAdditionalInfo</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="TAR_TravelCoordinatorId">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tarTravelCoordinatorId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="TAR_BudgetApproverId">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tarBudgetApproverId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_InformationRead">
                  <mca:CSharpValue x:TypeArguments="x:String">tarInformationRead</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_LondonOfficeLocation">
                  <mca:CSharpValue x:TypeArguments="x:String">tarLocatedInLondon</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Boolean" x:Key="TAR_RequiresGssApproval">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">tarRequiresGssApproval</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="s:DateTime" x:Key="TAR_DepartureDate">
                  <mca:CSharpValue x:TypeArguments="s:DateTime">tarDepartureDate</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_ReturnDate">
                  <mca:CSharpValue x:TypeArguments="x:String">tarReturnDateString</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalStatus">
                  <mca:CSharpValue x:TypeArguments="x:String">tarBudgetApprovalStatus</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalTimestamp">
                  <mca:CSharpValue x:TypeArguments="x:String">tarBudgetApprovalTimestampString</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalStatus">
                  <mca:CSharpValue x:TypeArguments="x:String">tarGssApprovalStatus</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalTimestamp">
                  <mca:CSharpValue x:TypeArguments="x:String">tarGssApprovalTimestampString</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="TAR_AdditionalStaffMemberId">
                  <mca:CSharpValue x:TypeArguments="x:Int32">tarAdditionalStaffMemberId</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="s:DateTime" x:Key="TAR_CreatedDate">
                  <mca:CSharpValue x:TypeArguments="s:DateTime">tarCreated</mca:CSharpValue>
                </InArgument>
              </scg:Dictionary>
            </p:BuildDynamicValue>
          </Sequence>
          <p:HttpSend Method="POST">
            <p:HttpSend.RequestContent>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">newTarDetails.ToString()</mca:CSharpValue>
              </InArgument>
            </p:HttpSend.RequestContent>
            <p:HttpSend.RequestHeaders>
              <InArgument x:TypeArguments="p:DynamicValue">
                <p:SetDynamicValueProperties>
                  <scg:Dictionary x:TypeArguments="x:String, InArgument">
                    <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json;odata=verbose</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Content-Type">application/json;odata=verbose</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="X-RequestDigest">
                      <mca:CSharpValue x:TypeArguments="x:String">formDigest</mca:CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Content-Length">
                      <mca:CSharpValue x:TypeArguments="x:String">newTarDetails.ToString().Length.ToString()</mca:CSharpValue>
                    </InArgument>
                  </scg:Dictionary>
                </p:SetDynamicValueProperties>
              </InArgument>
            </p:HttpSend.RequestHeaders>
            <p:HttpSend.ResponseContent>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">postResponse</mca:CSharpReference>
              </OutArgument>
            </p:HttpSend.ResponseContent>
            <p:HttpSend.ResponseStatusCode>
              <OutArgument x:TypeArguments="sn:HttpStatusCode">
                <mca:CSharpReference x:TypeArguments="sn:HttpStatusCode">postResponseStatusCode</mca:CSharpReference>
              </OutArgument>
            </p:HttpSend.ResponseStatusCode>
            <p:HttpSend.Uri>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}/_api/Lists/getByTitle('{1}')/items", webUrl, archiveListName);</mca:CSharpValue>
              </InArgument>
            </p:HttpSend.Uri>
          </p:HttpSend>
          <If DisplayName="If TAR item has been archived successfully">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">postResponseStatusCode == HttpStatusCode.Created</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p:HttpSend DisplayName="Delete old TAR" Method="POST">
                  <p:HttpSend.RequestHeaders>
                    <InArgument x:TypeArguments="p:DynamicValue">
                      <p:SetDynamicValueProperties>
                        <scg:Dictionary x:TypeArguments="x:String, InArgument">
                          <InArgument x:TypeArguments="x:String" x:Key="X-HTTP-Method">DELETE</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="If-Match">*</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="X-RequestDigest">
                            <mca:CSharpValue x:TypeArguments="x:String">formDigest</mca:CSharpValue>
                          </InArgument>
                        </scg:Dictionary>
                      </p:SetDynamicValueProperties>
                    </InArgument>
                  </p:HttpSend.RequestHeaders>
                  <p:HttpSend.ResponseStatusCode>
                    <OutArgument x:TypeArguments="sn:HttpStatusCode">
                      <mca:CSharpReference x:TypeArguments="sn:HttpStatusCode">postResponseStatusCode</mca:CSharpReference>
                    </OutArgument>
                  </p:HttpSend.ResponseStatusCode>
                  <p:HttpSend.Uri>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}/_api/Lists/getByTitle('TAR Requests')/items('{1}')", webUrl, tarId)</mca:CSharpValue>
                    </InArgument>
                  </p:HttpSend.Uri>
                </p:HttpSend>
                <If DisplayName="If delete was not successful">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">postResponseStatusCode != HttpStatusCode.OK</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <p1:WriteToHistory>
                      <p1:WriteToHistory.Message>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">string.Format("TAR Archiving WF could not delete TAR Request with id: {0}", tarId);</mca:CSharpValue>
                        </InArgument>
                      </p1:WriteToHistory.Message>
                    </p1:WriteToHistory>
                  </If.Then>
                  <If.Else>
                    <Sequence DisplayName="Delete TAR associated Tasks">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="p:DynamicValue" Name="tasksRestResponse" />
                        <Variable x:TypeArguments="x:Int32" Name="tasksCount" />
                        <Variable x:TypeArguments="x:Int32" Name="tasksIndex" />
                      </Sequence.Variables>
                      <p:HttpSend DisplayName="Call REST to get associated Tasks" Method="GET">
                        <p:HttpSend.RequestHeaders>
                          <InArgument x:TypeArguments="p:DynamicValue">
                            <p:SetDynamicValueProperties>
                              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json;odata=verbose</InArgument>
                              </scg:Dictionary>
                            </p:SetDynamicValueProperties>
                          </InArgument>
                        </p:HttpSend.RequestHeaders>
                        <p:HttpSend.ResponseContent>
                          <OutArgument x:TypeArguments="p:DynamicValue">
                            <mca:CSharpReference x:TypeArguments="p:DynamicValue">tasksRestResponse</mca:CSharpReference>
                          </OutArgument>
                        </p:HttpSend.ResponseContent>
                        <p:HttpSend.Uri>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}_api/Lists/getByTitle('TAR Workflow Tasks')/items?$filter=((Status eq 'Completed') and (substringof('{1}',Title)))", webUrl, tarTitle);</mca:CSharpValue>
                          </InArgument>
                        </p:HttpSend.Uri>
                      </p:HttpSend>
                      <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get d/results from REST response" PropertyName="d/results">
                        <p:GetDynamicValueProperty.Result>
                          <OutArgument x:TypeArguments="p:DynamicValue">
                            <mca:CSharpReference x:TypeArguments="p:DynamicValue">tasksRestResponse</mca:CSharpReference>
                          </OutArgument>
                        </p:GetDynamicValueProperty.Result>
                        <p:GetDynamicValueProperty.Source>
                          <InArgument x:TypeArguments="p:DynamicValue">
                            <mca:CSharpValue x:TypeArguments="p:DynamicValue">tasksRestResponse</mca:CSharpValue>
                          </InArgument>
                        </p:GetDynamicValueProperty.Source>
                      </p:GetDynamicValueProperty>
                      <p:CountDynamicValueItems DisplayName="Count tasks">
                        <p:CountDynamicValueItems.Result>
                          <OutArgument x:TypeArguments="x:Int32">
                            <mca:CSharpReference x:TypeArguments="x:Int32">tasksCount</mca:CSharpReference>
                          </OutArgument>
                        </p:CountDynamicValueItems.Result>
                        <InArgument x:TypeArguments="p:DynamicValue">
                          <mca:CSharpValue x:TypeArguments="p:DynamicValue">tasksRestResponse</mca:CSharpValue>
                        </InArgument>
                      </p:CountDynamicValueItems>
                      <Assign DisplayName="Initialize index">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">
                            <mca:CSharpReference x:TypeArguments="x:Int32">tasksIndex</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">
                            <mca:CSharpValue x:TypeArguments="x:Int32">0;</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                      <While DisplayName="Iterate over tasks">
                        <While.Condition>
                          <mca:CSharpValue x:TypeArguments="x:Boolean">tasksIndex &lt; tasksCount</mca:CSharpValue>
                        </While.Condition>
                        <Sequence DisplayName="Delete Task">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="x:Int32" Name="taskId" />
                          </Sequence.Variables>
                          <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Task Id">
                            <p:GetDynamicValueProperty.PropertyName>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/Id", tasksIndex);</mca:CSharpValue>
                              </InArgument>
                            </p:GetDynamicValueProperty.PropertyName>
                            <p:GetDynamicValueProperty.Result>
                              <OutArgument x:TypeArguments="x:Int32">
                                <mca:CSharpReference x:TypeArguments="x:Int32">taskId</mca:CSharpReference>
                              </OutArgument>
                            </p:GetDynamicValueProperty.Result>
                            <p:GetDynamicValueProperty.Source>
                              <InArgument x:TypeArguments="p:DynamicValue">
                                <mca:CSharpValue x:TypeArguments="p:DynamicValue">tasksRestResponse</mca:CSharpValue>
                              </InArgument>
                            </p:GetDynamicValueProperty.Source>
                          </p:GetDynamicValueProperty>
                          <p:HttpSend DisplayName="Delete old TAR's task" Method="POST">
                            <p:HttpSend.RequestHeaders>
                              <InArgument x:TypeArguments="p:DynamicValue">
                                <p:SetDynamicValueProperties>
                                  <scg:Dictionary x:TypeArguments="x:String, InArgument">
                                    <InArgument x:TypeArguments="x:String" x:Key="X-HTTP-Method">DELETE</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="If-Match">*</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="X-RequestDigest">
                                      <mca:CSharpValue x:TypeArguments="x:String">formDigest</mca:CSharpValue>
                                    </InArgument>
                                  </scg:Dictionary>
                                </p:SetDynamicValueProperties>
                              </InArgument>
                            </p:HttpSend.RequestHeaders>
                            <p:HttpSend.ResponseStatusCode>
                              <OutArgument x:TypeArguments="sn:HttpStatusCode">
                                <mca:CSharpReference x:TypeArguments="sn:HttpStatusCode">postResponseStatusCode</mca:CSharpReference>
                              </OutArgument>
                            </p:HttpSend.ResponseStatusCode>
                            <p:HttpSend.Uri>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}/_api/Lists/getByTitle('TAR Workflow Tasks')/items('{1}')", webUrl, taskId)</mca:CSharpValue>
                              </InArgument>
                            </p:HttpSend.Uri>
                          </p:HttpSend>
                          <If DisplayName="If could not delete task">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">postResponseStatusCode != HttpStatusCode.OK</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <p1:WriteToHistory>
                                <p1:WriteToHistory.Message>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("Could not delete TAR Task with Id: {0}", taskId);</mca:CSharpValue>
                                  </InArgument>
                                </p1:WriteToHistory.Message>
                              </p1:WriteToHistory>
                            </If.Then>
                          </If>
                          <Assign DisplayName="Increment index">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int32">
                                <mca:CSharpReference x:TypeArguments="x:Int32">tasksIndex</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int32">
                                <mca:CSharpValue x:TypeArguments="x:Int32">tasksIndex + 1;</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </While>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </If.Then>
          </If>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">index + 1;</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </Sequence>
  </stwt:Workflow.Implementation>
</stwt:Workflow>