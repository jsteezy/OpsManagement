<?xml version="1.0" encoding="utf-8"?>
<stwe:Workflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.Design" xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:p1="wf://workflow.windows.net/$Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:stwe="clr-namespace:SCI.TAR.Workflows.EIFWorkflow;assembly=SCI.TAR.Workflows" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>Microsoft.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.Client.ServerRuntime</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>SCI.TAR.Workflows</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <stwe:Workflow.Implementation>
    <Sequence DisplayName="Main Sequence">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="webUrl" />
        <Variable x:TypeArguments="sco:Collection(x:String)" Name="tokenPlaceholders" />
        <Variable x:TypeArguments="sco:Collection(x:String)" Name="tokenValues" />
        <Variable x:TypeArguments="p:DynamicValue" Name="dynamicValue" />
        <Variable x:TypeArguments="x:String" Name="submittedEmailSubject" />
        <Variable x:TypeArguments="x:String" Name="submittedEmailContent" />
        <Variable x:TypeArguments="p:DynamicValue" Name="eifDetails" />
        <Variable x:TypeArguments="x:String" Name="requesterLoginName" />
        <Variable x:TypeArguments="x:String" Name="requesterName" />
        <Variable x:TypeArguments="x:String" Name="staffResponsibleLoginName" />
        <Variable x:TypeArguments="x:String" Name="appRelativeUrl" />
        <Variable x:TypeArguments="sco:Collection(x:String)" Name="countryDirectorsLoginNames" />
        <Variable x:TypeArguments="x:String" Name="additionalStaffMemberLoginName" />
      </Sequence.Variables>
      <p1:WriteToHistory DisplayName="WriteToHistory Start" Message="WF Started" />
      <p1:WebUri>
        <p1:WebUri.Result>
          <OutArgument x:TypeArguments="x:String">
            <mca:CSharpReference x:TypeArguments="x:String">webUrl</mca:CSharpReference>
          </OutArgument>
        </p1:WebUri.Result>
      </p1:WebUri>
      <Sequence DisplayName="Initialization">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:Boolean" Name="dynamicValueIsEmpty" />
          <Variable x:TypeArguments="x:Int32" Name="tokenValueInt" />
          <Variable x:TypeArguments="x:String" Name="emailAddress" />
          <Variable x:TypeArguments="x:String" Name="tokenValueString" />
          <Variable x:TypeArguments="x:Int32" Name="collectionSize" />
          <Variable x:TypeArguments="x:Int32" Name="index" />
          <Variable x:TypeArguments="s:DateTime" Name="tokenValueDateTime" />
          <Variable x:TypeArguments="x:String" Name="eifId" />
          <Variable x:TypeArguments="x:String" Name="tarId" />
        </Sequence.Variables>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize tokenPlaceholders">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">tokenPlaceholders</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize tokenValues">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">tokenValues</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">tokenValues</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <Sequence DisplayName="Get Submitted Email Template">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="emailTemplateId" />
          </Sequence.Variables>
          <p1:LookupSPListItemId DisplayName="Get Email Template Id" PropertyValue="EIF_Submitted">
            <p1:LookupSPListItemId.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.ListId>
            <p1:LookupSPListItemId.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">"LinkTitle"</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.PropertyName>
            <p1:LookupSPListItemId.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItemId.Result>
          </p1:LookupSPListItemId>
          <If DisplayName="If email template not found">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">emailTemplateId &lt; 1</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log Error" Message="EIF_Submitted email template not found." />
                <TerminateWorkflow Reason="EIF_Submitted email template not found." />
              </Sequence>
            </If.Then>
          </If>
          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template">
            <p1:LookupSPListItem.ItemId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">emailTemplateId</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ItemId>
            <p1:LookupSPListItem.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TAREmailTemplates;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ListId>
            <p1:LookupSPListItem.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItem.Result>
          </p1:LookupSPListItem>
          <p:GetODataProperties DisplayName="Get Email Template details">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
                <mca:CSharpReference x:TypeArguments="x:String">submittedEmailSubject</mca:CSharpReference>
              </OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
                <mca:CSharpReference x:TypeArguments="x:String">submittedEmailContent</mca:CSharpReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
          <If DisplayName="If email details are empty">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(submittedEmailSubject) || string.IsNullOrEmpty(submittedEmailContent)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error" Message="Invalid email template details." />
                <TerminateWorkflow Reason="Invalid email template details." />
              </Sequence>
            </If.Then>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF WF Settings">
          <p1:LookupSPListItemId DisplayName="Lookup TARSettings App relative path" PropertyValue="AppRelativeUrl">
            <p1:LookupSPListItemId.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.ListId>
            <p1:LookupSPListItemId.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">"LinkTitle"</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItemId.PropertyName>
            <p1:LookupSPListItemId.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItemId.Result>
          </p1:LookupSPListItemId>
          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup TAR Setting">
            <p1:LookupSPListItem.ItemId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ItemId>
            <p1:LookupSPListItem.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <mca:CSharpValue x:TypeArguments="s:Guid">System.Guid.Parse("{$ListId:Lists/TARSettings;}")</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPListItem.ListId>
            <p1:LookupSPListItem.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItem.Result>
          </p1:LookupSPListItem>
          <p:GetODataProperties DisplayName="Get App relative URL">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:String" x:Key="TAR_SettingValue">
                <mca:CSharpReference x:TypeArguments="x:String">appRelativeUrl</mca:CSharpReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
        </Sequence>
        <Sequence DisplayName="Get EIF Request item">
          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup current EIF item">
            <p1:LookupSPListItem.ItemId>
              <InArgument x:TypeArguments="x:Int32">
                <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                  <p1:GetCurrentItemId />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:LookupSPListItem.ItemId>
            <p1:LookupSPListItem.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                  <p1:GetCurrentListId />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:LookupSPListItem.ListId>
            <p1:LookupSPListItem.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPListItem.Result>
          </p1:LookupSPListItem>
          <p:IsEmptyDynamicValue DisplayName="Check if eifDetails is empty">
            <p:IsEmptyDynamicValue.Input>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:IsEmptyDynamicValue.Input>
            <p:IsEmptyDynamicValue.Result>
              <OutArgument x:TypeArguments="x:Boolean">
                <mca:CSharpReference x:TypeArguments="x:Boolean">dynamicValueIsEmpty</mca:CSharpReference>
              </OutArgument>
            </p:IsEmptyDynamicValue.Result>
          </p:IsEmptyDynamicValue>
          <If DisplayName="If eifDetails is empty">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">dynamicValueIsEmpty</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error" Message="No EIF Request found." />
                <TerminateWorkflow Reason="No EIF Request found." />
              </Sequence>
            </If.Then>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF Requester">
          <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Requester Id" PropertyName="d/results/(0)/TAR_RequesterId">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p1:LookupSPUser DisplayName="Lookup Requester">
            <p1:LookupSPUser.PrincipalId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPUser.PrincipalId>
            <p1:LookupSPUser.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPUser.Result>
          </p1:LookupSPUser>
          <p:GetODataProperties DisplayName="Get Requester properties">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                <mca:CSharpReference x:TypeArguments="x:String">requesterLoginName</mca:CSharpReference>
              </OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="Email">
                <mca:CSharpReference x:TypeArguments="x:String">emailAddress</mca:CSharpReference>
              </OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="Title">
                <mca:CSharpReference x:TypeArguments="x:String">requesterName</mca:CSharpReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
          <If DisplayName="If requester has no email address">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(emailAddress)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error">
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {} has no email address.", requesterLoginName);</mca:CSharpValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
                <TerminateWorkflow>
                  <TerminateWorkflow.Reason>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {} has no email address.", requesterLoginName);</mca:CSharpValue>
                    </InArgument>
                  </TerminateWorkflow.Reason>
                </TerminateWorkflow>
              </Sequence>
            </If.Then>
          </If>
          <If DisplayName="If requester has no name">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(requesterName)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error">
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no name associated.", requesterLoginName);</mca:CSharpValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
                <TerminateWorkflow>
                  <TerminateWorkflow.Reason>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no name associated.", requesterLoginName);</mca:CSharpValue>
                    </InArgument>
                  </TerminateWorkflow.Reason>
                </TerminateWorkflow>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence DisplayName="Add tokens">
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {REQUESTER} to tokenPlaceholders" Item="{}{REQUESTER}">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {REQUESTER} encoded to tokenPlaceholders" Item="&amp;#123;REQUESTER&amp;#125;">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add requester to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">requesterName</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add requester to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">requesterName</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF Guest Traveller">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="guestTravellerName" />
          </Sequence.Variables>
          <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Guest Traveller First Name" PropertyName="d/results/(0)/TAR_FirstName">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">guestTravellerName</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Guest Travller Last Name" PropertyName="d/results/(0)/TAR_LastName">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">tokenValueString</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <Assign DisplayName="Build Guest Traveller Full Name">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">guestTravellerName</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0} {1}", guestTravellerName, tokenValueString);</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <If DisplayName="If guest traveller name is empty">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(guestTravellerName)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error" Message="Guest traveller name is empty." />
                <TerminateWorkflow Reason="Guest traveller name is empty." />
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence DisplayName="Add tokens">
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {GUEST_TRAVELLER} to tokenPlaceholders" Item="{}{GUEST_TRAVELLER}">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {GUEST_TRAVELLER} encoded to tokenPlaceholders" Item="&amp;#123;GUEST_TRAVELLER&amp;#125;">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add guest traveller to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">guestTravellerName</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add guest traveller to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">guestTravellerName</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF Additional Staff Member">
          <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Additional Staff Member Id" PropertyName="d/results/(0)/TAR_AdditionalStaffMemberId">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <If DisplayName="If there is a Staff Member added">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:LookupSPUser DisplayName="Lookup Additional Staff Member">
                  <p1:LookupSPUser.PrincipalId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                    </InArgument>
                  </p1:LookupSPUser.PrincipalId>
                  <p1:LookupSPUser.Result>
                    <OutArgument x:TypeArguments="p:DynamicValue">
                      <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
                    </OutArgument>
                  </p1:LookupSPUser.Result>
                </p1:LookupSPUser>
                <p:GetODataProperties DisplayName="Get Additional Staff Member Login Name">
                  <p:GetODataProperties.Source>
                    <InArgument x:TypeArguments="p:DynamicValue">
                      <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                    </InArgument>
                  </p:GetODataProperties.Source>
                  <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                    <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                      <mca:CSharpReference x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpReference>
                    </OutArgument>
                  </scg:Dictionary>
                </p:GetODataProperties>
              </Sequence>
            </If.Then>
            <If.Else>
              <Assign DisplayName="Set staff member login name to empty">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Empty</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF ID">
          <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get EIF Title from eifDetails" PropertyName="d/results/(0)/Title">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">eifId</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <If>
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(eifId)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error" Message="No EIF ID found." />
                <TerminateWorkflow Reason="No EIF ID found." />
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence DisplayName="Add tokens">
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {EIF_ID} to tokenPlaceholders" Item="{}{EIF_ID}">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {EIF_ID} encoded to tokenPlaceholders" Item="&amp;#123;EIF_ID&amp;#125;">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add eif ID to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">eifId</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add eif ID to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">eifId</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
        <Sequence DisplayName="Get TAR ID">
          <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get EIF TAR Id from eifDetails" PropertyName="d/results/(0)/TAR_TarId">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">tarId</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
        </Sequence>
        <Sequence DisplayName="Set EIF details link">
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://{EIF_LINK} encoded to tokenPlaceholders" Item="http&amp;#58;//EIF_LINK">
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <If DisplayName="If EIF is with funds">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(tarId)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence DisplayName="Has tar associated">
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add EIF LINK to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}{1}#/details/eif-funds-details/{2}/{3}", webUrl, appRelativeUrl, eifId, tarId);</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence DisplayName="Does not have tar associated">
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add EIF LINK to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}{1}#/details/eif-details/{2}", webUrl, appRelativeUrl, eifId);</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF Staff Responsible">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="staffResponsibleName" />
          </Sequence.Variables>
          <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Staff Responsible Id" PropertyName="d/results/(0)/TAR_StaffResponsibleForGuestId">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p1:LookupSPUser DisplayName="Lookup Staff Responsible">
            <p1:LookupSPUser.PrincipalId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPUser.PrincipalId>
            <p1:LookupSPUser.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPUser.Result>
          </p1:LookupSPUser>
          <p:GetODataProperties DisplayName="Get Staff Responsible properties">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:String" x:Key="Title">
                <mca:CSharpReference x:TypeArguments="x:String">staffResponsibleName</mca:CSharpReference>
              </OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="Email">
                <mca:CSharpReference x:TypeArguments="x:String">emailAddress</mca:CSharpReference>
              </OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                <mca:CSharpReference x:TypeArguments="x:String">staffResponsibleLoginName</mca:CSharpReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
          <If DisplayName="If staff responsible has no email address OR no name">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(emailAddress) || string.IsNullOrEmpty(staffResponsibleName)</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error">
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address or no name", staffResponsibleLoginName);</mca:CSharpValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
                <TerminateWorkflow>
                  <TerminateWorkflow.Reason>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">string.Format("User {0} has no email address or no name", staffResponsibleLoginName);</mca:CSharpValue>
                    </InArgument>
                  </TerminateWorkflow.Reason>
                </TerminateWorkflow>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence DisplayName="Add tokens">
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {STAFF_RESPONSIBLE_FOR_GUEST} to tokenPlaceholders" Item="{}{STAFF_RESPONSIBLE_FOR_GUEST}">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add {STAFF_RESPONSIBLE_FOR_GUEST} encoded to tokenPlaceholders" Item="&amp;#123;STAFF_RESPONSIBLE_FOR_GUEST&amp;#125;">
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add staff responsible name to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">staffResponsibleName</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add staff responsible name to tokenValues">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">staffResponsibleName</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
                  </InArgument>
                </AddToCollection>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
        <Sequence DisplayName="Get EIF Destinations">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="destinationsCount" />
            <Variable x:TypeArguments="x:String" Name="destinations" />
          </Sequence.Variables>
          <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Destinations JSON" PropertyName="d/results/(0)/TAR_Destinations">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="x:String">
                <mca:CSharpReference x:TypeArguments="x:String">tokenValueString</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p:ParseDynamicValue DisplayName="Parse Destinations JSON">
            <p:ParseDynamicValue.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p:ParseDynamicValue.Result>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">tokenValueString</mca:CSharpValue>
            </InArgument>
          </p:ParseDynamicValue>
          <p:CountDynamicValueItems DisplayName="Count Destinations DynamicValueItems">
            <p:CountDynamicValueItems.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">destinationsCount</mca:CSharpReference>
              </OutArgument>
            </p:CountDynamicValueItems.Result>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
            </InArgument>
          </p:CountDynamicValueItems>
          <If DisplayName="If destinationsCount == 0">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">destinationsCount == 0</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory DisplayName="Log error" Message="No destinations introduced." />
                <TerminateWorkflow Reason="Invalid input data." />
              </Sequence>
            </If.Then>
          </If>
          <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build countryDirectorsLoginNames collection">
            <p:BuildCollection.Collection>
              <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">countryDirectorsLoginNames</mca:CSharpValue>
              </InArgument>
            </p:BuildCollection.Collection>
            <p:BuildCollection.Result>
              <OutArgument x:TypeArguments="sco:Collection(x:String)">
                <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">countryDirectorsLoginNames</mca:CSharpReference>
              </OutArgument>
            </p:BuildCollection.Result>
          </p:BuildCollection>
          <Assign DisplayName="Initialize index">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">0</InArgument>
            </Assign.Value>
          </Assign>
          <While DisplayName="Iterate over destinations dynamicValue ">
            <While.Variables>
              <Variable x:TypeArguments="x:String" Name="destinationsQuery" />
              <Variable x:TypeArguments="x:String" Name="directorQuery" />
              <Variable x:TypeArguments="p:DynamicValue" Name="userDetails" />
              <Variable x:TypeArguments="x:String" Name="userLoginName" />
            </While.Variables>
            <While.Condition>
              <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; destinationsCount</mca:CSharpValue>
            </While.Condition>
            <Sequence>
              <Assign DisplayName="Create query statement for country title">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">destinationsQuery</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/country/title", index);</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Create query statement for country director">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">directorQuery</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("({0})/country/director/Id", index);</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get destination from JSON">
                <p:GetDynamicValueProperty.PropertyName>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">destinationsQuery</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.PropertyName>
                <p:GetDynamicValueProperty.Result>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">tokenValueString</mca:CSharpReference>
                  </OutArgument>
                </p:GetDynamicValueProperty.Result>
                <p:GetDynamicValueProperty.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.Source>
              </p:GetDynamicValueProperty>
              <If DisplayName="If destinations is empty">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(destinations)</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">destinations</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">tokenValueString</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Then>
                <If.Else>
                  <Assign DisplayName="Add new destination">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">destinations</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">string.Format("{0}, {1}", destinations, tokenValueString);</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
              <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Country Director Id from JSON">
                <p:GetDynamicValueProperty.PropertyName>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">directorQuery</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.PropertyName>
                <p:GetDynamicValueProperty.Result>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpReference>
                  </OutArgument>
                </p:GetDynamicValueProperty.Result>
                <p:GetDynamicValueProperty.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.Source>
              </p:GetDynamicValueProperty>
              <If DisplayName="If there is a valid country director">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">tokenValueInt &gt; 0</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Sequence DisplayName="Lookup and Add CD">
                    <p1:LookupSPUser DisplayName="Lookup Country Director">
                      <p1:LookupSPUser.PrincipalId>
                        <InArgument x:TypeArguments="x:Int32">
                          <mca:CSharpValue x:TypeArguments="x:Int32">tokenValueInt</mca:CSharpValue>
                        </InArgument>
                      </p1:LookupSPUser.PrincipalId>
                      <p1:LookupSPUser.Result>
                        <OutArgument x:TypeArguments="p:DynamicValue">
                          <mca:CSharpReference x:TypeArguments="p:DynamicValue">userDetails</mca:CSharpReference>
                        </OutArgument>
                      </p1:LookupSPUser.Result>
                    </p1:LookupSPUser>
                    <p:GetODataProperties DisplayName="Get Country Director Login Name">
                      <p:GetODataProperties.Source>
                        <InArgument x:TypeArguments="p:DynamicValue">
                          <mca:CSharpValue x:TypeArguments="p:DynamicValue">userDetails</mca:CSharpValue>
                        </InArgument>
                      </p:GetODataProperties.Source>
                      <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                        <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                          <mca:CSharpReference x:TypeArguments="x:String">userLoginName</mca:CSharpReference>
                        </OutArgument>
                      </scg:Dictionary>
                    </p:GetODataProperties>
                    <AddToCollection x:TypeArguments="x:String" DisplayName="Add CD Login Name to collection">
                      <AddToCollection.Item>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">userLoginName</mca:CSharpValue>
                        </InArgument>
                      </AddToCollection.Item>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">countryDirectorsLoginNames</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection>
                  </Sequence>
                </If.Then>
              </If>
              <Assign DisplayName="Increase index">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">index + 1</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </While>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DESTINATIONS} to tokenPlaceholders" Item="{}{DESTINATIONS}">
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DESTINATIONS} encoded to tokenPlaceholders" Item="&amp;#123;DESTINATIONS&amp;#125;">
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add destinations to tokenValues">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">destinations</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add destinations to tokenValues">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">destinations</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
        </Sequence>
        <Sequence DisplayName="Get EIF Departure Date">
          <p:GetDynamicValueProperty x:TypeArguments="s:DateTime" DisplayName="Get Departure Date" PropertyName="d/results/(0)/TAR_DepartureDate">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="s:DateTime">
                <mca:CSharpReference x:TypeArguments="s:DateTime">tokenValueDateTime</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">eifDetails</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DEPARTURE_DATE} to tokenPlaceholders" Item="{}{DEPARTURE_DATE}">
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DEPARTURE_DATE} encoded to tokenPlaceholders" Item="&amp;#123;DEPARTURE_DATE&amp;#125;">
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add departure date to tokenValues">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">tokenValueDateTime.ToString("MM/dd/yyyy")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
          <AddToCollection x:TypeArguments="x:String" DisplayName="Add departure date to tokenValues">
            <AddToCollection.Item>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">tokenValueDateTime.ToString("MM/dd/yyyy")</mca:CSharpValue>
              </InArgument>
            </AddToCollection.Item>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
            </InArgument>
          </AddToCollection>
        </Sequence>
        <p:CountCollection x:TypeArguments="x:String" DisplayName="Count tokenPlaceholders">
          <p:CountCollection.Collection>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
            </InArgument>
          </p:CountCollection.Collection>
          <p:CountCollection.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">collectionSize</mca:CSharpReference>
            </OutArgument>
          </p:CountCollection.Result>
        </p:CountCollection>
        <Assign>
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">0</InArgument>
          </Assign.Value>
        </Assign>
        <While DisplayName="Iterate over tokenPlaceholders">
          <While.Variables>
            <Variable x:TypeArguments="x:String" Name="placeholder" />
            <Variable x:TypeArguments="x:String" Name="placeholderValue" />
          </While.Variables>
          <While.Condition>
            <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; collectionSize</mca:CSharpValue>
          </While.Condition>
          <Sequence>
            <p:GetItemFromCollection x:TypeArguments="x:String" DisplayName="Get item from tokenPlaceholders">
              <p:GetItemFromCollection.Index>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">index</mca:CSharpValue>
                </InArgument>
              </p:GetItemFromCollection.Index>
              <p:GetItemFromCollection.Result>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">placeholder</mca:CSharpReference>
                </OutArgument>
              </p:GetItemFromCollection.Result>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenPlaceholders</mca:CSharpValue>
              </InArgument>
            </p:GetItemFromCollection>
            <p:GetItemFromCollection x:TypeArguments="x:String" DisplayName="Get item from tokenValues">
              <p:GetItemFromCollection.Index>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">index</mca:CSharpValue>
                </InArgument>
              </p:GetItemFromCollection.Index>
              <p:GetItemFromCollection.Result>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">placeholderValue</mca:CSharpReference>
                </OutArgument>
              </p:GetItemFromCollection.Result>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">tokenValues</mca:CSharpValue>
              </InArgument>
            </p:GetItemFromCollection>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">submittedEmailSubject</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">submittedEmailSubject.Replace(placeholder, placeholderValue);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">submittedEmailContent</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">submittedEmailContent.Replace(placeholder, placeholderValue);</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <mca:CSharpValue x:TypeArguments="x:Int32">index + 1</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </While>
      </Sequence>
      <Sequence DisplayName="Send EIF Submitted Alert">
        <Sequence.Variables>
          <Variable x:TypeArguments="sco:Collection(x:String)" Name="toCollection" />
          <Variable x:TypeArguments="sco:Collection(x:String)" Name="ccCollection" />
        </Sequence.Variables>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build email To collection">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">toCollection</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">toCollection</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
          <p:BuildCollection.Values>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">requesterLoginName</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Values>
        </p:BuildCollection>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build email Cc collection">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">ccCollection</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">ccCollection</mca:CSharpReference>
            </OutArgument>
          </p:BuildCollection.Result>
          <p:BuildCollection.Values>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">staffResponsibleLoginName</mca:CSharpValue>
            </InArgument>
          </p:BuildCollection.Values>
        </p:BuildCollection>
        <If DisplayName="If additionalStaffMemberLoginName is not empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">!string.IsNullOrEmpty(additionalStaffMemberLoginName)</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">additionalStaffMemberLoginName</mca:CSharpValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccCollection</mca:CSharpValue>
              </InArgument>
            </AddToCollection>
          </If.Then>
        </If>
        <Sequence DisplayName="Get GSS Approvers emails">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="gssApproversGroupId" />
            <Variable x:TypeArguments="p:DynamicValue" Name="properties" />
            <Variable x:TypeArguments="x:Int32" Name="membersCount" />
            <Variable x:TypeArguments="x:Int32" Name="index" />
          </Sequence.Variables>
          <p1:LookupSPPrincipalId AddToUserInfoList="{x:Null}" DisplayName="Get GSS Approvers Group Id" UserName="GSS Approvers">
            <p1:LookupSPPrincipalId.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">gssApproversGroupId</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPPrincipalId.Result>
          </p1:LookupSPPrincipalId>
          <p1:LookupSPGroupMembers DisplayName="Lookup GSS Approvers members">
            <p1:LookupSPGroupMembers.GroupPrincipalId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">gssApproversGroupId</mca:CSharpValue>
              </InArgument>
            </p1:LookupSPGroupMembers.GroupPrincipalId>
            <p1:LookupSPGroupMembers.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpReference>
              </OutArgument>
            </p1:LookupSPGroupMembers.Result>
          </p1:LookupSPGroupMembers>
          <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get GSS Members" PropertyName="d/results">
            <p:GetDynamicValueProperty.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpReference x:TypeArguments="p:DynamicValue">properties</mca:CSharpReference>
              </OutArgument>
            </p:GetDynamicValueProperty.Result>
            <p:GetDynamicValueProperty.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
              </InArgument>
            </p:GetDynamicValueProperty.Source>
          </p:GetDynamicValueProperty>
          <p:CountDynamicValueItems DisplayName="Count GSS Members">
            <p:CountDynamicValueItems.Result>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">membersCount</mca:CSharpReference>
              </OutArgument>
            </p:CountDynamicValueItems.Result>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">properties</mca:CSharpValue>
            </InArgument>
          </p:CountDynamicValueItems>
          <Assign DisplayName="Initialize index">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">0;</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <While DisplayName="Iterate over GSS group members">
            <While.Variables>
              <Variable x:TypeArguments="x:String" Name="memberLoginName" />
            </While.Variables>
            <While.Condition>
              <mca:CSharpValue x:TypeArguments="x:Boolean">index &lt; membersCount</mca:CSharpValue>
            </While.Condition>
            <Sequence>
              <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Member LoginName">
                <p:GetDynamicValueProperty.PropertyName>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">string.Format("d/results({0})/LoginName", index);</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.PropertyName>
                <p:GetDynamicValueProperty.Result>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">memberLoginName</mca:CSharpReference>
                  </OutArgument>
                </p:GetDynamicValueProperty.Result>
                <p:GetDynamicValueProperty.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dynamicValue</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.Source>
              </p:GetDynamicValueProperty>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add member login name to ccCollection">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">memberLoginName</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccCollection</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
              <Assign DisplayName="Increment index">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">index</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">index + 1;</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </While>
        </Sequence>
        <Sequence DisplayName="Add Country Directors to Cc">
          <ForEach x:TypeArguments="x:String" DisplayName="ForEach Country Director Login Name">
            <ForEach.Values>
              <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:String)">countryDirectorsLoginNames</mca:CSharpValue>
              </InArgument>
            </ForEach.Values>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" Name="cdLoginName" />
              </ActivityAction.Argument>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add Country Director Login Name to Cc">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">cdLoginName</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">ccCollection</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </ActivityAction>
          </ForEach>
        </Sequence>
        <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Submitted Email Alert">
          <p1:Email.Body>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">submittedEmailContent</mca:CSharpValue>
            </InArgument>
          </p1:Email.Body>
          <p1:Email.CC>
            <InArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">ccCollection</mca:CSharpValue>
            </InArgument>
          </p1:Email.CC>
          <p1:Email.Subject>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">submittedEmailSubject</mca:CSharpValue>
            </InArgument>
          </p1:Email.Subject>
          <p1:Email.To>
            <InArgument x:TypeArguments="sco:Collection(x:String)">
              <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">toCollection</mca:CSharpValue>
            </InArgument>
          </p1:Email.To>
        </p1:Email>
      </Sequence>
      <p1:WriteToHistory DisplayName="WriteToHistory End" Message="WF Ended" />
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </Sequence>
  </stwe:Workflow.Implementation>
</stwe:Workflow>