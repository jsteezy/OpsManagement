<Activity mc:Ignorable="sads" x:Class="SCI.TAR.Workflows.BudgetApprovalWorkflow.Workflow"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:made="clr-namespace:Microsoft.Activities.Design.ExpressionTranslation;assembly=Microsoft.Activities.Design"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities"
 xmlns:p1="wf://workflow.windows.net/$Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Sequence DisplayName="Main Sequence" sads:DebugSymbol.Symbol="9xAdpspnEnHmpHmMCMdPdK4UYEQ6XFByb2plY3RzXFNDSS5UQVJcdGFyXFNoYXJlUG9pbnRcU0NJLlRBUi5Xb3JrZmxvd3NcU0NJLlRBUi5Xb3JrZmxvd3NcVEFSV29ya2Zsb3dcV29ya2Zsb3cueGFtbMgCMgP7Fg4CAQFfBWURAwGMCmYF/A8QAwGAA/0PBa8QEAMB6gKwEAX1EBADAcoC9hAFuRIQAwH3AboSBdoVCgIBRtsVBfkWEAIBA28HehsDAYcKeweGARsDAYIKhwEHzgESAwHdCc8BB5YCEgMBuAmXAgfeAhIDAZMJ3wIHpgMSAwHuCKcDB+QDEgMB1gjlAweiBBIDAb4IowQH0gQSAwGrCNMEB7kFEgMB+Qe6BQfHBRIDAfIHyAUHngcMAwGLB58HB5IIEgMB0QaTCAfRCBIDAbgG0ggHkAkSAwGfBpEJB5UKEgMBzAWWCgfhDBIDAbwE4gwHlQ4SAwH6A5YOB8QOEgMB4QPFDgfSDhIDAdoD0w4H2Q4aAwHXA9oOB+UOGwMB0gPmDgf7Dw8DAYED/g8HiRAbAwH7AooQB5gQGwMB9AKZEAeuEBIDAesCsRAHyRAbAwHlAsoQB/QQFwMBywL3EAe4EgwDAfgBwRIJ2BUUAgFJ3BUH4BUZAgFD4RUH5RUZAgFA5hUH9hUbAgE59xUH4hYSAgEN4xYH+BYSAgEEiAEJkwEhAwH8CZQBCaABDgMB9AmhAQmxAR8DAe4JsgEJwAEgAwHnCcEBCc0BDgMB3gnQAQnbASEDAdcJ3AEJ6AEOAwHPCekBCfkBHwMByQn6AQmIAiADAcIJiQIJlQIOAwG5CZgCCaMCIQMBsgmkAgmwAg4DAaoJsQIJwQIfAwGkCcICCdACIAMBnQnRAgndAg4DAZQJ4AIJ6wIhAwGNCewCCfgCDgMBhQn5AgmJAx8DAf8IigMJmAMgAwH4CJkDCaUDDgMB7wioAwm4AyEDAegIuQMJ4wMOAwHXCOYDCfYDIQMB0Aj3AwmhBA4DAb8IpAQJuAQfAwG5CLkECcQEIQMBtAjFBAnRBA4DAawI1AQJ3wQlAwGlCOAECesEGwMBoAjsBAn9BCADAZcI/gQJuAUOAwH6B7sFCcYFJQMB8wfPBQujBhYDAcgHpgYLnAcWAwGOB6AHCasHJQMBhQesBwm3BxsDAYAHuAcJyQcgAwH3BsoHCeIHDgMB7QbjBwmRCA4DAdIGlAgJnwglAwHLBqAICdAIDgMBuQbTCAneCCUDAbIG3wgJjwkOAwGgBpIJCZ0JJQMBmQaeCQmpCRIDAZQGqgkJlAoOAwHNBZsKCaYKJQMBxgWnCgmwCh8DAcEFsQoJugokAwG8BbsKCcYKHQMBtwXHCgnSCh0DAbIF0woJ3woOAwGqBeAKCekKEgMBpgXqCgnCDBEDAc8EwwwJxwwbAwHLBMgMCcwMGwMBxwTNDAnWDBsDAcIE1wwJ4AwbAwG9BOMMCe4MHQMBtwTvDAmUDhMDAfsDmg4JpQ4lAwH0A6YOCaoOGwMB8AOrDgmvDhsDAewDsA4JuQ4bAwHnA7oOCcMOGwMB4gPGDgnRDiUDAdsD7w4J+g8UAwGGA8IQDcYQKwMB6AL+EAu2EhYDAfsBxRILvxMWAwG/AcATC9ATFgMBuAHREwuaFBYDAZgBmxQL1xUWAgFK+BUJixYdAgEwjBYJnhYOAgEonxYJsRYOAgEgshYJyRYUAgEXyhYJ4RYUAgEOmwENngEYAwH3CcgBDcsBGAMB4gnjAQ3mARgDAdIJkAINkwIYAwG9CasCDa4CGAMBrQnYAg3bAhgDAZgJ8wIN9gIYAwGICaADDaMDGAMB8wjAAw3eAxgDAdwI4QMN4QOsAQMB2gj+Aw2cBBgDAcQInwQNnwStAQMBwgjMBA3PBBgDAa8IhQUNlAUYAwGQCJcFDbYFGAMB/QfTBQ34BRgDAeEH+QUNhAYpAwHbB4UGDYkGHwMB1weKBg2OBh8DAdMHjwYNmAYfAwHOB5kGDaIGHwMByQenBg2yBikDAcIHswYNvgYfAwG9B78GDdAGJAMBtAfRBg3pBhIDAaoH6gYNmwcSAwGPB9EHDeAHGAMB8AbqBw3tBxgDAegG8AcNjwgYAwHVBqcIDcAIGAMBwAbDCA3OCBYDAbwG5ggN/wgYAwGnBoIJDY0JFgMBowaxCQ20CRgDAY8GtwkNkgoYAwHQBdoKDd0KGAMBrQXzCgvBDBYDAdME+QwNkg4YAwH8A/AOC/4OJQMBywP/DguNDyUDAcQDjg8LmQ8UAwG9A5oPC6UPFAMBtgOmDwuxDxQDAa8Dsg8LvQ8UAwGoA74PC8kPFAMBoQPKDwvVDxQDAZoD1g8L4Q8UAwGTA+IPC+0PFAMBjAPuDwv5DxQDAYcD/xANjxEjAwHDApARDZsRJAMBvgKcEQ2nERYDAbcCqBENsxEWAwGwArQRDbgRHwMBrQK5EQ3EESEDAagCxRENghIYAwGNAoMSDZgSGAMBhAKZEg20EiEDAf4BtRINtRKIAQMB/AHLEg3REiYDAfMB0hIN3RInAwHuAd4SDekSKQMB6AHqEg3zEigDAeMB9BIN/xIWAwHfAYATDYQTHwMB3AGFEw2JEx8DAdkBihMNkBMhAwHWAZETDb4TFQMBwAHWEw3uEyEDAbMB7xMNmRQdAwGZAZwUDdYVEgIBS5MWDZwWHwIBK6YWDa8WHwIBI7MWC8gWFQIBGMsWC+AWFQIBD5wBD5wBoAEDAfoJnQEPnQF3AwH4CckBD8kBpAEDAeUJygEPygF3AwHjCeQBD+QBowEDAdUJ5QEP5QF4AwHTCZECD5ECpwEDAcAJkgIPkgJ4AwG+CawCD6wCnwEDAbAJrQIPrQJ4AwGuCdkCD9kCowEDAZsJ2gIP2gJ4AwGZCfQCD/QCnwEDAYsJ9QIP9QJ4AwGJCaEDD6EDowEDAfYIogMPogN4AwH0CMEDD9EDJQMB4gjSAw/dAyYDAd0I/wMPjwQlAwHKCJAED5sEJgMBxQjNBA/NBJABAwGyCM4ED84EeQMBsAiGBQ+MBSMDAZQIjQUPkwUjAwGRCJgFD5wFIQMBjAidBQ+hBSEDAYgIogUPqwUhAwGDCKwFD7UFIQMB/gfUBQ/fBSsDAewH4AUP6wUhAwHnB+wFD/cFJgMB4gfYBhHnBhwDAa0H8QYR9AYcAwGlB/cGEZkHHAMBkgfSBw/YByMDAfQG2QcP3wcjAwHxBusHD+sHmAEDAesG7AcP7Ad3AwHpBvEHD/UHIQMB5Ab2Bw/6ByEDAeAG+wcPhAghAwHbBoUID44IIQMB1gaoCA+zCCEDAcYGtAgPvwgmAwHBBucID/IIIQMBrQbzCA/+CCYDAagGsgkPsgmKAQMBkgazCQ+zCXcDAZAGuAkPvAkhAwGLBr0JD8EJIQMBhwbCCQ/GCSEDAYMGxwkPywkhAwH/BcwJD9AJIQMB+wXRCQ/VCSEDAfcF1gkP3wkhAwHyBeAJD+kJIQMB7QXqCQ/zCSEDAeYF9AkP/QkhAwHfBf4JD4cKIQMB2AWICg+RCiEDAdEF2woP2wqWAQMBsAXcCg/cCncDAa4F9woNggsWAwGhBYMLDY4LFgMBnAWPCw2aCxYDAZcFmwsNqwspAwGQBawLDc4LEgMBggXPCw3fCykDAfsE4AsNkAwSAwHoBJEMDaEMKQMB4QSiDA20DBIDAdkEtQwNwAwWAwHUBPoMD48NJwMBrgSQDQ+RDhQDAf0DxhEPyhEhAwGlAssRD9sRIwMBngLcEQ/uERQDAZYC7xEPgRIUAwGOAqoSE7ESMQMBgQKVEw+9ExoDAcQB5xMT6xMxAwG2AaMUEdQVHAIBTr0WD8YWIQIBGdUWD94WIQIBENkGE98GJwMBsQfgBhPmBicDAa4H8gYT8gaWAQMBqAfzBhPzBnwDAaYH+wYT/wYlAwGhB4AHE4QHJQMBnQeFBxOOByUDAZgHjwcTmAclAwGTB7MLEb4LGgMBiwXBCxHMCxoDAYUF5wsRjgwcAwHrBKkMEbIMIwMB3ASXDROPDh4DAYAE4xET7BElAwGZAvYRE/8RJQMBkQKWExGmEy0DAc8BpxMRsBMjAwHKAbETEbwTGgMBxQGkFBO0FCkDAZEBtRQTwBQqAwGMAcEUE8wUHAMBhwHNFBPYFBwDAYAB2RQT3RQlAgF93hQT4hQlAgF64xQT7hQnAgF17xQT+hQnAgFw+xQTjRUYAgFojhUToBUYAgFgoRUTthUeAgFXtxUT0hUnAgFR0xUT0xWMAQIBT+wLE/cLJQMB9gT4CxODDCoDAfEEhAwTjQwlAwHsBJ0NFa0NKwMBqASuDRW5DSwDAaMEug0Vjg4aAwGBBIIVF4sVKQIBa5UVF54VKQIBY8gVGc8VNwIBVMENGYwOJAMBhATCDRvSDTEDAZ0E0w0b3g0yAwGYBN8NG4sOIAMBhQTmDR+JDioDAYgE5w0h8g0zAwGTBPMNIf4NOAMBjgT/DSGIDjMDAYkE">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID3" Name="emailTemplateId" />
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID4" Name="dynamicValue" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID5" Name="emailSubject" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID6" Name="emailContent" />
      <Variable x:TypeArguments="x:String" Name="myUser" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID52" Name="toRecipients" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID20" Name="tokenValue" />
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID16" Name="tarDetails" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID13" Name="tokenValueInt" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID0" Name="webUrl" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID22" Name="travellerLoginName" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID25" Name="budgetApproverLoginName" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID18" Name="requesterLoginName" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID19" Name="emailAddress">
        <Variable.Default>
          <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Empty">
            <Literal x:TypeArguments="x:String" Value="" />
          </p:ExpressionContainerValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID54" Name="taskBudgetApprovalOutcome" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID53" Name="ccRecipients" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID55" Name="taskBudgetApprovalId" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID9" Name="rejectedEmailSubject" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID10" Name="rejectedEmailContent" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID62" Name="taskGSSApprovalId" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID61" Name="taskGSSApprovalOutcome" />
      <Variable x:TypeArguments="x:Boolean" x:Name="__ReferenceID46" Name="requiresGssApproval" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID56" Name="taskDescription" />
      <Variable x:TypeArguments="s:Guid" x:Name="__ReferenceID47" Name="tasksListGuid" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID24" Name="budgetApproverName" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID11" Name="approvedEmailSubject" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID12" Name="approvedEmailContent" />
      <Variable x:TypeArguments="s:DateTime" Name="tokenValueDateTime" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID7" Name="gssEmailSubject" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID8" Name="gssEmailContent" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID28" Name="tarId" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID1" Name="tokenPlaceholders" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID2" Name="tokenValues" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID26" Name="travelCoordinatorLoginName" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID30" Name="countryDirectorsLoginNames" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID27" Name="additionalStaffMemberLoginName" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID40" Name="securityDirectorsLoginNames" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID15" Name="diversityLoginName" />
    </Sequence.Variables>
    <p1:WebUri DisplayName="Get WebUri">
      <p1:WebUri.Result>
        <OutArgument x:TypeArguments="x:String">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="webUrl">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="webUrl">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID0}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="webUrl" />
          </p:ExpressionContainerReference>
        </OutArgument>
      </p1:WebUri.Result>
    </p1:WebUri>
    <Sequence DisplayName="Initialization">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:Boolean" x:Name="__ReferenceID17" Name="dynamicValueIsEmpty" />
        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID37" Name="destinations" />
        <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID48" Name="collectionSize" />
        <Variable x:TypeArguments="x:String" x:Name="__ReferenceID14" Name="appRelativeUrl" />
        <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID31" Name="restrictedTravelCountries" />
        <Variable x:TypeArguments="x:Boolean" x:Name="__ReferenceID21" Name="tarFromEif" />
      </Sequence.Variables>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize tokenPlaceholders">
        <p:BuildCollection.Collection>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="tokenPlaceholders">
                  <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:BuildCollection.Collection>
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="tokenPlaceholders">
                  <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p:BuildCollection.Result>
      </p:BuildCollection>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize tokenValues">
        <p:BuildCollection.Collection>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="tokenValues">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="tokenValues">
                  <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID2}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="tokenValues" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:BuildCollection.Collection>
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="tokenValues">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="tokenValues">
                  <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="tokenValues" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p:BuildCollection.Result>
      </p:BuildCollection>
      <Sequence DisplayName="Get Submitted Email Template">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" PropertyName="LinkTitle" PropertyValue="TAR_Submitted">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="emailTemplateId &lt; 1">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsLessThan x:TypeArguments="x:Int32">
                  <p:IsLessThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
                    </InArgument>
                  </p:IsLessThan.Left>
                  <p:IsLessThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                  </p:IsLessThan.Right>
                </p:IsLessThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Cannot find submitted email template." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template ">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailSubject">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="emailSubject">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailSubject" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailContent">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="emailContent">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailContent" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content to the email">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(emailSubject) || string.IsNullOrEmpty(emailContent)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="emailSubject">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                  </InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="emailContent">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:Or>
                  <p:Or.Left>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailSubject" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Left>
                  <p:Or.Right>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailContent" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Right>
                </p:Or>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Invalid submitted email template details." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get GSS Approval Email Template">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" PropertyName="LinkTitle" PropertyValue="TAR_GSSApproval">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="emailTemplateId &lt; 1">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsLessThan x:TypeArguments="x:Int32">
                  <p:IsLessThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
                    </InArgument>
                  </p:IsLessThan.Left>
                  <p:IsLessThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                  </p:IsLessThan.Right>
                </p:IsLessThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Cannot find gss approval email template." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template ">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="gssEmailSubject">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="gssEmailSubject">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="gssEmailSubject" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="gssEmailContent">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="gssEmailContent">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID8}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="gssEmailContent" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content to the email">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(gssEmailSubject) || string.IsNullOrEmpty(gssEmailContent)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="gssEmailSubject">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                  </InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="gssEmailContent">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID8}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:Or>
                  <p:Or.Left>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="gssEmailSubject" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Left>
                  <p:Or.Right>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="gssEmailContent" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Right>
                </p:Or>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Invalid gss approval email template details." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Rejected Email Template">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" PropertyName="LinkTitle" PropertyValue="TAR_Rejected">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="emailTemplateId &lt; 1">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsLessThan x:TypeArguments="x:Int32">
                  <p:IsLessThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
                    </InArgument>
                  </p:IsLessThan.Left>
                  <p:IsLessThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                  </p:IsLessThan.Right>
                </p:IsLessThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Cannot find rejected email template." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template ">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailSubject">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailSubject">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID9}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailSubject" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content in the email">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(rejectedEmailSubject) || string.IsNullOrEmpty(rejectedEmailContent)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailSubject">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID9}" />
                  </InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:Or>
                  <p:Or.Left>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailSubject" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Left>
                  <p:Or.Right>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Right>
                </p:Or>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Invalid rejected email template details." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Approved Email Template">
        <p1:LookupSPListItemId DisplayName="Get Email Template Id" PropertyName="LinkTitle" PropertyValue="TAR_Approved">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If email template not found">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="emailTemplateId &lt; 1">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsLessThan x:TypeArguments="x:Int32">
                  <p:IsLessThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
                    </InArgument>
                  </p:IsLessThan.Left>
                  <p:IsLessThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                  </p:IsLessThan.Right>
                </p:IsLessThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Cannot find approved email template." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Email Template ">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="emailTemplateId">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="emailTemplateId">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="emailTemplateId" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TAREmailTemplates;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TAREmailTemplates;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Get Email Template details">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailSubject">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="approvedEmailSubject">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="approvedEmailSubject">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="approvedEmailSubject" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TAR_EmailContent">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="approvedEmailContent">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="approvedEmailContent">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="approvedEmailContent" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If there is no subject or content in the email">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(approvedEmailSubject) || string.IsNullOrEmpty(approvedEmailContent)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="approvedEmailSubject">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                  </InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="approvedEmailContent">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:Or>
                  <p:Or.Left>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="approvedEmailSubject" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Left>
                  <p:Or.Right>
                    <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                      <p:IsEmptyString>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="approvedEmailContent" />
                        </InArgument>
                      </p:IsEmptyString>
                    </InArgument>
                  </p:Or.Right>
                </p:Or>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Invalid approved email template details." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR WF Settings">
        <p1:LookupSPListItemId DisplayName="Lookup TARSettings App relative path" PropertyValue="AppRelativeUrl">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TARSettings;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TARSettings;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.PropertyName>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;LinkTitle&quot;" Expression="LinkTitle" />
            </InArgument>
          </p1:LookupSPListItemId.PropertyName>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If setting exists">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValueInt &gt; 0">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsGreaterThan x:TypeArguments="x:Int32">
                  <p:IsGreaterThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </InArgument>
                  </p:IsGreaterThan.Left>
                  <p:IsGreaterThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                  </p:IsGreaterThan.Right>
                </p:IsGreaterThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup TAR Setting">
                <p1:LookupSPListItem.ItemId>
                  <InArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPListItem.ItemId>
                <p1:LookupSPListItem.ListId>
                  <InArgument x:TypeArguments="s:Guid">
                    <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TARSettings;}&quot;)">
                      <p:ParseGuid Value="{}{$ListId:Lists/TARSettings;}" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPListItem.ListId>
                <p1:LookupSPListItem.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p1:LookupSPListItem.Result>
              </p1:LookupSPListItem>
              <p:GetODataProperties DisplayName="Get App relative URL">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="TAR_SettingValue">
                    <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="appRelativeUrl">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:String" x:Key="appRelativeUrl">
                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID14}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="appRelativeUrl" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <p1:WriteToHistory DisplayName="Log error" Message="AppRelativeUrl does not exist in TAR Settings list." />
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Diversity User">
        <p1:LookupSPListItemId DisplayName="Lookup TARSettings Diversity Inbox" PropertyValue="Diversity_Inbox">
          <p1:LookupSPListItemId.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TARSettings;}&quot;)">
                <p:ParseGuid Value="{}{$ListId:Lists/TARSettings;}" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItemId.ListId>
          <p1:LookupSPListItemId.PropertyName>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;LinkTitle&quot;" Expression="LinkTitle" />
            </InArgument>
          </p1:LookupSPListItemId.PropertyName>
          <p1:LookupSPListItemId.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItemId.Result>
        </p1:LookupSPListItemId>
        <If DisplayName="If Diversity User exists">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValueInt &gt; 0">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsGreaterThan x:TypeArguments="x:Int32">
                  <p:IsGreaterThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </InArgument>
                  </p:IsGreaterThan.Left>
                  <p:IsGreaterThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                  </p:IsGreaterThan.Right>
                </p:IsGreaterThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup TAR Setting">
                <p1:LookupSPListItem.ItemId>
                  <InArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPListItem.ItemId>
                <p1:LookupSPListItem.ListId>
                  <InArgument x:TypeArguments="s:Guid">
                    <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/TARSettings;}&quot;)">
                      <p:ParseGuid Value="{}{$ListId:Lists/TARSettings;}" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPListItem.ListId>
                <p1:LookupSPListItem.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p1:LookupSPListItem.Result>
              </p1:LookupSPListItem>
              <p:GetODataProperties DisplayName="Get Diversity User">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="TAR_SettingValue">
                    <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="diversityLoginName">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:String" x:Key="diversityLoginName">
                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="diversityLoginName" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <p1:WriteToHistory DisplayName="Log error" Message="Diversity_Inbox does not exist in TAR Settings list." />
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Request item">
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Current TAR item">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                <p1:GetCurrentItemId />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                <p1:GetCurrentListId />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:IsEmptyDynamicValue DisplayName="Check if empty tarDetails">
          <p:IsEmptyDynamicValue.Input>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:IsEmptyDynamicValue.Input>
          <p:IsEmptyDynamicValue.Result>
            <OutArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerReference x:TypeArguments="x:Boolean" DisplayName="dynamicValueIsEmpty">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Boolean" x:Key="dynamicValueIsEmpty">
                    <VariableReference x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID17}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Boolean" ArgumentName="dynamicValueIsEmpty" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:IsEmptyDynamicValue.Result>
        </p:IsEmptyDynamicValue>
        <If DisplayName="If tarDetails is empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="dynamicValueIsEmpty">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="dynamicValueIsEmpty">
                    <VariableValue x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID17}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Boolean" ArgumentName="dynamicValueIsEmpty" />
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="No TAR Request found." />
              <TerminateWorkflow Reason="No TAR Request found." />
            </Sequence>
          </If.Then>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Requester">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Requester Id" PropertyName="d/results/(0)/TAR_RequesterId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <p1:LookupSPUser DisplayName="Lookup Requester">
          <p1:LookupSPUser.PrincipalId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPUser.PrincipalId>
          <p1:LookupSPUser.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPUser.Result>
        </p1:LookupSPUser>
        <p:GetODataProperties DisplayName="Get Requester properties">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="requesterLoginName">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="requesterLoginName">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="requesterLoginName" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Email">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailAddress">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="emailAddress">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailAddress" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Title">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tokenValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="tokenValue">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="tokenValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If Email is empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(emailAddress)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="emailAddress">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsEmptyString>
                  <InArgument x:TypeArguments="x:String">
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailAddress" />
                  </InArgument>
                </p:IsEmptyString>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error">
                <p1:WriteToHistory.Message>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;User {0} has no email address&quot;, requesterLoginName);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="requesterLoginName">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID18}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="User {0} has no email address">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="requesterLoginName" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:WriteToHistory.Message>
              </p1:WriteToHistory>
              <TerminateWorkflow>
                <TerminateWorkflow.Reason>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;User {0} has no email address&quot;, requesterLoginName);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="requesterLoginName">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID18}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="User {0} has no email address">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="requesterLoginName" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </TerminateWorkflow.Reason>
              </TerminateWorkflow>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {REQUESTER} to tokenPlaceholders" Item="{}{REQUESTER}">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {REQUESTER} encoded to tokenPlaceholders" Item="&amp;#123;REQUESTER&amp;#125;">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add requester to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add requester to tokenValues for encoding">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR FromEif">
        <p:GetDynamicValueProperty x:TypeArguments="x:Boolean" DisplayName="Get FromEif " PropertyName="d/results/(0)/TAR_FromEif">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerReference x:TypeArguments="x:Boolean" DisplayName="tarFromEif">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Boolean" x:Key="tarFromEif">
                    <VariableReference x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID21}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Boolean" ArgumentName="tarFromEif" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
      </Sequence>
      <If DisplayName="If TAR is from EIF">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tarFromEif">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:Boolean" x:Key="tarFromEif">
                  <VariableValue x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID21}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:Boolean" ArgumentName="tarFromEif" />
            </p:ExpressionContainerValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence DisplayName="Get TAR Guest Traveller as Traveller">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID23" Name="tarGuestTraveller" />
            </Sequence.Variables>
            <Sequence DisplayName="Get TAR Traveller LoginName for email">
              <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Traveller Id" PropertyName="d/results/(0)/TAR_TravellerId">
                <p:GetDynamicValueProperty.Result>
                  <OutArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p:GetDynamicValueProperty.Result>
                <p:GetDynamicValueProperty.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                          <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:GetDynamicValueProperty.Source>
              </p:GetDynamicValueProperty>
              <p1:LookupSPUser DisplayName="Lookup Traveller">
                <p1:LookupSPUser.PrincipalId>
                  <InArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPUser.PrincipalId>
                <p1:LookupSPUser.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p1:LookupSPUser.Result>
              </p1:LookupSPUser>
              <p:GetODataProperties DisplayName="Get Traveller Login Name">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                    <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="travellerLoginName">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:String" x:Key="travellerLoginName">
                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="travellerLoginName" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
            <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Guest Traveller name" PropertyName="d/results/(0)/TAR_GuestTraveller">
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tarGuestTraveller">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="tarGuestTraveller">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="tarGuestTraveller" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} to tokenPlaceholders" Item="{}{TRAVELLER}">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                </p:ExpressionContainerValue>
              </InArgument>
            </AddToCollection>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} encoded to tokenPlaceholders" Item="&amp;#123;TRAVELLER&amp;#125;">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                </p:ExpressionContainerValue>
              </InArgument>
            </AddToCollection>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tarGuestTraveller">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="tarGuestTraveller">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="tarGuestTraveller" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                </p:ExpressionContainerValue>
              </InArgument>
            </AddToCollection>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues for encoding">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tarGuestTraveller">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="tarGuestTraveller">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="tarGuestTraveller" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                </p:ExpressionContainerValue>
              </InArgument>
            </AddToCollection>
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Get TAR Traveller as Traveller ">
            <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Traveller Id" PropertyName="d/results/(0)/TAR_TravellerId">
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <p1:LookupSPUser DisplayName="Lookup Traveller">
              <p1:LookupSPUser.PrincipalId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:LookupSPUser.PrincipalId>
              <p1:LookupSPUser.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p1:LookupSPUser.Result>
            </p1:LookupSPUser>
            <p:GetODataProperties DisplayName="Get Traveller Name">
              <p:GetODataProperties.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetODataProperties.Source>
              <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                <OutArgument x:TypeArguments="x:String" x:Key="Title">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tokenValue">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="tokenValue">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="tokenValue" />
                  </p:ExpressionContainerReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="travellerLoginName">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="travellerLoginName">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="travellerLoginName" />
                  </p:ExpressionContainerReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="Email">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailAddress">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="emailAddress">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailAddress" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </scg:Dictionary>
            </p:GetODataProperties>
            <If DisplayName="If Email is empty">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(emailAddress)">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="emailAddress">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:IsEmptyString>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailAddress" />
                      </InArgument>
                    </p:IsEmptyString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence>
                  <p1:WriteToHistory DisplayName="Log error">
                    <p1:WriteToHistory.Message>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;User {0} has no email address&quot;, travellerLoginName);">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:Object" x:Key="travellerLoginName">
                              <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID22}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <p:FormatString Format="User {0} has no email address">
                            <InArgument x:TypeArguments="x:Object">
                              <ArgumentValue x:TypeArguments="x:Object" ArgumentName="travellerLoginName" />
                            </InArgument>
                          </p:FormatString>
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:WriteToHistory.Message>
                  </p1:WriteToHistory>
                  <TerminateWorkflow>
                    <TerminateWorkflow.Reason>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;User {0} has no email address&quot;, travellerLoginName);">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:Object" x:Key="travellerLoginName">
                              <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID22}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <p:FormatString Format="User {0} has no email address">
                            <InArgument x:TypeArguments="x:Object">
                              <ArgumentValue x:TypeArguments="x:Object" ArgumentName="travellerLoginName" />
                            </InArgument>
                          </p:FormatString>
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </TerminateWorkflow.Reason>
                  </TerminateWorkflow>
                </Sequence>
              </If.Then>
            </If>
            <If DisplayName="If Traveller Name is empty">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(tokenValue)">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:IsEmptyString>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                      </InArgument>
                    </p:IsEmptyString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence>
                  <p1:WriteToHistory DisplayName="Log error" Message="Invalid traveller name." />
                  <TerminateWorkflow Reason="Invalid input data." />
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence>
                  <Sequence.Variables>
                    <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Name="dict" />
                  </Sequence.Variables>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} to tokenPlaceholders" Item="{}{TRAVELLER}">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TRAVELLER} encoded to tokenPlaceholders" Item="&amp;#123;TRAVELLER&amp;#125;">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add traveller to tokenValues for encoding">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </If.Else>
      </If>
      <Sequence DisplayName="Get TAR Budget Approver ">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Budget Approver Id" PropertyName="d/results/(0)/TAR_BudgetApproverId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <p1:LookupSPUser DisplayName="Lookup Budget Approver">
          <p1:LookupSPUser.PrincipalId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPUser.PrincipalId>
          <p1:LookupSPUser.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p1:LookupSPUser.Result>
        </p1:LookupSPUser>
        <p:GetODataProperties DisplayName="Get Budget Approver Name">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="Title">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="budgetApproverName">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="budgetApproverName">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="budgetApproverName" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="budgetApproverLoginName">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="budgetApproverLoginName">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="budgetApproverLoginName" />
              </p:ExpressionContainerReference>
            </OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Email">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailAddress">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="emailAddress">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailAddress" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <If DisplayName="If Email is empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(emailAddress)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="emailAddress">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsEmptyString>
                  <InArgument x:TypeArguments="x:String">
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailAddress" />
                  </InArgument>
                </p:IsEmptyString>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error">
                <p1:WriteToHistory.Message>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;User {0} has no email address&quot;, budgetApproverLoginName);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="budgetApproverLoginName">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID25}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="User {0} has no email address">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="budgetApproverLoginName" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:WriteToHistory.Message>
              </p1:WriteToHistory>
              <TerminateWorkflow>
                <TerminateWorkflow.Reason>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;User {0} has no email address&quot;, budgetApproverLoginName);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="budgetApproverLoginName">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID25}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="User {0} has no email address">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="budgetApproverLoginName" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </TerminateWorkflow.Reason>
              </TerminateWorkflow>
            </Sequence>
          </If.Then>
        </If>
        <If DisplayName="If Budget Approver Name is empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(budgetApproverName)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="budgetApproverName">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsEmptyString>
                  <InArgument x:TypeArguments="x:String">
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverName" />
                  </InArgument>
                </p:IsEmptyString>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Invalid budget approver name." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {BUDGET_APPROVER} to tokenPlaceholders" Item="{}{BUDGET_APPROVER}">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {BUDGET_APPROVER} encoded to tokenPlaceholders" Item="&amp;#123;BUDGET_APPROVER&amp;#125;">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add budget approver to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="budgetApproverName">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="budgetApproverName">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverName" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add budget approver to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="budgetApproverName">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="budgetApproverName">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverName" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get Travel Coordinator">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Travel Coordinator Id" PropertyName="d/results/(0)/TAR_TravelCoordinatorId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <If DisplayName="If travel coordinator has been selected">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValueInt &gt; 0">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsGreaterThan x:TypeArguments="x:Int32">
                  <p:IsGreaterThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </InArgument>
                  </p:IsGreaterThan.Left>
                  <p:IsGreaterThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                  </p:IsGreaterThan.Right>
                </p:IsGreaterThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:LookupSPUser>
                <p1:LookupSPUser.PrincipalId>
                  <InArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPUser.PrincipalId>
                <p1:LookupSPUser.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p1:LookupSPUser.Result>
              </p1:LookupSPUser>
              <p:GetODataProperties DisplayName="Get Travel Coordinator login name">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                    <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="travelCoordinatorLoginName">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <Assign DisplayName="Set Travel Coordinator to empty string">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="travelCoordinatorLoginName">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Empty;">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Additional Staff Member">
        <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Additional Staff Member Id" PropertyName="d/results/(0)/TAR_AdditionalStaffMemberId">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <If DisplayName="If there is a Staff Member added">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValueInt &gt; 0">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsGreaterThan x:TypeArguments="x:Int32">
                  <p:IsGreaterThan.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </InArgument>
                  </p:IsGreaterThan.Left>
                  <p:IsGreaterThan.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                  </p:IsGreaterThan.Right>
                </p:IsGreaterThan>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:LookupSPUser DisplayName="Lookup Additional Staff Member">
                <p1:LookupSPUser.PrincipalId>
                  <InArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPUser.PrincipalId>
                <p1:LookupSPUser.Result>
                  <OutArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p1:LookupSPUser.Result>
              </p1:LookupSPUser>
              <p:GetODataProperties DisplayName="Get Additional Staff Member Login Name">
                <p:GetODataProperties.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                          <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:GetODataProperties.Source>
                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                  <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                    <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="additionalStaffMemberLoginName">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                          <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </scg:Dictionary>
              </p:GetODataProperties>
            </Sequence>
          </If.Then>
          <If.Else>
            <Assign DisplayName="Set staff member login name to empty">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="additionalStaffMemberLoginName">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Empty">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR ID">
        <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get TAR ID" PropertyName="d/results/(0)/Title">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:String">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tokenValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="tokenValue">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="tokenValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <Assign DisplayName="Store TAR ID">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tarId">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="tarId">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID28}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="tarId" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
              </p:ExpressionContainerValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <If DisplayName="If TAR ID is empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(tokenValue)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsEmptyString>
                  <InArgument x:TypeArguments="x:String">
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                  </InArgument>
                </p:IsEmptyString>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="Invalid TAR ID." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TAR_ID} to tokenPlaceholders" Item="{}{TAR_ID}">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add {TAR_ID} encoded to tokenPlaceholders" Item="&amp;#123;TAR_ID&amp;#125;">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_LINK encoded to tokenPlaceholders" Item="http&amp;#58;//tar_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_LINK to tokenPlaceholders" Item="http://tar_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_APPROVAL_LINK encoded to tokenPlaceholders" Item="http&amp;#58;//tar_approval_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add http://TAR_APPROVAL_LINK to tokenPlaceholders" Item="http://tar_approval_link">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR ID to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tarId">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="tarId">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID28}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="tarId" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR ID for encoded to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tarId">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="tarId">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID28}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="tarId" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR LINK for encoded to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;{0}{1}#/details/tar-details/{2}&quot;, webUrl, appRelativeUrl, tokenValue);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="webUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID0}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="appRelativeUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID14}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="tokenValue">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID20}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="{}{0}{1}#/details/tar-details/{2}">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="webUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="appRelativeUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="tokenValue" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR LINK to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;{0}{1}#/details/tar-details/{2}&quot;, webUrl, appRelativeUrl, tokenValue);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="webUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID0}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="appRelativeUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID14}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="tokenValue">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID20}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="{}{0}{1}#/details/tar-details/{2}">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="webUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="appRelativeUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="tokenValue" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR APPROVAL LINK for encoded to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;{0}{1}#/approval/tar/{2}&quot;, webUrl, appRelativeUrl, tokenValue);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="webUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID0}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="appRelativeUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID14}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="tokenValue">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID20}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="{}{0}{1}#/approval/tar/{2}">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="webUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="appRelativeUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="tokenValue" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add TAR APPROVAL LINK to tokenValues">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;{0}{1}#/approval/tar/{2}&quot;, webUrl, appRelativeUrl, tokenValue);">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Object" x:Key="webUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID0}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="appRelativeUrl">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID14}" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object" x:Key="tokenValue">
                          <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID20}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:FormatString Format="{}{0}{1}#/approval/tar/{2}">
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="webUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="appRelativeUrl" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="tokenValue" />
                        </InArgument>
                      </p:FormatString>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </If.Else>
        </If>
      </Sequence>
      <Sequence DisplayName="Get TAR Destinations">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID29" Name="destinationsCount" />
          <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID32" Name="index" />
        </Sequence.Variables>
        <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Destinations JSON" PropertyName="d/results/(0)/TAR_Destinations">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:String">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tokenValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="tokenValue">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="tokenValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <p:ParseDynamicValue DisplayName="Parse Destinations JSON">
          <p:ParseDynamicValue.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                    <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:ParseDynamicValue.Result>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:ParseDynamicValue>
        <p:CountDynamicValueItems DisplayName="Count Destinations DynamicValueItems">
          <p:CountDynamicValueItems.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="destinationsCount">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="destinationsCount">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID29}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="destinationsCount" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:CountDynamicValueItems.Result>
          <InArgument x:TypeArguments="p:DynamicValue">
            <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                  <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:CountDynamicValueItems>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build countryDirectorsLoginNames collection">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="countryDirectorsLoginNames">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="countryDirectorsLoginNames">
                    <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID30}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="countryDirectorsLoginNames" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="countryDirectorsLoginNames">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="countryDirectorsLoginNames">
                    <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID30}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="countryDirectorsLoginNames" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build restrictedTravelCountries">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="restrictedTravelCountries">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="restrictedTravelCountries">
                    <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID31}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="restrictedTravelCountries" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="restrictedTravelCountries">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="restrictedTravelCountries">
                    <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID31}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="restrictedTravelCountries" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <If DisplayName="If destinationsCount == 0">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="destinationsCount == 0">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="destinationsCount">
                    <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID29}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:IsEqual x:TypeArguments="x:Int32">
                  <p:IsEqual.Left>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                      <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="destinationsCount" />
                    </InArgument>
                  </p:IsEqual.Left>
                  <p:IsEqual.Right>
                    <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                  </p:IsEqual.Right>
                </p:IsEqual>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p1:WriteToHistory DisplayName="Log error" Message="No destinations introduced." />
              <TerminateWorkflow Reason="Invalid input data." />
            </Sequence>
          </If.Then>
        </If>
        <Assign DisplayName="Initialize index">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="index">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Int32" x:Key="index">
                    <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="index" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Int32">0</InArgument>
          </Assign.Value>
        </Assign>
        <While DisplayName="Iterate over destinations dynamicValue ">
          <While.Variables>
            <Variable x:TypeArguments="x:String" x:Name="__ReferenceID33" Name="destinationsQuery" />
            <Variable x:TypeArguments="x:String" x:Name="__ReferenceID34" Name="directorQuery" />
            <Variable x:TypeArguments="x:String" x:Name="__ReferenceID35" Name="travelRestrictionsQuery" />
          </While.Variables>
          <While.Condition>
            <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="index &lt; destinationsCount">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:Int32" x:Key="index">
                  <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                </InArgument>
                <InArgument x:TypeArguments="x:Int32" x:Key="destinationsCount">
                  <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID29}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <p:IsLessThan x:TypeArguments="x:Int32">
                <p:IsLessThan.Left>
                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                  </InArgument>
                </p:IsLessThan.Left>
                <p:IsLessThan.Right>
                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="destinationsCount" />
                  </InArgument>
                </p:IsLessThan.Right>
              </p:IsLessThan>
            </p:ExpressionContainerValue>
          </While.Condition>
          <Sequence>
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" x:Name="__ReferenceID36" Name="currentCountry" />
            </Sequence.Variables>
            <Assign DisplayName="Create query statement for country name">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="destinationsQuery">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="destinationsQuery">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID33}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="destinationsQuery" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;({0})/country/title&quot;, index);">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="index">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:FormatString Format="({0})/country/title">
                      <InArgument x:TypeArguments="x:Object">
                        <p:Convert x:TypeArguments="x:Int32, x:Object">
                          <InArgument x:TypeArguments="x:Int32">
                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                          </InArgument>
                        </p:Convert>
                      </InArgument>
                    </p:FormatString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Create query statement for country director">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="directorQuery">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="directorQuery">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID34}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="directorQuery" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;({0})/country/director/Id&quot;, index);">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="index">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:FormatString Format="({0})/country/director/Id">
                      <InArgument x:TypeArguments="x:Object">
                        <p:Convert x:TypeArguments="x:Int32, x:Object">
                          <InArgument x:TypeArguments="x:Int32">
                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                          </InArgument>
                        </p:Convert>
                      </InArgument>
                    </p:FormatString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Create query statement for country travel restrictions">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="travelRestrictionsQuery">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="travelRestrictionsQuery">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID35}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="travelRestrictionsQuery" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;({0})/country/travelRestrictions&quot;, index);">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="index">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:FormatString Format="({0})/country/travelRestrictions">
                      <InArgument x:TypeArguments="x:Object">
                        <p:Convert x:TypeArguments="x:Int32, x:Object">
                          <InArgument x:TypeArguments="x:Int32">
                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                          </InArgument>
                        </p:Convert>
                      </InArgument>
                    </p:FormatString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get destination from JSON">
              <p:GetDynamicValueProperty.PropertyName>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="destinationsQuery">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="destinationsQuery">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID33}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="destinationsQuery" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.PropertyName>
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="currentCountry">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="currentCountry">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID36}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="currentCountry" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <If DisplayName="If destinations is empty">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="string.IsNullOrEmpty(destinations)">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="destinations">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID37}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:IsEmptyString>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="destinations" />
                      </InArgument>
                    </p:IsEmptyString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="destinations">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="destinations">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID37}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="destinations" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="currentCountry">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="currentCountry">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID36}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="currentCountry" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <Assign DisplayName="Add new destination">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="destinations">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="destinations">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID37}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="destinations" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;{0}, {1}&quot;, destinations, currentCountry);">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:Object" x:Key="destinations">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID37}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="currentCountry">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID36}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:FormatString Format="{}{0}, {1}">
                          <InArgument x:TypeArguments="x:Object">
                            <ArgumentValue x:TypeArguments="x:Object" ArgumentName="destinations" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object">
                            <ArgumentValue x:TypeArguments="x:Object" ArgumentName="currentCountry" />
                          </InArgument>
                        </p:FormatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Else>
            </If>
            <p:GetDynamicValueProperty x:TypeArguments="x:Int32" DisplayName="Get Country Director Id from JSON">
              <p:GetDynamicValueProperty.PropertyName>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="directorQuery">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="directorQuery">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID34}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="directorQuery" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.PropertyName>
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <If DisplayName="If there is a valid country director">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValueInt &gt; 0">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:IsGreaterThan x:TypeArguments="x:Int32">
                      <p:IsGreaterThan.Left>
                        <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                        </InArgument>
                      </p:IsGreaterThan.Left>
                      <p:IsGreaterThan.Right>
                        <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                      </p:IsGreaterThan.Right>
                    </p:IsGreaterThan>
                  </p:ExpressionContainerValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence DisplayName="Lookup and Add CD">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID38" Name="userDetails" />
                    <Variable x:TypeArguments="x:String" x:Name="__ReferenceID39" Name="userLoginName" />
                  </Sequence.Variables>
                  <p1:LookupSPUser DisplayName="Lookup Country Director">
                    <p1:LookupSPUser.PrincipalId>
                      <InArgument x:TypeArguments="x:Int32">
                        <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                              <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:LookupSPUser.PrincipalId>
                    <p1:LookupSPUser.Result>
                      <OutArgument x:TypeArguments="p:DynamicValue">
                        <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="userDetails">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="userDetails">
                              <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID38}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="userDetails" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </p1:LookupSPUser.Result>
                  </p1:LookupSPUser>
                  <p:GetODataProperties DisplayName="Get Country Director Login Name">
                    <p:GetODataProperties.Source>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="userDetails">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="p:DynamicValue" x:Key="userDetails">
                              <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID38}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="userDetails" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p:GetODataProperties.Source>
                    <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                      <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                        <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="userLoginName">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="x:String" x:Key="userLoginName">
                              <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID39}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="x:String" ArgumentName="userLoginName" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </scg:Dictionary>
                  </p:GetODataProperties>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add CD Login Name to collection">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="userLoginName">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="userLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID39}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="userLoginName" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="countryDirectorsLoginNames">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="countryDirectorsLoginNames">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID30}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="countryDirectorsLoginNames" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                </Sequence>
              </If.Then>
            </If>
            <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get destination from JSON">
              <p:GetDynamicValueProperty.PropertyName>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travelRestrictionsQuery">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="travelRestrictionsQuery">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID35}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelRestrictionsQuery" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.PropertyName>
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tokenValue">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="tokenValue">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="tokenValue" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <If DisplayName="If the destination is a restricted travel country">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValue.Equals(&quot;true&quot;)">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:IsEqualString Pattern="{x:Null}" Text="true">
                      <p:IsEqualString.Input>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                        </InArgument>
                      </p:IsEqualString.Input>
                    </p:IsEqualString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add destination to restricted travel countries">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="currentCountry">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="currentCountry">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID36}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="currentCountry" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="restrictedTravelCountries">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="restrictedTravelCountries">
                          <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID31}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="restrictedTravelCountries" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection>
              </If.Then>
            </If>
            <Assign DisplayName="Increase index">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="index">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="index">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="index" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="index + 1">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="index">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID32}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:Add x:TypeArguments="x:Int32">
                      <p:Add.Left>
                        <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                        </InArgument>
                      </p:Add.Left>
                      <p:Add.Right>
                        <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                      </p:Add.Right>
                    </p:Add>
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </While>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DESTINATIONS} to tokenPlaceholders" Item="{}{DESTINATIONS}">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DESTINATIONS} encoded to tokenPlaceholders" Item="&amp;#123;DESTINATIONS&amp;#125;">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add destinations to tokenValues">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="destinations">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="destinations">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID37}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="destinations" />
              </p:ExpressionContainerValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add destinations to tokenValues">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="destinations">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="destinations">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID37}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="destinations" />
              </p:ExpressionContainerValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
      </Sequence>
      <Sequence DisplayName="Get TAR Relevant Security Directors">
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build securityDirectorsLoginNames">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="securityDirectorsLoginNames">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="securityDirectorsLoginNames">
                    <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID40}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="securityDirectorsLoginNames" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="securityDirectorsLoginNames">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="securityDirectorsLoginNames">
                    <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID40}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="securityDirectorsLoginNames" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:BuildCollection.Result>
        </p:BuildCollection>
        <ForEach x:TypeArguments="x:String" DisplayName="ForEach restricted travel country">
          <ForEach.Values>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="restrictedTravelCountries">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="restrictedTravelCountries">
                    <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID31}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="restrictedTravelCountries" />
              </p:ExpressionContainerValue>
            </InArgument>
          </ForEach.Values>
          <ActivityAction x:TypeArguments="x:String">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="x:String" x:Name="__ReferenceID41" Name="country" />
            </ActivityAction.Argument>
            <Sequence>
              <p1:LookupSPListItemId DisplayName="Lookup country ID">
                <p1:LookupSPListItemId.ListId>
                  <InArgument x:TypeArguments="s:Guid">
                    <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/Countries;}&quot;)">
                      <p:ParseGuid Value="{}{$ListId:Lists/Countries;}" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPListItemId.ListId>
                <p1:LookupSPListItemId.PropertyName>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Title&quot;" Expression="Title" />
                  </InArgument>
                </p1:LookupSPListItemId.PropertyName>
                <p1:LookupSPListItemId.PropertyValue>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="country">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="country">
                          <DelegateArgumentValue x:TypeArguments="x:String">
                            <x:Reference>__ReferenceID41</x:Reference>
                          </DelegateArgumentValue>
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="country" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p1:LookupSPListItemId.PropertyValue>
                <p1:LookupSPListItemId.Result>
                  <OutArgument x:TypeArguments="x:Int32">
                    <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p1:LookupSPListItemId.Result>
              </p1:LookupSPListItemId>
              <If DisplayName="If country exists">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="tokenValueInt &gt; 0">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                          <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:IsGreaterThan x:TypeArguments="x:Int32">
                        <p:IsGreaterThan.Left>
                          <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                          </InArgument>
                        </p:IsGreaterThan.Left>
                        <p:IsGreaterThan.Right>
                          <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                        </p:IsGreaterThan.Right>
                      </p:IsGreaterThan>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Sequence>
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID42" Name="countryRegion" />
                      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID43" Name="securityDirector" />
                      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID44" Name="securityDirectorLoginName" />
                    </Sequence.Variables>
                    <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Country ">
                      <p1:LookupSPListItem.ItemId>
                        <InArgument x:TypeArguments="x:Int32">
                          <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="tokenValueInt">
                            <p:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="x:Int32" x:Key="tokenValueInt">
                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID13}" />
                              </InArgument>
                            </p:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="tokenValueInt" />
                          </p:ExpressionContainerValue>
                        </InArgument>
                      </p1:LookupSPListItem.ItemId>
                      <p1:LookupSPListItem.ListId>
                        <InArgument x:TypeArguments="s:Guid">
                          <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/Countries;}&quot;)">
                            <p:ParseGuid Value="{}{$ListId:Lists/Countries;}" />
                          </p:ExpressionContainerValue>
                        </InArgument>
                      </p1:LookupSPListItem.ListId>
                      <p1:LookupSPListItem.Result>
                        <OutArgument x:TypeArguments="p:DynamicValue">
                          <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                            <p:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                                <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                              </InOutArgument>
                            </p:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                          </p:ExpressionContainerReference>
                        </OutArgument>
                      </p1:LookupSPListItem.Result>
                    </p1:LookupSPListItem>
                    <p:GetODataProperties DisplayName="Get Country Region">
                      <p:GetODataProperties.Source>
                        <InArgument x:TypeArguments="p:DynamicValue">
                          <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                            <p:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                                <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                              </InArgument>
                            </p:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                          </p:ExpressionContainerValue>
                        </InArgument>
                      </p:GetODataProperties.Source>
                      <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                        <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_RegionLookupId">
                          <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="countryRegion">
                            <p:ExpressionContainerReference.Arguments>
                              <InOutArgument x:TypeArguments="x:Int32" x:Key="countryRegion">
                                <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID42}" />
                              </InOutArgument>
                            </p:ExpressionContainerReference.Arguments>
                            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="countryRegion" />
                          </p:ExpressionContainerReference>
                        </OutArgument>
                      </scg:Dictionary>
                    </p:GetODataProperties>
                    <If DisplayName="If Country has a Region associated">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="countryRegion &gt; 0">
                            <p:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="x:Int32" x:Key="countryRegion">
                                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID42}" />
                              </InArgument>
                            </p:ExpressionContainerValue.Arguments>
                            <p:IsGreaterThan x:TypeArguments="x:Int32">
                              <p:IsGreaterThan.Left>
                                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="countryRegion" />
                                </InArgument>
                              </p:IsGreaterThan.Left>
                              <p:IsGreaterThan.Right>
                                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                              </p:IsGreaterThan.Right>
                            </p:IsGreaterThan>
                          </p:ExpressionContainerValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Sequence DisplayName="Get Security Director Account">
                          <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Lookup Country Region">
                            <p1:LookupSPListItem.ItemId>
                              <InArgument x:TypeArguments="x:Int32">
                                <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="countryRegion">
                                  <p:ExpressionContainerValue.Arguments>
                                    <InArgument x:TypeArguments="x:Int32" x:Key="countryRegion">
                                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID42}" />
                                    </InArgument>
                                  </p:ExpressionContainerValue.Arguments>
                                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="countryRegion" />
                                </p:ExpressionContainerValue>
                              </InArgument>
                            </p1:LookupSPListItem.ItemId>
                            <p1:LookupSPListItem.ListId>
                              <InArgument x:TypeArguments="s:Guid">
                                <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/Regions;}&quot;)">
                                  <p:ParseGuid Value="{}{$ListId:Lists/Regions;}" />
                                </p:ExpressionContainerValue>
                              </InArgument>
                            </p1:LookupSPListItem.ListId>
                            <p1:LookupSPListItem.Result>
                              <OutArgument x:TypeArguments="p:DynamicValue">
                                <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                                  <p:ExpressionContainerReference.Arguments>
                                    <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                                      <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                                    </InOutArgument>
                                  </p:ExpressionContainerReference.Arguments>
                                  <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                                </p:ExpressionContainerReference>
                              </OutArgument>
                            </p1:LookupSPListItem.Result>
                          </p1:LookupSPListItem>
                          <p:GetODataProperties DisplayName="Get Region Security Director ID">
                            <p:GetODataProperties.Source>
                              <InArgument x:TypeArguments="p:DynamicValue">
                                <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                                  <p:ExpressionContainerValue.Arguments>
                                    <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                                      <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                                    </InArgument>
                                  </p:ExpressionContainerValue.Arguments>
                                  <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                                </p:ExpressionContainerValue>
                              </InArgument>
                            </p:GetODataProperties.Source>
                            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                              <OutArgument x:TypeArguments="x:Int32" x:Key="TAR_SecurityDirectorAccountId">
                                <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="securityDirector">
                                  <p:ExpressionContainerReference.Arguments>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="securityDirector">
                                      <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID43}" />
                                    </InOutArgument>
                                  </p:ExpressionContainerReference.Arguments>
                                  <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="securityDirector" />
                                </p:ExpressionContainerReference>
                              </OutArgument>
                            </scg:Dictionary>
                          </p:GetODataProperties>
                          <If DisplayName="If Region has Security Director">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="securityDirector &gt; 0">
                                  <p:ExpressionContainerValue.Arguments>
                                    <InArgument x:TypeArguments="x:Int32" x:Key="securityDirector">
                                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID43}" />
                                    </InArgument>
                                  </p:ExpressionContainerValue.Arguments>
                                  <p:IsGreaterThan x:TypeArguments="x:Int32">
                                    <p:IsGreaterThan.Left>
                                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="securityDirector" />
                                      </InArgument>
                                    </p:IsGreaterThan.Left>
                                    <p:IsGreaterThan.Right>
                                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                    </p:IsGreaterThan.Right>
                                  </p:IsGreaterThan>
                                </p:ExpressionContainerValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Sequence>
                                <p1:LookupSPUser DisplayName="Lookup Security Director">
                                  <p1:LookupSPUser.PrincipalId>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="securityDirector">
                                        <p:ExpressionContainerValue.Arguments>
                                          <InArgument x:TypeArguments="x:Int32" x:Key="securityDirector">
                                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID43}" />
                                          </InArgument>
                                        </p:ExpressionContainerValue.Arguments>
                                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="securityDirector" />
                                      </p:ExpressionContainerValue>
                                    </InArgument>
                                  </p1:LookupSPUser.PrincipalId>
                                  <p1:LookupSPUser.Result>
                                    <OutArgument x:TypeArguments="p:DynamicValue">
                                      <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                                        <p:ExpressionContainerReference.Arguments>
                                          <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                                            <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                                          </InOutArgument>
                                        </p:ExpressionContainerReference.Arguments>
                                        <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                                      </p:ExpressionContainerReference>
                                    </OutArgument>
                                  </p1:LookupSPUser.Result>
                                </p1:LookupSPUser>
                                <p:GetODataProperties DisplayName="Get Security director login name">
                                  <p:GetODataProperties.Source>
                                    <InArgument x:TypeArguments="p:DynamicValue">
                                      <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                                        <p:ExpressionContainerValue.Arguments>
                                          <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                                            <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                                          </InArgument>
                                        </p:ExpressionContainerValue.Arguments>
                                        <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                                      </p:ExpressionContainerValue>
                                    </InArgument>
                                  </p:GetODataProperties.Source>
                                  <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                    <OutArgument x:TypeArguments="x:String" x:Key="LoginName">
                                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="securityDirectorLoginName">
                                        <p:ExpressionContainerReference.Arguments>
                                          <InOutArgument x:TypeArguments="x:String" x:Key="securityDirectorLoginName">
                                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID44}" />
                                          </InOutArgument>
                                        </p:ExpressionContainerReference.Arguments>
                                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="securityDirectorLoginName" />
                                      </p:ExpressionContainerReference>
                                    </OutArgument>
                                  </scg:Dictionary>
                                </p:GetODataProperties>
                                <AddToCollection x:TypeArguments="x:String" DisplayName="Add security director to securityDirectorsLoginNames">
                                  <AddToCollection.Item>
                                    <InArgument x:TypeArguments="x:String">
                                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="securityDirectorLoginName">
                                        <p:ExpressionContainerValue.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="securityDirectorLoginName">
                                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID44}" />
                                          </InArgument>
                                        </p:ExpressionContainerValue.Arguments>
                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="securityDirectorLoginName" />
                                      </p:ExpressionContainerValue>
                                    </InArgument>
                                  </AddToCollection.Item>
                                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                    <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="securityDirectorsLoginNames">
                                      <p:ExpressionContainerValue.Arguments>
                                        <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="securityDirectorsLoginNames">
                                          <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID40}" />
                                        </InArgument>
                                      </p:ExpressionContainerValue.Arguments>
                                      <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="securityDirectorsLoginNames" />
                                    </p:ExpressionContainerValue>
                                  </InArgument>
                                </AddToCollection>
                              </Sequence>
                            </If.Then>
                          </If>
                        </Sequence>
                      </If.Then>
                    </If>
                  </Sequence>
                </If.Then>
              </If>
            </Sequence>
          </ActivityAction>
        </ForEach>
      </Sequence>
      <Sequence DisplayName="Get TAR Departure Date">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:String" x:Name="__ReferenceID45" Name="departureDateString" />
        </Sequence.Variables>
        <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Departure Date" PropertyName="d/results/(0)/TAR_DepartureDateString">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:String">
              <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="departureDateString">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="departureDateString">
                    <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID45}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:String" ArgumentName="departureDateString" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DEPARTURE_DATE} to tokenPlaceholders" Item="{}{DEPARTURE_DATE}">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add {DEPARTURE_DATE} encoded to tokenPlaceholders" Item="&amp;#123;DEPARTURE_DATE&amp;#125;">
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add departure date to tokenValues">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="departureDateString">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="departureDateString">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID45}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="departureDateString" />
              </p:ExpressionContainerValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
        <AddToCollection x:TypeArguments="x:String" DisplayName="Add departure date to tokenValues">
          <AddToCollection.Item>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="departureDateString">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="departureDateString">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID45}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="departureDateString" />
              </p:ExpressionContainerValue>
            </InArgument>
          </AddToCollection.Item>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
            </p:ExpressionContainerValue>
          </InArgument>
        </AddToCollection>
      </Sequence>
      <Sequence DisplayName="Get TAR Requires GSS Approval">
        <p:GetDynamicValueProperty x:TypeArguments="x:Boolean" DisplayName="Get Requires GSS Approval" PropertyName="d/results/(0)/TAR_RequiresGssApproval">
          <p:GetDynamicValueProperty.Result>
            <OutArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerReference x:TypeArguments="x:Boolean" DisplayName="requiresGssApproval">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="x:Boolean" x:Key="requiresGssApproval">
                    <VariableReference x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID46}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="x:Boolean" ArgumentName="requiresGssApproval" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:GetDynamicValueProperty.Result>
          <p:GetDynamicValueProperty.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="tarDetails">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="p:DynamicValue" x:Key="tarDetails">
                    <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID16}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="tarDetails" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetDynamicValueProperty.Source>
        </p:GetDynamicValueProperty>
      </Sequence>
      <p1:GetTaskListId DisplayName="Get TAR Task List Id">
        <p1:GetTaskListId.Result>
          <OutArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerReference x:TypeArguments="s:Guid" DisplayName="tasksListGuid">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="s:Guid" x:Key="tasksListGuid">
                  <VariableReference x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID47}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="s:Guid" ArgumentName="tasksListGuid" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p1:GetTaskListId.Result>
      </p1:GetTaskListId>
      <p:CountCollection x:TypeArguments="x:String" DisplayName="Count tokenPlaceholders">
        <p:CountCollection.Collection>
          <InArgument x:TypeArguments="scg:ICollection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                  <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:CountCollection.Collection>
        <p:CountCollection.Result>
          <OutArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="collectionSize">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="x:Int32" x:Key="collectionSize">
                  <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID48}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="collectionSize" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p:CountCollection.Result>
      </p:CountCollection>
      <While DisplayName="Iterate over tokenPlaceholders">
        <While.Variables>
          <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID49" Default="0" Name="index" />
          <Variable x:TypeArguments="x:String" x:Name="__ReferenceID50" Name="placeholder" />
          <Variable x:TypeArguments="x:String" x:Name="__ReferenceID51" Name="placeholderReplacement" />
        </While.Variables>
        <While.Condition>
          <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="index &lt; collectionSize">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:Int32" x:Key="index">
                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID49}" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="collectionSize">
                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID48}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <p:IsLessThan x:TypeArguments="x:Int32">
              <p:IsLessThan.Left>
                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                </InArgument>
              </p:IsLessThan.Left>
              <p:IsLessThan.Right>
                <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="collectionSize" />
                </InArgument>
              </p:IsLessThan.Right>
            </p:IsLessThan>
          </p:ExpressionContainerValue>
        </While.Condition>
        <Sequence>
          <p:GetItemFromCollection x:TypeArguments="x:String" DisplayName="Get Item From tokenPlaceholders">
            <p:GetItemFromCollection.Index>
              <InArgument x:TypeArguments="x:Int32">
                <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="index">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:Int32" x:Key="index">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID49}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p:GetItemFromCollection.Index>
            <p:GetItemFromCollection.Result>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="placeholder">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="placeholder" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </p:GetItemFromCollection.Result>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenPlaceholders">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenPlaceholders">
                    <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID1}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenPlaceholders" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetItemFromCollection>
          <p:GetItemFromCollection x:TypeArguments="x:String" DisplayName="Get Item From tokenValues">
            <p:GetItemFromCollection.Index>
              <InArgument x:TypeArguments="x:Int32">
                <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="index">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:Int32" x:Key="index">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID49}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p:GetItemFromCollection.Index>
            <p:GetItemFromCollection.Result>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="placeholderReplacement">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </p:GetItemFromCollection.Result>
            <InArgument x:TypeArguments="scg:ICollection(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="tokenValues">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="tokenValues">
                    <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID2}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="tokenValues" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:GetItemFromCollection>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailContent">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="emailContent">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailContent" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="emailContent.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="emailContent">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailContent" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="emailSubject">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="emailSubject">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="emailSubject" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="emailSubject.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="emailSubject">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailSubject" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailSubject">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailSubject">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID9}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailSubject" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailSubject.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailSubject">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID9}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailSubject" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="gssEmailContent">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="gssEmailContent">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID8}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="gssEmailContent" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="gssEmailContent.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="gssEmailContent">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID8}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="gssEmailContent" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="gssEmailSubject">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="gssEmailSubject">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="gssEmailSubject" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="gssEmailSubject.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="gssEmailSubject">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="gssEmailSubject" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="approvedEmailContent">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="approvedEmailContent">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="approvedEmailContent" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="approvedEmailContent.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="approvedEmailContent">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="approvedEmailContent" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="approvedEmailSubject">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="approvedEmailSubject">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="approvedEmailSubject" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="approvedEmailSubject.Replace(placeholder, placeholderReplacement);">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="approvedEmailSubject">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholderReplacement">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID51}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="placeholder">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID50}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ReplaceString>
                    <p:ReplaceString.ExistingValue>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholder" />
                      </InArgument>
                    </p:ReplaceString.ExistingValue>
                    <p:ReplaceString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="approvedEmailSubject" />
                      </InArgument>
                    </p:ReplaceString.Input>
                    <p:ReplaceString.Replacement>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="placeholderReplacement" />
                      </InArgument>
                    </p:ReplaceString.Replacement>
                  </p:ReplaceString>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Increase index">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="index">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:Int32" x:Key="index">
                      <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID49}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="index" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="index + 1">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:Int32" x:Key="index">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID49}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:Add x:TypeArguments="x:Int32">
                    <p:Add.Left>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                      </InArgument>
                    </p:Add.Left>
                    <p:Add.Right>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                    </p:Add.Right>
                  </p:Add>
                </p:ExpressionContainerValue>
              </InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
    </Sequence>
    <Sequence DisplayName="Send Budget Approval Email">
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection">
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                  <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p:BuildCollection.Result>
        <p:BuildCollection.Values>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="budgetApproverLoginName">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="budgetApproverLoginName">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverLoginName" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:BuildCollection.Values>
      </p:BuildCollection>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email Cc Collection">
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                  <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p:BuildCollection.Result>
        <p:BuildCollection.Values>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travellerLoginName">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="travellerLoginName">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="travellerLoginName" />
            </p:ExpressionContainerValue>
          </InArgument>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="requesterLoginName">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="requesterLoginName">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="requesterLoginName" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:BuildCollection.Values>
      </p:BuildCollection>
      <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Submitted Email">
        <p1:Email.Body>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="emailContent">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="emailContent">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailContent" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.Body>
        <p1:Email.CC>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                  <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.CC>
        <p1:Email.Subject>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="emailSubject">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="emailSubject">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="emailSubject" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.Subject>
        <p1:Email.To>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                  <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.To>
      </p1:Email>
    </Sequence>
    <Sequence DisplayName="Provision Budget Task">
      <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update Budget Approval Status">
        <p1:UpdateListItem.ItemId>
          <InArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerValue x:TypeArguments="x:Int32">
              <p1:GetCurrentItemId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:UpdateListItem.ItemId>
        <p1:UpdateListItem.ListId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentListId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:UpdateListItem.ListId>
        <p1:UpdateListItem.ListItemPropertiesDynamicValue>
          <InArgument x:TypeArguments="p:DynamicValue">
            <p:SetDynamicValueProperties>
              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalStatus">Pending</InArgument>
              </scg:Dictionary>
            </p:SetDynamicValueProperties>
          </InArgument>
        </p1:UpdateListItem.ListItemPropertiesDynamicValue>
      </p1:UpdateListItem>
      <p1:SingleTask Body="{x:Null}" DueDate="{x:Null}" TaskId="{x:Null}" AssignmentEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have a new task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" AssignmentEmailSubject="Task Assigned" CancelationEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;One of your tasks was canceled and deleted. You do not need to take any further action on that task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" CancelationEmailSubject="Task Canceled" CompletedStatus="Completed" ContentTypeId="0x0108003365C4474CAE8C42BCE396314E88E51F" DefaultTaskOutcome="1" DisplayName="Create Budget Approval Task" OutcomeFieldName="TaskOutcome" OverdueEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have an &lt;/span&gt;&lt;span style='font-size:13.5pt;color:#ff3b3b;'&gt;overdue&lt;/span&gt;&lt;span style='font-size:13.5pt'&gt; task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" OverdueEmailSubject="Task Overdue" OverdueReminderRepeat="0" OverdueRepeatTimes="1" SendReminderEmail="False" WaitForTaskCompletion="True">
        <p1:SingleTask.AssignedTo>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="budgetApproverLoginName">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="budgetApproverLoginName">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverLoginName" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.AssignedTo>
        <p1:SingleTask.Outcome>
          <OutArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="taskBudgetApprovalOutcome">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="x:Int32" x:Key="taskBudgetApprovalOutcome">
                  <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID54}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="taskBudgetApprovalOutcome" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p1:SingleTask.Outcome>
        <p1:SingleTask.RelatedContentLinkListId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentListId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.RelatedContentLinkListId>
        <p1:SingleTask.RelatedContentLinkListItemId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentItemGuid />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.RelatedContentLinkListItemId>
        <p1:SingleTask.RelatedContentLinkListItemIntegerId>
          <InArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerValue x:TypeArguments="x:Int32">
              <p1:GetCurrentItemId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.RelatedContentLinkListItemIntegerId>
        <p1:SingleTask.TaskItemId>
          <OutArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="taskBudgetApprovalId">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="x:Int32" x:Key="taskBudgetApprovalId">
                  <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID55}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="taskBudgetApprovalId" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p1:SingleTask.TaskItemId>
        <p1:SingleTask.Title>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;Budget Approval Workflow task - {0}&quot;, tarId);">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:Object" x:Key="tarId">
                  <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID28}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <p:FormatString Format="Budget Approval Workflow task - {0}">
                <InArgument x:TypeArguments="x:Object">
                  <ArgumentValue x:TypeArguments="x:Object" ArgumentName="tarId" />
                </InArgument>
              </p:FormatString>
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:SingleTask.Title>
      </p1:SingleTask>
    </Sequence>
    <Sequence DisplayName="Approve/Reject Budget">
      <If DisplayName="If Budget Approval Task has been rejected">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="taskBudgetApprovalOutcome != 0">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:Int32" x:Key="taskBudgetApprovalOutcome">
                  <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID54}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <p:Not>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:IsEqual x:TypeArguments="x:Int32">
                    <p:IsEqual.Left>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="taskBudgetApprovalOutcome" />
                      </InArgument>
                    </p:IsEqual.Left>
                    <p:IsEqual.Right>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                    </p:IsEqual.Right>
                  </p:IsEqual>
                </InArgument>
              </p:Not>
            </p:ExpressionContainerValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence>
            <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Get Approval Task">
              <p1:LookupSPListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="taskBudgetApprovalId">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="taskBudgetApprovalId">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID55}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="taskBudgetApprovalId" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:LookupSPListItem.ItemId>
              <p1:LookupSPListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="tasksListGuid">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="s:Guid" x:Key="tasksListGuid">
                        <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID47}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="tasksListGuid" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:LookupSPListItem.ListId>
              <p1:LookupSPListItem.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p1:LookupSPListItem.Result>
            </p1:LookupSPListItem>
            <p:GetODataProperties DisplayName="Get Task Description">
              <p:GetODataProperties.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetODataProperties.Source>
              <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                <OutArgument x:TypeArguments="x:String" x:Key="Body">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="taskDescription">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="taskDescription">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID56}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="taskDescription" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </scg:Dictionary>
            </p:GetODataProperties>
            <Assign DisplayName="Replace {REJECTOR}  in Rejected Email">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent.Replace(&quot;&amp;#123;REJECTOR&amp;#125;&quot;, budgetApproverName).Replace(&quot;{REJECTOR}&quot;, budgetApproverName);">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="budgetApproverName">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="budgetApproverName1">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID24}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:ReplaceString ExistingValue="{}{REJECTOR}">
                      <p:ReplaceString.Input>
                        <InArgument x:TypeArguments="x:String">
                          <p:ReplaceString ExistingValue="&amp;#123;REJECTOR&amp;#125;">
                            <p:ReplaceString.Input>
                              <InArgument x:TypeArguments="x:String">
                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                              </InArgument>
                            </p:ReplaceString.Input>
                            <p:ReplaceString.Replacement>
                              <InArgument x:TypeArguments="x:String">
                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverName" />
                              </InArgument>
                            </p:ReplaceString.Replacement>
                          </p:ReplaceString>
                        </InArgument>
                      </p:ReplaceString.Input>
                      <p:ReplaceString.Replacement>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="budgetApproverName1" />
                        </InArgument>
                      </p:ReplaceString.Replacement>
                    </p:ReplaceString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Replace {REJECTOR_COMMENTS} in Rejected Email Template">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                        <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent.Replace(&quot;&amp;#123;REJECTOR_COMMENTS&amp;#125;&quot;, taskDescription).Replace(&quot;{REJECTOR_COMMENTS}&quot;, taskDescription);">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="taskDescription">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID56}" />
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="taskDescription1">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID56}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:ReplaceString ExistingValue="{}{REJECTOR_COMMENTS}">
                      <p:ReplaceString.Input>
                        <InArgument x:TypeArguments="x:String">
                          <p:ReplaceString ExistingValue="&amp;#123;REJECTOR_COMMENTS&amp;#125;">
                            <p:ReplaceString.Input>
                              <InArgument x:TypeArguments="x:String">
                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                              </InArgument>
                            </p:ReplaceString.Input>
                            <p:ReplaceString.Replacement>
                              <InArgument x:TypeArguments="x:String">
                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="taskDescription" />
                              </InArgument>
                            </p:ReplaceString.Replacement>
                          </p:ReplaceString>
                        </InArgument>
                      </p:ReplaceString.Input>
                      <p:ReplaceString.Replacement>
                        <InArgument x:TypeArguments="x:String">
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="taskDescription1" />
                        </InArgument>
                      </p:ReplaceString.Replacement>
                    </p:ReplaceString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="toRecipients">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="toRecipients">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="toRecipients" />
                </p:ExpressionContainerValue>
              </InArgument>
            </ClearCollection>
            <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection">
              <p:BuildCollection.Result>
                <OutArgument x:TypeArguments="sco:Collection(x:String)">
                  <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                        <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:BuildCollection.Result>
              <p:BuildCollection.Values>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travellerLoginName">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="travellerLoginName">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="travellerLoginName" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:BuildCollection.Values>
            </p:BuildCollection>
            <Sequence DisplayName="Build Email Cc Collection">
              <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection">
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </ClearCollection>
              <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize Email Cc Collection">
                <p:BuildCollection.Collection>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                    <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="ccRecipients">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="ccRecipients">
                          <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID53}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="ccRecipients" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:BuildCollection.Collection>
                <p:BuildCollection.Result>
                  <OutArgument x:TypeArguments="sco:Collection(x:String)">
                    <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
                      <p:ExpressionContainerReference.Arguments>
                        <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                          <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                        </InOutArgument>
                      </p:ExpressionContainerReference.Arguments>
                      <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
                    </p:ExpressionContainerReference>
                  </OutArgument>
                </p:BuildCollection.Result>
                <p:BuildCollection.Values>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="requesterLoginName">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="requesterLoginName">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="requesterLoginName" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </p:BuildCollection.Values>
              </p:BuildCollection>
              <If DisplayName="If travelCoordinatorLoginName is not empty">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(travelCoordinatorLoginName)">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:Not>
                        <InArgument x:TypeArguments="x:Boolean">
                          <p:IsEmptyString>
                            <InArgument x:TypeArguments="x:String">
                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                            </InArgument>
                          </p:IsEmptyString>
                        </InArgument>
                      </p:Not>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add travel coordinator login name to toCollection">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travelCoordinatorLoginName">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                </If.Then>
              </If>
              <If DisplayName="If additionalStaffMemberLoginName is not empty">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(additionalStaffMemberLoginName)">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                          <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <p:Not>
                        <InArgument x:TypeArguments="x:Boolean">
                          <p:IsEmptyString>
                            <InArgument x:TypeArguments="x:String">
                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                            </InArgument>
                          </p:IsEmptyString>
                        </InArgument>
                      </p:Not>
                    </p:ExpressionContainerValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="additionalStaffMemberLoginName">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection>
                </If.Then>
              </If>
            </Sequence>
            <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Rejected Email">
              <p1:Email.Body>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:Email.Body>
              <p1:Email.CC>
                <InArgument x:TypeArguments="sco:Collection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                        <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:Email.CC>
              <p1:Email.Subject>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailSubject">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailSubject">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID9}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailSubject" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:Email.Subject>
              <p1:Email.To>
                <InArgument x:TypeArguments="sco:Collection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                        <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:Email.To>
            </p1:Email>
            <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update current TAR with Budget Approval Status &amp; Timestamp">
              <p1:UpdateListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ItemId>
              <p1:UpdateListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ListId>
              <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:SetDynamicValueProperties>
                    <scg:Dictionary x:TypeArguments="x:String, InArgument">
                      <InArgument x:TypeArguments="x:String" x:Key="TAR_BudgetApprovalStatus">Rejected</InArgument>
                      <InArgument x:TypeArguments="s:DateTime" x:Key="TAR_BudgetApprovalTimestamp">
                        <p:ExpressionContainerValue x:TypeArguments="s:DateTime" DisplayName="DateTime.UtcNow">
                          <p:CurrentDate />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </scg:Dictionary>
                  </p:SetDynamicValueProperties>
                </InArgument>
              </p1:UpdateListItem.ListItemPropertiesDynamicValue>
            </p1:UpdateListItem>
            <TerminateWorkflow Reason="Budget Approver has rejected the TAR." />
          </Sequence>
        </If.Then>
      </If>
    </Sequence>
    <If DisplayName="If TAR requires GSS approval">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="requiresGssApproval">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:Boolean" x:Key="requiresGssApproval">
                <VariableValue x:TypeArguments="x:Boolean" Variable="{x:Reference __ReferenceID46}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <ArgumentValue x:TypeArguments="x:Boolean" ArgumentName="requiresGssApproval" />
          </p:ExpressionContainerValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence DisplayName="Requires GSS Approval Sequence">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID57" Name="gssApprovalGroupId" />
          </Sequence.Variables>
          <Sequence DisplayName="Build Email To Collection">
            <Sequence.Variables>
              <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID58" Name="properties" />
              <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID59" Name="membersCount" />
              <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID60" Name="index" />
            </Sequence.Variables>
            <p1:LookupSPPrincipalId AddToUserInfoList="{x:Null}" DisplayName="Get GSS Approvers Group Id" UserName="GSS Approvers">
              <p1:LookupSPPrincipalId.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="gssApprovalGroupId">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="gssApprovalGroupId">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID57}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="gssApprovalGroupId" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p1:LookupSPPrincipalId.Result>
            </p1:LookupSPPrincipalId>
            <p1:LookupSPGroupMembers DisplayName="Lookup GSS Approvers members">
              <p1:LookupSPGroupMembers.GroupPrincipalId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="gssApprovalGroupId">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="gssApprovalGroupId">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID57}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="gssApprovalGroupId" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:LookupSPGroupMembers.GroupPrincipalId>
              <p1:LookupSPGroupMembers.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p1:LookupSPGroupMembers.Result>
            </p1:LookupSPGroupMembers>
            <p:GetDynamicValueProperty x:TypeArguments="p:DynamicValue" DisplayName="Get GSS Members" PropertyName="d/results">
              <p:GetDynamicValueProperty.Result>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="properties">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="properties">
                        <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID58}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="properties" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:GetDynamicValueProperty.Result>
              <p:GetDynamicValueProperty.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                        <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p:GetDynamicValueProperty.Source>
            </p:GetDynamicValueProperty>
            <p:CountDynamicValueItems DisplayName="Count GSS Members">
              <p:CountDynamicValueItems.Result>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="membersCount">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="membersCount">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID59}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="membersCount" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:CountDynamicValueItems.Result>
              <InArgument x:TypeArguments="p:DynamicValue">
                <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="properties">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="p:DynamicValue" x:Key="properties">
                      <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID58}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="properties" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p:CountDynamicValueItems>
            <Assign DisplayName="Initialize index">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="index">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="index">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID60}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="index" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="0;" Expression="0" />
                </InArgument>
              </Assign.Value>
            </Assign>
            <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="toRecipients">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="toRecipients">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="toRecipients" />
                </p:ExpressionContainerValue>
              </InArgument>
            </ClearCollection>
            <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection">
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                </p:ExpressionContainerValue>
              </InArgument>
            </ClearCollection>
            <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection">
              <p:BuildCollection.Result>
                <OutArgument x:TypeArguments="sco:Collection(x:String)">
                  <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                        <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p:BuildCollection.Result>
            </p:BuildCollection>
            <While DisplayName="Iterate over GSS group members">
              <While.Condition>
                <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="index &lt; membersCount">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:Int32" x:Key="index">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID60}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="membersCount">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID59}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:IsLessThan x:TypeArguments="x:Int32">
                    <p:IsLessThan.Left>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                      </InArgument>
                    </p:IsLessThan.Left>
                    <p:IsLessThan.Right>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1">
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="membersCount" />
                      </InArgument>
                    </p:IsLessThan.Right>
                  </p:IsLessThan>
                </p:ExpressionContainerValue>
              </While.Condition>
              <Sequence>
                <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Get Member LoginName">
                  <p:GetDynamicValueProperty.PropertyName>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;d/results({0})/LoginName&quot;, index);">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:Int32" x:Key="index">
                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID60}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:FormatString Format="d/results({0})/LoginName">
                          <InArgument x:TypeArguments="x:Object">
                            <p:Convert x:TypeArguments="x:Int32, x:Object">
                              <InArgument x:TypeArguments="x:Int32">
                                <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                              </InArgument>
                            </p:Convert>
                          </InArgument>
                        </p:FormatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:GetDynamicValueProperty.PropertyName>
                  <p:GetDynamicValueProperty.Result>
                    <OutArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="tokenValue">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="tokenValue">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="tokenValue" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </p:GetDynamicValueProperty.Result>
                  <p:GetDynamicValueProperty.Source>
                    <InArgument x:TypeArguments="p:DynamicValue">
                      <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                            <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:GetDynamicValueProperty.Source>
                </p:GetDynamicValueProperty>
                <AddToCollection x:TypeArguments="x:String" DisplayName="Add member login name to ccRecipients">
                  <AddToCollection.Item>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="tokenValue">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="tokenValue">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID20}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="tokenValue" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </AddToCollection.Item>
                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                    <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="toRecipients">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="toRecipients">
                          <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="toRecipients" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection>
                <Assign DisplayName="Increment index">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">
                      <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="index">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:Int32" x:Key="index">
                            <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID60}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="index" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">
                      <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="index + 1;">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:Int32" x:Key="index">
                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID60}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:Add x:TypeArguments="x:Int32">
                          <p:Add.Left>
                            <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                              <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="index" />
                            </InArgument>
                          </p:Add.Left>
                          <p:Add.Right>
                            <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="1" />
                          </p:Add.Right>
                        </p:Add>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </While>
          </Sequence>
          <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}" DisplayName="Send GSS Approval Email">
            <p1:Email.Body>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="gssEmailContent">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="gssEmailContent">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID8}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="gssEmailContent" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.Body>
            <p1:Email.Subject>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="gssEmailSubject">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="gssEmailSubject">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="gssEmailSubject" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.Subject>
            <p1:Email.To>
              <InArgument x:TypeArguments="sco:Collection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                      <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.To>
          </p1:Email>
          <Sequence DisplayName="Provision GSS Task">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="outcome_0" />
              <Variable x:TypeArguments="x:String" Name="gssApproversLoginName" />
            </Sequence.Variables>
            <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update GSS Approval Status">
              <p1:UpdateListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ItemId>
              <p1:UpdateListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ListId>
              <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:SetDynamicValueProperties>
                    <scg:Dictionary x:TypeArguments="x:String, InArgument">
                      <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalStatus">Pending</InArgument>
                    </scg:Dictionary>
                  </p:SetDynamicValueProperties>
                </InArgument>
              </p1:UpdateListItem.ListItemPropertiesDynamicValue>
            </p1:UpdateListItem>
            <p1:SingleTask Body="{x:Null}" DueDate="{x:Null}" TaskId="{x:Null}" AssignmentEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have a new task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" AssignmentEmailSubject="Task Assigned" CancelationEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;One of your tasks was canceled and deleted. You do not need to take any further action on that task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" CancelationEmailSubject="Task Canceled" CompletedStatus="Completed" ContentTypeId="0x0108003365C4474CAE8C42BCE396314E88E51F" DefaultTaskOutcome="1" DisplayName="Create GSS Approval Task" OutcomeFieldName="TaskOutcome" OverdueEmailBody="&lt;html&gt;&lt;body style='font-size:11pt;font-family:Segoe UI Light,sans-serif;color:#444444;'&gt;&lt;div&gt;&lt;span style='font-size:13.5pt'&gt;You have an &lt;/span&gt;&lt;span style='font-size:13.5pt;color:#ff3b3b;'&gt;overdue&lt;/span&gt;&lt;span style='font-size:13.5pt'&gt; task.&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;" OverdueEmailSubject="Task Overdue" OverdueReminderRepeat="0" OverdueRepeatTimes="1" SendReminderEmail="False" WaitForTaskCompletion="True">
              <p1:SingleTask.AssignedTo>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="gssApprovalGroupId.ToString()">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Object" x:Key="gssApprovalGroupId">
                        <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID57}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:ToString>
                      <InArgument x:TypeArguments="x:Object">
                        <ArgumentValue x:TypeArguments="x:Object" ArgumentName="gssApprovalGroupId" />
                      </InArgument>
                    </p:ToString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.AssignedTo>
              <p1:SingleTask.Outcome>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="taskGSSApprovalOutcome">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="taskGSSApprovalOutcome">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID61}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="taskGSSApprovalOutcome" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p1:SingleTask.Outcome>
              <p1:SingleTask.RelatedContentLinkListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.RelatedContentLinkListId>
              <p1:SingleTask.RelatedContentLinkListItemId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentItemGuid />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.RelatedContentLinkListItemId>
              <p1:SingleTask.RelatedContentLinkListItemIntegerId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.RelatedContentLinkListItemIntegerId>
              <p1:SingleTask.TaskItemId>
                <OutArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="taskGSSApprovalId">
                    <p:ExpressionContainerReference.Arguments>
                      <InOutArgument x:TypeArguments="x:Int32" x:Key="taskGSSApprovalId">
                        <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID62}" />
                      </InOutArgument>
                    </p:ExpressionContainerReference.Arguments>
                    <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="taskGSSApprovalId" />
                  </p:ExpressionContainerReference>
                </OutArgument>
              </p1:SingleTask.TaskItemId>
              <p1:SingleTask.Title>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="string.Format(&quot;GSS Approval Workflow Task - {0}&quot;, tarId);">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Object" x:Key="tarId">
                        <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID28}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:FormatString Format="GSS Approval Workflow Task - {0}">
                      <InArgument x:TypeArguments="x:Object">
                        <ArgumentValue x:TypeArguments="x:Object" ArgumentName="tarId" />
                      </InArgument>
                    </p:FormatString>
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:SingleTask.Title>
            </p1:SingleTask>
          </Sequence>
          <Sequence DisplayName="Approve/Reject GSS">
            <If DisplayName="If GSS Approval Task has been rejected">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="taskGSSApprovalOutcome != 0">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="taskGSSApprovalOutcome">
                        <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID61}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <p:Not>
                      <InArgument x:TypeArguments="x:Boolean">
                        <p:IsEqual x:TypeArguments="x:Int32">
                          <p:IsEqual.Left>
                            <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                              <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="taskGSSApprovalOutcome" />
                            </InArgument>
                          </p:IsEqual.Left>
                          <p:IsEqual.Right>
                            <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                          </p:IsEqual.Right>
                        </p:IsEqual>
                      </InArgument>
                    </p:Not>
                  </p:ExpressionContainerValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence>
                  <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Get Approval Task">
                    <p1:LookupSPListItem.ItemId>
                      <InArgument x:TypeArguments="x:Int32">
                        <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="taskGSSApprovalId">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:Int32" x:Key="taskGSSApprovalId">
                              <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID62}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="taskGSSApprovalId" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:LookupSPListItem.ItemId>
                    <p1:LookupSPListItem.ListId>
                      <InArgument x:TypeArguments="s:Guid">
                        <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="tasksListGuid">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="s:Guid" x:Key="tasksListGuid">
                              <VariableValue x:TypeArguments="s:Guid" Variable="{x:Reference __ReferenceID47}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="s:Guid" ArgumentName="tasksListGuid" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:LookupSPListItem.ListId>
                    <p1:LookupSPListItem.Result>
                      <OutArgument x:TypeArguments="p:DynamicValue">
                        <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                              <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </p1:LookupSPListItem.Result>
                  </p1:LookupSPListItem>
                  <p:GetODataProperties DisplayName="Get Task Description">
                    <p:GetODataProperties.Source>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dynamicValue">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="p:DynamicValue" x:Key="dynamicValue">
                              <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID4}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dynamicValue" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p:GetODataProperties.Source>
                    <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                      <OutArgument x:TypeArguments="x:String" x:Key="Body">
                        <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="taskDescription">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="x:String" x:Key="taskDescription">
                              <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID56}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="x:String" ArgumentName="taskDescription" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </scg:Dictionary>
                  </p:GetODataProperties>
                  <Assign DisplayName="Replace {REJECTOR} in Rejected Email">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                              <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent.Replace(&quot;&amp;#123;REJECTOR&amp;#125;&quot;, &quot;Global Safety and Security&quot;).Replace(&quot;{REJECTOR}&quot;, &quot;Global Safety and Security&quot;);">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <p:ReplaceString ExistingValue="{}{REJECTOR}" Replacement="Global Safety and Security">
                            <p:ReplaceString.Input>
                              <InArgument x:TypeArguments="x:String">
                                <p:ReplaceString ExistingValue="&amp;#123;REJECTOR&amp;#125;" Replacement="Global Safety and Security">
                                  <p:ReplaceString.Input>
                                    <InArgument x:TypeArguments="x:String">
                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                                    </InArgument>
                                  </p:ReplaceString.Input>
                                </p:ReplaceString>
                              </InArgument>
                            </p:ReplaceString.Input>
                          </p:ReplaceString>
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Replace {REJECTOR_COMMENTS} in Email">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                              <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent.Replace(&quot;&amp;#123;REJECTOR_COMMENTS&amp;#125;&quot;, taskDescription).Replace(&quot;{REJECTOR_COMMENTS}&quot;, taskDescription);">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="taskDescription">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID56}" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="taskDescription1">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID56}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <p:ReplaceString ExistingValue="{}{REJECTOR_COMMENTS}">
                            <p:ReplaceString.Input>
                              <InArgument x:TypeArguments="x:String">
                                <p:ReplaceString ExistingValue="&amp;#123;REJECTOR_COMMENTS&amp;#125;">
                                  <p:ReplaceString.Input>
                                    <InArgument x:TypeArguments="x:String">
                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                                    </InArgument>
                                  </p:ReplaceString.Input>
                                  <p:ReplaceString.Replacement>
                                    <InArgument x:TypeArguments="x:String">
                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="taskDescription" />
                                    </InArgument>
                                  </p:ReplaceString.Replacement>
                                </p:ReplaceString>
                              </InArgument>
                            </p:ReplaceString.Input>
                            <p:ReplaceString.Replacement>
                              <InArgument x:TypeArguments="x:String">
                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="taskDescription1" />
                              </InArgument>
                            </p:ReplaceString.Replacement>
                          </p:ReplaceString>
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="toRecipients">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="toRecipients">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="toRecipients" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </ClearCollection>
                  <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection">
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </ClearCollection>
                  <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection">
                    <p:BuildCollection.Result>
                      <OutArgument x:TypeArguments="sco:Collection(x:String)">
                        <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                              <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </p:BuildCollection.Result>
                    <p:BuildCollection.Values>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travellerLoginName">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="travellerLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="travellerLoginName" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p:BuildCollection.Values>
                  </p:BuildCollection>
                  <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email Cc Collection">
                    <p:BuildCollection.Result>
                      <OutArgument x:TypeArguments="sco:Collection(x:String)">
                        <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
                          <p:ExpressionContainerReference.Arguments>
                            <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                              <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                            </InOutArgument>
                          </p:ExpressionContainerReference.Arguments>
                          <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
                        </p:ExpressionContainerReference>
                      </OutArgument>
                    </p:BuildCollection.Result>
                    <p:BuildCollection.Values>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="requesterLoginName">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="requesterLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="requesterLoginName" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p:BuildCollection.Values>
                  </p:BuildCollection>
                  <If DisplayName="If travelCoordinatorLoginName is not empty">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(travelCoordinatorLoginName)">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <p:Not>
                            <InArgument x:TypeArguments="x:Boolean">
                              <p:IsEmptyString>
                                <InArgument x:TypeArguments="x:String">
                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                                </InArgument>
                              </p:IsEmptyString>
                            </InArgument>
                          </p:Not>
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <AddToCollection x:TypeArguments="x:String" DisplayName="Add travel coordinator login name to toCollection">
                        <AddToCollection.Item>
                          <InArgument x:TypeArguments="x:String">
                            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travelCoordinatorLoginName">
                              <p:ExpressionContainerValue.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                                </InArgument>
                              </p:ExpressionContainerValue.Arguments>
                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                            </p:ExpressionContainerValue>
                          </InArgument>
                        </AddToCollection.Item>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                          <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                            <p:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                                <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                              </InArgument>
                            </p:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                          </p:ExpressionContainerValue>
                        </InArgument>
                      </AddToCollection>
                    </If.Then>
                  </If>
                  <If DisplayName="If additionalStaffMemberLoginName is not empty">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(additionalStaffMemberLoginName)">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <p:Not>
                            <InArgument x:TypeArguments="x:Boolean">
                              <p:IsEmptyString>
                                <InArgument x:TypeArguments="x:String">
                                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                                </InArgument>
                              </p:IsEmptyString>
                            </InArgument>
                          </p:Not>
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection">
                        <AddToCollection.Item>
                          <InArgument x:TypeArguments="x:String">
                            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="additionalStaffMemberLoginName">
                              <p:ExpressionContainerValue.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                                </InArgument>
                              </p:ExpressionContainerValue.Arguments>
                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                            </p:ExpressionContainerValue>
                          </InArgument>
                        </AddToCollection.Item>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                          <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                            <p:ExpressionContainerValue.Arguments>
                              <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                                <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                              </InArgument>
                            </p:ExpressionContainerValue.Arguments>
                            <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                          </p:ExpressionContainerValue>
                        </InArgument>
                      </AddToCollection>
                    </If.Then>
                  </If>
                  <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Rejected Email">
                    <p1:Email.Body>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailContent">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailContent">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID10}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailContent" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:Email.Body>
                    <p1:Email.CC>
                      <InArgument x:TypeArguments="sco:Collection(x:String)">
                        <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                              <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:Email.CC>
                    <p1:Email.Subject>
                      <InArgument x:TypeArguments="x:String">
                        <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="rejectedEmailSubject">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="rejectedEmailSubject">
                              <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID9}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="x:String" ArgumentName="rejectedEmailSubject" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:Email.Subject>
                    <p1:Email.To>
                      <InArgument x:TypeArguments="sco:Collection(x:String)">
                        <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
                          <p:ExpressionContainerValue.Arguments>
                            <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                              <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                            </InArgument>
                          </p:ExpressionContainerValue.Arguments>
                          <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:Email.To>
                  </p1:Email>
                  <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update current TAR with GSS Approval Status &amp; Timestamp">
                    <p1:UpdateListItem.ItemId>
                      <InArgument x:TypeArguments="x:Int32">
                        <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                          <p1:GetCurrentItemId />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:UpdateListItem.ItemId>
                    <p1:UpdateListItem.ListId>
                      <InArgument x:TypeArguments="s:Guid">
                        <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                          <p1:GetCurrentListId />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:UpdateListItem.ListId>
                    <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <p:SetDynamicValueProperties>
                          <scg:Dictionary x:TypeArguments="x:String, InArgument">
                            <InArgument x:TypeArguments="x:String" x:Key="TAR_GSSApprovalStatus">Rejected</InArgument>
                            <InArgument x:TypeArguments="s:DateTime" x:Key="TAR_GSSApprovalTimestamp">
                              <p:ExpressionContainerValue x:TypeArguments="s:DateTime" DisplayName="DateTime.UtcNow">
                                <p:CurrentDate />
                              </p:ExpressionContainerValue>
                            </InArgument>
                          </scg:Dictionary>
                        </p:SetDynamicValueProperties>
                      </InArgument>
                    </p1:UpdateListItem.ListItemPropertiesDynamicValue>
                  </p1:UpdateListItem>
                  <TerminateWorkflow Reason="GSS Approvers has rejected the TAR." />
                </Sequence>
              </If.Then>
            </If>
          </Sequence>
        </Sequence>
      </If.Then>
    </If>
    <Sequence DisplayName="Send TAR Approved Email">
      <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email To Collection">
        <InArgument x:TypeArguments="scg:ICollection(x:String)">
          <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="toRecipients">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="toRecipients">
                <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID52}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="toRecipients" />
          </p:ExpressionContainerValue>
        </InArgument>
      </ClearCollection>
      <ClearCollection x:TypeArguments="x:String" DisplayName="Clear Email Cc Collection">
        <InArgument x:TypeArguments="scg:ICollection(x:String)">
          <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
          </p:ExpressionContainerValue>
        </InArgument>
      </ClearCollection>
      <p:BuildCollection x:TypeArguments="x:String" DisplayName="Build Email To Collection">
        <p:BuildCollection.Collection>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="toRecipients">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="toRecipients">
                  <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID52}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="toRecipients" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:BuildCollection.Collection>
        <p:BuildCollection.Result>
          <OutArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
              <p:ExpressionContainerReference.Arguments>
                <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                  <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                </InOutArgument>
              </p:ExpressionContainerReference.Arguments>
              <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
            </p:ExpressionContainerReference>
          </OutArgument>
        </p:BuildCollection.Result>
        <p:BuildCollection.Values>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travellerLoginName">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="travellerLoginName">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="travellerLoginName" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p:BuildCollection.Values>
      </p:BuildCollection>
      <Sequence DisplayName="Build Email Cc Collection">
        <p:BuildCollection x:TypeArguments="x:String" DisplayName="Initialize Email Cc Collection">
          <p:BuildCollection.Collection>
            <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
              <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="ccRecipients">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="ccRecipients">
                    <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID53}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="ccRecipients" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:BuildCollection.Collection>
          <p:BuildCollection.Result>
            <OutArgument x:TypeArguments="sco:Collection(x:String)">
              <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
                <p:ExpressionContainerReference.Arguments>
                  <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                    <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                  </InOutArgument>
                </p:ExpressionContainerReference.Arguments>
                <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
              </p:ExpressionContainerReference>
            </OutArgument>
          </p:BuildCollection.Result>
          <p:BuildCollection.Values>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="requesterLoginName">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="requesterLoginName">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="requesterLoginName" />
              </p:ExpressionContainerValue>
            </InArgument>
            <InArgument x:TypeArguments="x:String">
              <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="diversityLoginName">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="diversityLoginName">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <ArgumentValue x:TypeArguments="x:String" ArgumentName="diversityLoginName" />
              </p:ExpressionContainerValue>
            </InArgument>
          </p:BuildCollection.Values>
        </p:BuildCollection>
        <If DisplayName="If travelCoordinatorLoginName is not empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(travelCoordinatorLoginName)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:Not>
                  <InArgument x:TypeArguments="x:Boolean">
                    <p:IsEmptyString>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                      </InArgument>
                    </p:IsEmptyString>
                  </InArgument>
                </p:Not>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add travel coordinator login name to toCollection">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="travelCoordinatorLoginName">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="travelCoordinatorLoginName">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="travelCoordinatorLoginName" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                </p:ExpressionContainerValue>
              </InArgument>
            </AddToCollection>
          </If.Then>
        </If>
        <If DisplayName="If additionalStaffMemberLoginName is not empty">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="!string.IsNullOrEmpty(additionalStaffMemberLoginName)">
                <p:ExpressionContainerValue.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                    <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                  </InArgument>
                </p:ExpressionContainerValue.Arguments>
                <p:Not>
                  <InArgument x:TypeArguments="x:Boolean">
                    <p:IsEmptyString>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                      </InArgument>
                    </p:IsEmptyString>
                  </InArgument>
                </p:Not>
              </p:ExpressionContainerValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <AddToCollection x:TypeArguments="x:String" DisplayName="Add additional staff member login name to toCollection">
              <AddToCollection.Item>
                <InArgument x:TypeArguments="x:String">
                  <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="additionalStaffMemberLoginName">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="additionalStaffMemberLoginName">
                        <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID27}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="additionalStaffMemberLoginName" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection.Item>
              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                      <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                </p:ExpressionContainerValue>
              </InArgument>
            </AddToCollection>
          </If.Then>
        </If>
        <Sequence DisplayName="Add Country Directors to Cc">
          <ForEach x:TypeArguments="x:String" DisplayName="For each country director login name">
            <ForEach.Values>
              <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="countryDirectorsLoginNames">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="countryDirectorsLoginNames">
                      <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID30}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="countryDirectorsLoginNames" />
                </p:ExpressionContainerValue>
              </InArgument>
            </ForEach.Values>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" x:Name="__ReferenceID63" Name="cdLoginName" />
              </ActivityAction.Argument>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add Country Director Login Name to Cc">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="cdLoginName">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="cdLoginName">
                          <DelegateArgumentValue x:TypeArguments="x:String">
                            <x:Reference>__ReferenceID63</x:Reference>
                          </DelegateArgumentValue>
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="cdLoginName" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
            </ActivityAction>
          </ForEach>
        </Sequence>
        <Sequence DisplayName="Add Security Directors to Cc">
          <ForEach x:TypeArguments="x:String" DisplayName="For each security director login name">
            <ForEach.Values>
              <InArgument x:TypeArguments="scg:IEnumerable(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="scg:IEnumerable(x:String)" DisplayName="securityDirectorsLoginNames">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="securityDirectorsLoginNames">
                      <VariableValue x:TypeArguments="scg:IEnumerable(x:String)" Variable="{x:Reference __ReferenceID40}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="scg:IEnumerable(x:String)" ArgumentName="securityDirectorsLoginNames" />
                </p:ExpressionContainerValue>
              </InArgument>
            </ForEach.Values>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" x:Name="__ReferenceID64" Name="sdLoginName" />
              </ActivityAction.Argument>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Add Security Director Login Name to Cc">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="sdLoginName">
                      <p:ExpressionContainerValue.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="sdLoginName">
                          <DelegateArgumentValue x:TypeArguments="x:String">
                            <x:Reference>__ReferenceID64</x:Reference>
                          </DelegateArgumentValue>
                        </InArgument>
                      </p:ExpressionContainerValue.Arguments>
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="sdLoginName" />
                    </p:ExpressionContainerValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <p:ExpressionContainerValue x:TypeArguments="scg:ICollection(x:String)" DisplayName="ccRecipients">
                    <p:ExpressionContainerValue.Arguments>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="ccRecipients">
                        <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                      </InArgument>
                    </p:ExpressionContainerValue.Arguments>
                    <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="ccRecipients" />
                  </p:ExpressionContainerValue>
                </InArgument>
              </AddToCollection>
            </ActivityAction>
          </ForEach>
        </Sequence>
      </Sequence>
      <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" DisplayName="Send Approved Email">
        <p1:Email.Body>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="approvedEmailContent">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="approvedEmailContent">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="approvedEmailContent" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.Body>
        <p1:Email.CC>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="ccRecipients">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="ccRecipients">
                  <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID53}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="ccRecipients" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.CC>
        <p1:Email.Subject>
          <InArgument x:TypeArguments="x:String">
            <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="approvedEmailSubject">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="approvedEmailSubject">
                  <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="x:String" ArgumentName="approvedEmailSubject" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.Subject>
        <p1:Email.To>
          <InArgument x:TypeArguments="sco:Collection(x:String)">
            <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="toRecipients">
              <p:ExpressionContainerValue.Arguments>
                <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="toRecipients">
                  <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID52}" />
                </InArgument>
              </p:ExpressionContainerValue.Arguments>
              <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="toRecipients" />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:Email.To>
      </p1:Email>
    </Sequence>
  </Sequence>
</Activity>